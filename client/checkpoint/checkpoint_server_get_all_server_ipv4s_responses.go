// Code generated by go-swagger; DO NOT EDIT.

package checkpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/models"
)

// CheckpointServerGetAllServerIpv4sReader is a Reader for the CheckpointServerGetAllServerIpv4s structure.
type CheckpointServerGetAllServerIpv4sReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckpointServerGetAllServerIpv4sReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckpointServerGetAllServerIpv4sOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckpointServerGetAllServerIpv4sBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCheckpointServerGetAllServerIpv4sOK creates a CheckpointServerGetAllServerIpv4sOK with default headers values
func NewCheckpointServerGetAllServerIpv4sOK() *CheckpointServerGetAllServerIpv4sOK {
	return &CheckpointServerGetAllServerIpv4sOK{}
}

/*CheckpointServerGetAllServerIpv4sOK handles this case with default header values.

CheckpointServerGetAllServerIpv4sOK checkpoint server get all server ipv4s o k
*/
type CheckpointServerGetAllServerIpv4sOK struct {
	Payload *models.ListStringResponse
}

func (o *CheckpointServerGetAllServerIpv4sOK) Error() string {
	return fmt.Sprintf("[GET /Checkpoint/Server/Ipv4][%d] checkpointServerGetAllServerIpv4sOK  %+v", 200, o.Payload)
}

func (o *CheckpointServerGetAllServerIpv4sOK) GetPayload() *models.ListStringResponse {
	return o.Payload
}

func (o *CheckpointServerGetAllServerIpv4sOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListStringResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckpointServerGetAllServerIpv4sBadRequest creates a CheckpointServerGetAllServerIpv4sBadRequest with default headers values
func NewCheckpointServerGetAllServerIpv4sBadRequest() *CheckpointServerGetAllServerIpv4sBadRequest {
	return &CheckpointServerGetAllServerIpv4sBadRequest{}
}

/*CheckpointServerGetAllServerIpv4sBadRequest handles this case with default header values.

The request failed.
*/
type CheckpointServerGetAllServerIpv4sBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *CheckpointServerGetAllServerIpv4sBadRequest) Error() string {
	return fmt.Sprintf("[GET /Checkpoint/Server/Ipv4][%d] checkpointServerGetAllServerIpv4sBadRequest  %+v", 400, o.Payload)
}

func (o *CheckpointServerGetAllServerIpv4sBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *CheckpointServerGetAllServerIpv4sBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
