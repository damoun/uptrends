// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/models"
)

// MonitorCloneMonitorReader is a Reader for the MonitorCloneMonitor structure.
type MonitorCloneMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorCloneMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewMonitorCloneMonitorCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorCloneMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMonitorCloneMonitorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMonitorCloneMonitorCreated creates a MonitorCloneMonitorCreated with default headers values
func NewMonitorCloneMonitorCreated() *MonitorCloneMonitorCreated {
	return &MonitorCloneMonitorCreated{}
}

/*MonitorCloneMonitorCreated handles this case with default header values.

The monitor was cloned successfully.
*/
type MonitorCloneMonitorCreated struct {
	Payload *models.APIMonitor
}

func (o *MonitorCloneMonitorCreated) Error() string {
	return fmt.Sprintf("[POST /Monitor/{monitorGuid}/Clone][%d] monitorCloneMonitorCreated  %+v", 201, o.Payload)
}

func (o *MonitorCloneMonitorCreated) GetPayload() *models.APIMonitor {
	return o.Payload
}

func (o *MonitorCloneMonitorCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMonitor)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorCloneMonitorBadRequest creates a MonitorCloneMonitorBadRequest with default headers values
func NewMonitorCloneMonitorBadRequest() *MonitorCloneMonitorBadRequest {
	return &MonitorCloneMonitorBadRequest{}
}

/*MonitorCloneMonitorBadRequest handles this case with default header values.

The request failed.
*/
type MonitorCloneMonitorBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *MonitorCloneMonitorBadRequest) Error() string {
	return fmt.Sprintf("[POST /Monitor/{monitorGuid}/Clone][%d] monitorCloneMonitorBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorCloneMonitorBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *MonitorCloneMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorCloneMonitorNotFound creates a MonitorCloneMonitorNotFound with default headers values
func NewMonitorCloneMonitorNotFound() *MonitorCloneMonitorNotFound {
	return &MonitorCloneMonitorNotFound{}
}

/*MonitorCloneMonitorNotFound handles this case with default header values.

The specified monitor does not exist.
*/
type MonitorCloneMonitorNotFound struct {
	Payload *models.APIMessageInfo
}

func (o *MonitorCloneMonitorNotFound) Error() string {
	return fmt.Sprintf("[POST /Monitor/{monitorGuid}/Clone][%d] monitorCloneMonitorNotFound  %+v", 404, o.Payload)
}

func (o *MonitorCloneMonitorNotFound) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *MonitorCloneMonitorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
