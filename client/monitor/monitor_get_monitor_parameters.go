// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMonitorGetMonitorParams creates a new MonitorGetMonitorParams object
// with the default values initialized.
func NewMonitorGetMonitorParams() *MonitorGetMonitorParams {
	var ()
	return &MonitorGetMonitorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMonitorGetMonitorParamsWithTimeout creates a new MonitorGetMonitorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMonitorGetMonitorParamsWithTimeout(timeout time.Duration) *MonitorGetMonitorParams {
	var ()
	return &MonitorGetMonitorParams{

		timeout: timeout,
	}
}

// NewMonitorGetMonitorParamsWithContext creates a new MonitorGetMonitorParams object
// with the default values initialized, and the ability to set a context for a request
func NewMonitorGetMonitorParamsWithContext(ctx context.Context) *MonitorGetMonitorParams {
	var ()
	return &MonitorGetMonitorParams{

		Context: ctx,
	}
}

// NewMonitorGetMonitorParamsWithHTTPClient creates a new MonitorGetMonitorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMonitorGetMonitorParamsWithHTTPClient(client *http.Client) *MonitorGetMonitorParams {
	var ()
	return &MonitorGetMonitorParams{
		HTTPClient: client,
	}
}

/*MonitorGetMonitorParams contains all the parameters to send to the API endpoint
for the monitor get monitor operation typically these are written to a http.Request
*/
type MonitorGetMonitorParams struct {

	/*MonitorGUID
	  The Guid of the requested monitor.

	*/
	MonitorGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the monitor get monitor params
func (o *MonitorGetMonitorParams) WithTimeout(timeout time.Duration) *MonitorGetMonitorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitor get monitor params
func (o *MonitorGetMonitorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitor get monitor params
func (o *MonitorGetMonitorParams) WithContext(ctx context.Context) *MonitorGetMonitorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitor get monitor params
func (o *MonitorGetMonitorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitor get monitor params
func (o *MonitorGetMonitorParams) WithHTTPClient(client *http.Client) *MonitorGetMonitorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitor get monitor params
func (o *MonitorGetMonitorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMonitorGUID adds the monitorGUID to the monitor get monitor params
func (o *MonitorGetMonitorParams) WithMonitorGUID(monitorGUID string) *MonitorGetMonitorParams {
	o.SetMonitorGUID(monitorGUID)
	return o
}

// SetMonitorGUID adds the monitorGuid to the monitor get monitor params
func (o *MonitorGetMonitorParams) SetMonitorGUID(monitorGUID string) {
	o.MonitorGUID = monitorGUID
}

// WriteToRequest writes these params to a swagger request
func (o *MonitorGetMonitorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param monitorGuid
	if err := r.SetPathParam("monitorGuid", o.MonitorGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
