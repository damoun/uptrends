// Code generated by go-swagger; DO NOT EDIT.

package monitor_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new monitor check API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitor check API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
MonitorCheckGetAccountMonitorChecks returns all monitor check data
*/
func (a *Client) MonitorCheckGetAccountMonitorChecks(params *MonitorCheckGetAccountMonitorChecksParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetAccountMonitorChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetAccountMonitorChecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetAccountMonitorChecks",
		Method:             "GET",
		PathPattern:        "/MonitorCheck",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetAccountMonitorChecksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetAccountMonitorChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetAccountMonitorChecks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetHTTPDetails returns HTTP details for a monitor check
*/
func (a *Client) MonitorCheckGetHTTPDetails(params *MonitorCheckGetHTTPDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetHTTPDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetHTTPDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetHttpDetails",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/{monitorCheckId}/Http",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetHTTPDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetHTTPDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetHttpDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetMonitorCheck returns monitor check data for a specific monitor
*/
func (a *Client) MonitorCheckGetMonitorCheck(params *MonitorCheckGetMonitorCheckParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetMonitorCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetMonitorCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetMonitorCheck",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/Monitor/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetMonitorCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetMonitorCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetMonitorCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetMonitorGroupData returns monitor check data for a specific monitor group
*/
func (a *Client) MonitorCheckGetMonitorGroupData(params *MonitorCheckGetMonitorGroupDataParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetMonitorGroupDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetMonitorGroupDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetMonitorGroupData",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/MonitorGroup/{monitorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetMonitorGroupDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetMonitorGroupDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetMonitorGroupData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetMultistepDetails returns multi step API details for a monitor check
*/
func (a *Client) MonitorCheckGetMultistepDetails(params *MonitorCheckGetMultistepDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetMultistepDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetMultistepDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetMultistepDetails",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/{monitorCheckId}/MultiStepAPI",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetMultistepDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetMultistepDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetMultistepDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetScreenshots monitor check get screenshots API
*/
func (a *Client) MonitorCheckGetScreenshots(params *MonitorCheckGetScreenshotsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetScreenshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetScreenshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetScreenshots",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/{monitorCheckId}/Screenshot/{screenshotId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetScreenshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetScreenshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetScreenshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetSingleMonitorCheck returns a single monitor check
*/
func (a *Client) MonitorCheckGetSingleMonitorCheck(params *MonitorCheckGetSingleMonitorCheckParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetSingleMonitorCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetSingleMonitorCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetSingleMonitorCheck",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/{monitorCheckId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetSingleMonitorCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetSingleMonitorCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetSingleMonitorCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetTransactionDetails returns transaction step details for a monitor check
*/
func (a *Client) MonitorCheckGetTransactionDetails(params *MonitorCheckGetTransactionDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetTransactionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetTransactionDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetTransactionDetails",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/{monitorCheckId}/Transaction",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetTransactionDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetTransactionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetTransactionDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MonitorCheckGetWaterfallInfo returns waterfall information for a monitor check
*/
func (a *Client) MonitorCheckGetWaterfallInfo(params *MonitorCheckGetWaterfallInfoParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCheckGetWaterfallInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCheckGetWaterfallInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorCheck_GetWaterfallInfo",
		Method:             "GET",
		PathPattern:        "/MonitorCheck/{monitorCheckId}/Waterfall",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCheckGetWaterfallInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCheckGetWaterfallInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorCheck_GetWaterfallInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
