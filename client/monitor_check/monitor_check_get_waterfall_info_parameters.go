// Code generated by go-swagger; DO NOT EDIT.

package monitor_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMonitorCheckGetWaterfallInfoParams creates a new MonitorCheckGetWaterfallInfoParams object
// with the default values initialized.
func NewMonitorCheckGetWaterfallInfoParams() *MonitorCheckGetWaterfallInfoParams {
	var ()
	return &MonitorCheckGetWaterfallInfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMonitorCheckGetWaterfallInfoParamsWithTimeout creates a new MonitorCheckGetWaterfallInfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMonitorCheckGetWaterfallInfoParamsWithTimeout(timeout time.Duration) *MonitorCheckGetWaterfallInfoParams {
	var ()
	return &MonitorCheckGetWaterfallInfoParams{

		timeout: timeout,
	}
}

// NewMonitorCheckGetWaterfallInfoParamsWithContext creates a new MonitorCheckGetWaterfallInfoParams object
// with the default values initialized, and the ability to set a context for a request
func NewMonitorCheckGetWaterfallInfoParamsWithContext(ctx context.Context) *MonitorCheckGetWaterfallInfoParams {
	var ()
	return &MonitorCheckGetWaterfallInfoParams{

		Context: ctx,
	}
}

// NewMonitorCheckGetWaterfallInfoParamsWithHTTPClient creates a new MonitorCheckGetWaterfallInfoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMonitorCheckGetWaterfallInfoParamsWithHTTPClient(client *http.Client) *MonitorCheckGetWaterfallInfoParams {
	var ()
	return &MonitorCheckGetWaterfallInfoParams{
		HTTPClient: client,
	}
}

/*MonitorCheckGetWaterfallInfoParams contains all the parameters to send to the API endpoint
for the monitor check get waterfall info operation typically these are written to a http.Request
*/
type MonitorCheckGetWaterfallInfoParams struct {

	/*MonitorCheckID
	  Monitor check Id to get the detailed data for.

	*/
	MonitorCheckID int64
	/*Step
	  For transaction waterfalls only: the transaction step to get the waterfall for.

	*/
	Step *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) WithTimeout(timeout time.Duration) *MonitorCheckGetWaterfallInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) WithContext(ctx context.Context) *MonitorCheckGetWaterfallInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) WithHTTPClient(client *http.Client) *MonitorCheckGetWaterfallInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMonitorCheckID adds the monitorCheckID to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) WithMonitorCheckID(monitorCheckID int64) *MonitorCheckGetWaterfallInfoParams {
	o.SetMonitorCheckID(monitorCheckID)
	return o
}

// SetMonitorCheckID adds the monitorCheckId to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) SetMonitorCheckID(monitorCheckID int64) {
	o.MonitorCheckID = monitorCheckID
}

// WithStep adds the step to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) WithStep(step *int32) *MonitorCheckGetWaterfallInfoParams {
	o.SetStep(step)
	return o
}

// SetStep adds the step to the monitor check get waterfall info params
func (o *MonitorCheckGetWaterfallInfoParams) SetStep(step *int32) {
	o.Step = step
}

// WriteToRequest writes these params to a swagger request
func (o *MonitorCheckGetWaterfallInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param monitorCheckId
	if err := r.SetPathParam("monitorCheckId", swag.FormatInt64(o.MonitorCheckID)); err != nil {
		return err
	}

	if o.Step != nil {

		// query param step
		var qrStep int32
		if o.Step != nil {
			qrStep = *o.Step
		}
		qStep := swag.FormatInt32(qrStep)
		if qStep != "" {
			if err := r.SetQueryParam("step", qStep); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
