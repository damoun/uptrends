// Code generated by go-swagger; DO NOT EDIT.

package monitor_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/models"
)

// MonitorGroupRemoveMonitorFromMonitorGroupReader is a Reader for the MonitorGroupRemoveMonitorFromMonitorGroup structure.
type MonitorGroupRemoveMonitorFromMonitorGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorGroupRemoveMonitorFromMonitorGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewMonitorGroupRemoveMonitorFromMonitorGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorGroupRemoveMonitorFromMonitorGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMonitorGroupRemoveMonitorFromMonitorGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMonitorGroupRemoveMonitorFromMonitorGroupNoContent creates a MonitorGroupRemoveMonitorFromMonitorGroupNoContent with default headers values
func NewMonitorGroupRemoveMonitorFromMonitorGroupNoContent() *MonitorGroupRemoveMonitorFromMonitorGroupNoContent {
	return &MonitorGroupRemoveMonitorFromMonitorGroupNoContent{}
}

/*MonitorGroupRemoveMonitorFromMonitorGroupNoContent handles this case with default header values.

Request completed successfully.
*/
type MonitorGroupRemoveMonitorFromMonitorGroupNoContent struct {
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupNoContent) Error() string {
	return fmt.Sprintf("[DELETE /MonitorGroup/{monitorGroupGuid}/Members/{monitorGuid}][%d] monitorGroupRemoveMonitorFromMonitorGroupNoContent ", 204)
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMonitorGroupRemoveMonitorFromMonitorGroupBadRequest creates a MonitorGroupRemoveMonitorFromMonitorGroupBadRequest with default headers values
func NewMonitorGroupRemoveMonitorFromMonitorGroupBadRequest() *MonitorGroupRemoveMonitorFromMonitorGroupBadRequest {
	return &MonitorGroupRemoveMonitorFromMonitorGroupBadRequest{}
}

/*MonitorGroupRemoveMonitorFromMonitorGroupBadRequest handles this case with default header values.

The request failed.
or
A monitor cannot be removed from the All Monitors group.
*/
type MonitorGroupRemoveMonitorFromMonitorGroupBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /MonitorGroup/{monitorGroupGuid}/Members/{monitorGuid}][%d] monitorGroupRemoveMonitorFromMonitorGroupBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGroupRemoveMonitorFromMonitorGroupNotFound creates a MonitorGroupRemoveMonitorFromMonitorGroupNotFound with default headers values
func NewMonitorGroupRemoveMonitorFromMonitorGroupNotFound() *MonitorGroupRemoveMonitorFromMonitorGroupNotFound {
	return &MonitorGroupRemoveMonitorFromMonitorGroupNotFound{}
}

/*MonitorGroupRemoveMonitorFromMonitorGroupNotFound handles this case with default header values.

The requested monitor group was not found.
*/
type MonitorGroupRemoveMonitorFromMonitorGroupNotFound struct {
	Payload *models.APIMessageInfo
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /MonitorGroup/{monitorGroupGuid}/Members/{monitorGuid}][%d] monitorGroupRemoveMonitorFromMonitorGroupNotFound  %+v", 404, o.Payload)
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupNotFound) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *MonitorGroupRemoveMonitorFromMonitorGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
