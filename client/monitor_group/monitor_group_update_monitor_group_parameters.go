// Code generated by go-swagger; DO NOT EDIT.

package monitor_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/models"
)

// NewMonitorGroupUpdateMonitorGroupParams creates a new MonitorGroupUpdateMonitorGroupParams object
// with the default values initialized.
func NewMonitorGroupUpdateMonitorGroupParams() *MonitorGroupUpdateMonitorGroupParams {
	var ()
	return &MonitorGroupUpdateMonitorGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMonitorGroupUpdateMonitorGroupParamsWithTimeout creates a new MonitorGroupUpdateMonitorGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMonitorGroupUpdateMonitorGroupParamsWithTimeout(timeout time.Duration) *MonitorGroupUpdateMonitorGroupParams {
	var ()
	return &MonitorGroupUpdateMonitorGroupParams{

		timeout: timeout,
	}
}

// NewMonitorGroupUpdateMonitorGroupParamsWithContext creates a new MonitorGroupUpdateMonitorGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewMonitorGroupUpdateMonitorGroupParamsWithContext(ctx context.Context) *MonitorGroupUpdateMonitorGroupParams {
	var ()
	return &MonitorGroupUpdateMonitorGroupParams{

		Context: ctx,
	}
}

// NewMonitorGroupUpdateMonitorGroupParamsWithHTTPClient creates a new MonitorGroupUpdateMonitorGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMonitorGroupUpdateMonitorGroupParamsWithHTTPClient(client *http.Client) *MonitorGroupUpdateMonitorGroupParams {
	var ()
	return &MonitorGroupUpdateMonitorGroupParams{
		HTTPClient: client,
	}
}

/*MonitorGroupUpdateMonitorGroupParams contains all the parameters to send to the API endpoint
for the monitor group update monitor group operation typically these are written to a http.Request
*/
type MonitorGroupUpdateMonitorGroupParams struct {

	/*Item
	  The monitor group to be updated

	*/
	Item *models.MonitorGroup
	/*MonitorGroupGUID
	  The Guid of the monitor group to be updated

	*/
	MonitorGroupGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) WithTimeout(timeout time.Duration) *MonitorGroupUpdateMonitorGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) WithContext(ctx context.Context) *MonitorGroupUpdateMonitorGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) WithHTTPClient(client *http.Client) *MonitorGroupUpdateMonitorGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithItem adds the item to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) WithItem(item *models.MonitorGroup) *MonitorGroupUpdateMonitorGroupParams {
	o.SetItem(item)
	return o
}

// SetItem adds the item to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) SetItem(item *models.MonitorGroup) {
	o.Item = item
}

// WithMonitorGroupGUID adds the monitorGroupGUID to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) WithMonitorGroupGUID(monitorGroupGUID string) *MonitorGroupUpdateMonitorGroupParams {
	o.SetMonitorGroupGUID(monitorGroupGUID)
	return o
}

// SetMonitorGroupGUID adds the monitorGroupGuid to the monitor group update monitor group params
func (o *MonitorGroupUpdateMonitorGroupParams) SetMonitorGroupGUID(monitorGroupGUID string) {
	o.MonitorGroupGUID = monitorGroupGUID
}

// WriteToRequest writes these params to a swagger request
func (o *MonitorGroupUpdateMonitorGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Item != nil {
		if err := r.SetBodyParam(o.Item); err != nil {
			return err
		}
	}

	// path param monitorGroupGuid
	if err := r.SetPathParam("monitorGroupGuid", o.MonitorGroupGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
