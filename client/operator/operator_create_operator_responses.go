// Code generated by go-swagger; DO NOT EDIT.

package operator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/models"
)

// OperatorCreateOperatorReader is a Reader for the OperatorCreateOperator structure.
type OperatorCreateOperatorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OperatorCreateOperatorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewOperatorCreateOperatorCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOperatorCreateOperatorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOperatorCreateOperatorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOperatorCreateOperatorCreated creates a OperatorCreateOperatorCreated with default headers values
func NewOperatorCreateOperatorCreated() *OperatorCreateOperatorCreated {
	return &OperatorCreateOperatorCreated{}
}

/*OperatorCreateOperatorCreated handles this case with default header values.

Request completed successfully.
*/
type OperatorCreateOperatorCreated struct {
	Payload *models.Operator
}

func (o *OperatorCreateOperatorCreated) Error() string {
	return fmt.Sprintf("[POST /Operator][%d] operatorCreateOperatorCreated  %+v", 201, o.Payload)
}

func (o *OperatorCreateOperatorCreated) GetPayload() *models.Operator {
	return o.Payload
}

func (o *OperatorCreateOperatorCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Operator)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOperatorCreateOperatorBadRequest creates a OperatorCreateOperatorBadRequest with default headers values
func NewOperatorCreateOperatorBadRequest() *OperatorCreateOperatorBadRequest {
	return &OperatorCreateOperatorBadRequest{}
}

/*OperatorCreateOperatorBadRequest handles this case with default header values.

The request failed.
*/
type OperatorCreateOperatorBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *OperatorCreateOperatorBadRequest) Error() string {
	return fmt.Sprintf("[POST /Operator][%d] operatorCreateOperatorBadRequest  %+v", 400, o.Payload)
}

func (o *OperatorCreateOperatorBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *OperatorCreateOperatorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOperatorCreateOperatorForbidden creates a OperatorCreateOperatorForbidden with default headers values
func NewOperatorCreateOperatorForbidden() *OperatorCreateOperatorForbidden {
	return &OperatorCreateOperatorForbidden{}
}

/*OperatorCreateOperatorForbidden handles this case with default header values.

One or more validation errors occurred.
*/
type OperatorCreateOperatorForbidden struct {
	Payload []*models.APIMessageInfo
}

func (o *OperatorCreateOperatorForbidden) Error() string {
	return fmt.Sprintf("[POST /Operator][%d] operatorCreateOperatorForbidden  %+v", 403, o.Payload)
}

func (o *OperatorCreateOperatorForbidden) GetPayload() []*models.APIMessageInfo {
	return o.Payload
}

func (o *OperatorCreateOperatorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
