// Code generated by go-swagger; DO NOT EDIT.

package operator_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operator group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operator group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
OperatorGroupAddDutyScheduleToAllMembers adds the provided duty schedule to all operators in the group specified
*/
func (a *Client) OperatorGroupAddDutyScheduleToAllMembers(params *OperatorGroupAddDutyScheduleToAllMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAddDutyScheduleToAllMembersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupAddDutyScheduleToAllMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_AddDutyScheduleToAllMembers",
		Method:             "POST",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/DutySchedule/AddDutyScheduleForAllMembers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupAddDutyScheduleToAllMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupAddDutyScheduleToAllMembersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_AddDutyScheduleToAllMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupAddOperatorToOperatorGroup adds the specified operator to the operator group
*/
func (a *Client) OperatorGroupAddOperatorToOperatorGroup(params *OperatorGroupAddOperatorToOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAddOperatorToOperatorGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupAddOperatorToOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_AddOperatorToOperatorGroup",
		Method:             "POST",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/Member/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupAddOperatorToOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupAddOperatorToOperatorGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_AddOperatorToOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupCreateoperatorGroup creates a new operator group
*/
func (a *Client) OperatorGroupCreateoperatorGroup(params *OperatorGroupCreateoperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupCreateoperatorGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupCreateoperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_CreateoperatorGroup",
		Method:             "POST",
		PathPattern:        "/OperatorGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupCreateoperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupCreateoperatorGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_CreateoperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupDeleteoperatorGroup deletes the specified operator group
*/
func (a *Client) OperatorGroupDeleteoperatorGroup(params *OperatorGroupDeleteoperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupDeleteoperatorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupDeleteoperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_DeleteoperatorGroup",
		Method:             "DELETE",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupDeleteoperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupDeleteoperatorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_DeleteoperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupGetAlloperatorGroups gets all operator groups
*/
func (a *Client) OperatorGroupGetAlloperatorGroups(params *OperatorGroupGetAlloperatorGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetAlloperatorGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupGetAlloperatorGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_GetAlloperatorGroups",
		Method:             "GET",
		PathPattern:        "/OperatorGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupGetAlloperatorGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupGetAlloperatorGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_GetAlloperatorGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupGetOperatorGroup gets the details of a operator group
*/
func (a *Client) OperatorGroupGetOperatorGroup(params *OperatorGroupGetOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetOperatorGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupGetOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_GetOperatorGroup",
		Method:             "GET",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupGetOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupGetOperatorGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_GetOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupGetoperatorGroupMembers gets a list of all members of a operator group
*/
func (a *Client) OperatorGroupGetoperatorGroupMembers(params *OperatorGroupGetoperatorGroupMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetoperatorGroupMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupGetoperatorGroupMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_GetoperatorGroupMembers",
		Method:             "GET",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/Member",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupGetoperatorGroupMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupGetoperatorGroupMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_GetoperatorGroupMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupRemoveoperatorFromoperatorGroup removes the specified operator from the operator group
*/
func (a *Client) OperatorGroupRemoveoperatorFromoperatorGroup(params *OperatorGroupRemoveoperatorFromoperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupRemoveoperatorFromoperatorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupRemoveoperatorFromoperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_RemoveoperatorFromoperatorGroup",
		Method:             "DELETE",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/Member/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupRemoveoperatorFromoperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupRemoveoperatorFromoperatorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_RemoveoperatorFromoperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OperatorGroupUpdateoperatorGroup updates the operator group with the Guid specified
*/
func (a *Client) OperatorGroupUpdateoperatorGroup(params *OperatorGroupUpdateoperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupUpdateoperatorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupUpdateoperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_UpdateoperatorGroup",
		Method:             "PUT",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupUpdateoperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupUpdateoperatorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_UpdateoperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
