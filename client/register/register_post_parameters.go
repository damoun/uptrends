// Code generated by go-swagger; DO NOT EDIT.

package register

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRegisterPostParams creates a new RegisterPostParams object
// with the default values initialized.
func NewRegisterPostParams() *RegisterPostParams {
	var (
		typeVarDefault = string("")
	)
	return &RegisterPostParams{
		Type: &typeVarDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterPostParamsWithTimeout creates a new RegisterPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegisterPostParamsWithTimeout(timeout time.Duration) *RegisterPostParams {
	var (
		typeVarDefault = string("")
	)
	return &RegisterPostParams{
		Type: &typeVarDefault,

		timeout: timeout,
	}
}

// NewRegisterPostParamsWithContext creates a new RegisterPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegisterPostParamsWithContext(ctx context.Context) *RegisterPostParams {
	var (
		typeDefault = string("")
	)
	return &RegisterPostParams{
		Type: &typeDefault,

		Context: ctx,
	}
}

// NewRegisterPostParamsWithHTTPClient creates a new RegisterPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegisterPostParamsWithHTTPClient(client *http.Client) *RegisterPostParams {
	var (
		typeDefault = string("")
	)
	return &RegisterPostParams{
		Type:       &typeDefault,
		HTTPClient: client,
	}
}

/*RegisterPostParams contains all the parameters to send to the API endpoint
for the register post operation typically these are written to a http.Request
*/
type RegisterPostParams struct {

	/*Description
	  A simple text value to give the new API account a name, e.g. "API"

	*/
	Description string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the register post params
func (o *RegisterPostParams) WithTimeout(timeout time.Duration) *RegisterPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register post params
func (o *RegisterPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register post params
func (o *RegisterPostParams) WithContext(ctx context.Context) *RegisterPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register post params
func (o *RegisterPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register post params
func (o *RegisterPostParams) WithHTTPClient(client *http.Client) *RegisterPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register post params
func (o *RegisterPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the register post params
func (o *RegisterPostParams) WithDescription(description string) *RegisterPostParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the register post params
func (o *RegisterPostParams) SetDescription(description string) {
	o.Description = description
}

// WithType adds the typeVar to the register post params
func (o *RegisterPostParams) WithType(typeVar *string) *RegisterPostParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the register post params
func (o *RegisterPostParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param description
	qrDescription := o.Description
	qDescription := qrDescription
	if qDescription != "" {
		if err := r.SetQueryParam("description", qDescription); err != nil {
			return err
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
