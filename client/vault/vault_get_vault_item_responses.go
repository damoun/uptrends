// Code generated by go-swagger; DO NOT EDIT.

package vault

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/models"
)

// VaultGetVaultItemReader is a Reader for the VaultGetVaultItem structure.
type VaultGetVaultItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VaultGetVaultItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVaultGetVaultItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVaultGetVaultItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVaultGetVaultItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVaultGetVaultItemOK creates a VaultGetVaultItemOK with default headers values
func NewVaultGetVaultItemOK() *VaultGetVaultItemOK {
	return &VaultGetVaultItemOK{}
}

/*VaultGetVaultItemOK handles this case with default header values.

Request completed successfully.
*/
type VaultGetVaultItemOK struct {
	Payload *models.VaultItem
}

func (o *VaultGetVaultItemOK) Error() string {
	return fmt.Sprintf("[GET /VaultItem/{vaultItemGuid}][%d] vaultGetVaultItemOK  %+v", 200, o.Payload)
}

func (o *VaultGetVaultItemOK) GetPayload() *models.VaultItem {
	return o.Payload
}

func (o *VaultGetVaultItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VaultItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVaultGetVaultItemBadRequest creates a VaultGetVaultItemBadRequest with default headers values
func NewVaultGetVaultItemBadRequest() *VaultGetVaultItemBadRequest {
	return &VaultGetVaultItemBadRequest{}
}

/*VaultGetVaultItemBadRequest handles this case with default header values.

The request failed.
*/
type VaultGetVaultItemBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *VaultGetVaultItemBadRequest) Error() string {
	return fmt.Sprintf("[GET /VaultItem/{vaultItemGuid}][%d] vaultGetVaultItemBadRequest  %+v", 400, o.Payload)
}

func (o *VaultGetVaultItemBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *VaultGetVaultItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVaultGetVaultItemNotFound creates a VaultGetVaultItemNotFound with default headers values
func NewVaultGetVaultItemNotFound() *VaultGetVaultItemNotFound {
	return &VaultGetVaultItemNotFound{}
}

/*VaultGetVaultItemNotFound handles this case with default header values.

The requested vault item does not exist.
*/
type VaultGetVaultItemNotFound struct {
	Payload *models.APIMessageInfo
}

func (o *VaultGetVaultItemNotFound) Error() string {
	return fmt.Sprintf("[GET /VaultItem/{vaultItemGuid}][%d] vaultGetVaultItemNotFound  %+v", 404, o.Payload)
}

func (o *VaultGetVaultItemNotFound) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *VaultGetVaultItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
