// Code generated by go-swagger; DO NOT EDIT.

package vault

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/models"
)

// VaultUpdateVaultItemReader is a Reader for the VaultUpdateVaultItem structure.
type VaultUpdateVaultItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VaultUpdateVaultItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewVaultUpdateVaultItemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVaultUpdateVaultItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVaultUpdateVaultItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVaultUpdateVaultItemNoContent creates a VaultUpdateVaultItemNoContent with default headers values
func NewVaultUpdateVaultItemNoContent() *VaultUpdateVaultItemNoContent {
	return &VaultUpdateVaultItemNoContent{}
}

/*VaultUpdateVaultItemNoContent handles this case with default header values.

Request completed successfully.
*/
type VaultUpdateVaultItemNoContent struct {
	Payload *models.VaultItem
}

func (o *VaultUpdateVaultItemNoContent) Error() string {
	return fmt.Sprintf("[PUT /VaultItem/{vaultItemGuid}][%d] vaultUpdateVaultItemNoContent  %+v", 204, o.Payload)
}

func (o *VaultUpdateVaultItemNoContent) GetPayload() *models.VaultItem {
	return o.Payload
}

func (o *VaultUpdateVaultItemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VaultItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVaultUpdateVaultItemBadRequest creates a VaultUpdateVaultItemBadRequest with default headers values
func NewVaultUpdateVaultItemBadRequest() *VaultUpdateVaultItemBadRequest {
	return &VaultUpdateVaultItemBadRequest{}
}

/*VaultUpdateVaultItemBadRequest handles this case with default header values.

The request failed.
*/
type VaultUpdateVaultItemBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *VaultUpdateVaultItemBadRequest) Error() string {
	return fmt.Sprintf("[PUT /VaultItem/{vaultItemGuid}][%d] vaultUpdateVaultItemBadRequest  %+v", 400, o.Payload)
}

func (o *VaultUpdateVaultItemBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *VaultUpdateVaultItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVaultUpdateVaultItemNotFound creates a VaultUpdateVaultItemNotFound with default headers values
func NewVaultUpdateVaultItemNotFound() *VaultUpdateVaultItemNotFound {
	return &VaultUpdateVaultItemNotFound{}
}

/*VaultUpdateVaultItemNotFound handles this case with default header values.

The requested vault item does not exist.
*/
type VaultUpdateVaultItemNotFound struct {
	Payload *models.APIMessageInfo
}

func (o *VaultUpdateVaultItemNotFound) Error() string {
	return fmt.Sprintf("[PUT /VaultItem/{vaultItemGuid}][%d] vaultUpdateVaultItemNotFound  %+v", 404, o.Payload)
}

func (o *VaultUpdateVaultItemNotFound) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *VaultUpdateVaultItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
