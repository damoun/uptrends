// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIMonitor Api monitor
// swagger:model ApiMonitor
type APIMonitor struct {

	// Api step definition
	APIStepDefinition *APIStepDefinition `json:"ApiStepDefinition,omitempty"`

	// generate alert
	GenerateAlert bool `json:"GenerateAlert,omitempty"`

	// is active
	IsActive bool `json:"IsActive,omitempty"`

	// monitor Guid
	// Required: true
	MonitorGUID *string `json:"MonitorGuid"`

	// name
	Name string `json:"Name,omitempty"`

	// transaction step definition
	TransactionStepDefinition *TransactionStepDefinition `json:"TransactionStepDefinition,omitempty"`
}

// Validate validates this Api monitor
func (m *APIMonitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIStepDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStepDefinition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMonitor) validateAPIStepDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.APIStepDefinition) { // not required
		return nil
	}

	if m.APIStepDefinition != nil {
		if err := m.APIStepDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ApiStepDefinition")
			}
			return err
		}
	}

	return nil
}

func (m *APIMonitor) validateMonitorGUID(formats strfmt.Registry) error {

	if err := validate.Required("MonitorGuid", "body", m.MonitorGUID); err != nil {
		return err
	}

	return nil
}

func (m *APIMonitor) validateTransactionStepDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionStepDefinition) { // not required
		return nil
	}

	if m.TransactionStepDefinition != nil {
		if err := m.TransactionStepDefinition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransactionStepDefinition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMonitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMonitor) UnmarshalBinary(b []byte) error {
	var res APIMonitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
