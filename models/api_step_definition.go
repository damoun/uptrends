// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// APIStepDefinition Api step definition
// swagger:model ApiStepDefinition
type APIStepDefinition struct {

	// assertions
	Assertions []*APIAssertion `json:"Assertions"`

	// steps
	Steps []*APIHTTPStep `json:"Steps"`

	// variables
	Variables *APIVariableContainer `json:"Variables,omitempty"`
}

// Validate validates this Api step definition
func (m *APIStepDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssertions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIStepDefinition) validateAssertions(formats strfmt.Registry) error {

	if swag.IsZero(m.Assertions) { // not required
		return nil
	}

	for i := 0; i < len(m.Assertions); i++ {
		if swag.IsZero(m.Assertions[i]) { // not required
			continue
		}

		if m.Assertions[i] != nil {
			if err := m.Assertions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Assertions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIStepDefinition) validateSteps(formats strfmt.Registry) error {

	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIStepDefinition) validateVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.Variables) { // not required
		return nil
	}

	if m.Variables != nil {
		if err := m.Variables.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Variables")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIStepDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIStepDefinition) UnmarshalBinary(b []byte) error {
	var res APIStepDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
