// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssertionResultsInfo assertion results info
// swagger:model AssertionResultsInfo
type AssertionResultsInfo struct {

	// assertion infos
	AssertionInfos []*AssertionInfo `json:"AssertionInfos"`

	// passed assertions
	// Required: true
	PassedAssertions *int32 `json:"PassedAssertions"`

	// total assertions
	// Required: true
	TotalAssertions *int32 `json:"TotalAssertions"`
}

// Validate validates this assertion results info
func (m *AssertionResultsInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssertionInfos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassedAssertions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAssertions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssertionResultsInfo) validateAssertionInfos(formats strfmt.Registry) error {

	if swag.IsZero(m.AssertionInfos) { // not required
		return nil
	}

	for i := 0; i < len(m.AssertionInfos); i++ {
		if swag.IsZero(m.AssertionInfos[i]) { // not required
			continue
		}

		if m.AssertionInfos[i] != nil {
			if err := m.AssertionInfos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AssertionInfos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AssertionResultsInfo) validatePassedAssertions(formats strfmt.Registry) error {

	if err := validate.Required("PassedAssertions", "body", m.PassedAssertions); err != nil {
		return err
	}

	return nil
}

func (m *AssertionResultsInfo) validateTotalAssertions(formats strfmt.Registry) error {

	if err := validate.Required("TotalAssertions", "body", m.TotalAssertions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssertionResultsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssertionResultsInfo) UnmarshalBinary(b []byte) error {
	var res AssertionResultsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
