// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPEngineAttributes HttpEngineAttributes describes the attributes of a Multi-step Api monitor check
// swagger:model HttpEngineAttributes
type HTTPEngineAttributes struct {

	// Number of passed/succeed tests
	// Required: true
	PassedSteps *int32 `json:"PassedSteps"`

	// The results of the steps
	StepResults []*HTTPEngineStep `json:"StepResults"`

	// Timing info
	TimingInfo struct {
		StepTimingInfo
	} `json:"TimingInfo,omitempty"`

	// Number of total steps
	// Required: true
	TotalSteps *int32 `json:"TotalSteps"`
}

// Validate validates this Http engine attributes
func (m *HTTPEngineAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassedSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimingInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPEngineAttributes) validatePassedSteps(formats strfmt.Registry) error {

	if err := validate.Required("PassedSteps", "body", m.PassedSteps); err != nil {
		return err
	}

	return nil
}

func (m *HTTPEngineAttributes) validateStepResults(formats strfmt.Registry) error {

	if swag.IsZero(m.StepResults) { // not required
		return nil
	}

	for i := 0; i < len(m.StepResults); i++ {
		if swag.IsZero(m.StepResults[i]) { // not required
			continue
		}

		if m.StepResults[i] != nil {
			if err := m.StepResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StepResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPEngineAttributes) validateTimingInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TimingInfo) { // not required
		return nil
	}

	return nil
}

func (m *HTTPEngineAttributes) validateTotalSteps(formats strfmt.Registry) error {

	if err := validate.Required("TotalSteps", "body", m.TotalSteps); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPEngineAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPEngineAttributes) UnmarshalBinary(b []byte) error {
	var res HTTPEngineAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
