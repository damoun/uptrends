// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MonitorCheckResponse Response of the MonitorCheck endpoint
// swagger:model MonitorCheckResponse
type MonitorCheckResponse struct {
	ResponseBaseOfListOfMonitorCheck

	// Cursors can be used to navigate the dataset in a fixed manner
	Cursors struct {
		CursorsData
	} `json:"Cursors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *MonitorCheckResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ResponseBaseOfListOfMonitorCheck
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ResponseBaseOfListOfMonitorCheck = aO0

	// now for regular properties
	var propsMonitorCheckResponse struct {
		Cursors struct {
			CursorsData
		} `json:"Cursors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsMonitorCheckResponse); err != nil {
		return err
	}
	m.Cursors = propsMonitorCheckResponse.Cursors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m MonitorCheckResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ResponseBaseOfListOfMonitorCheck)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsMonitorCheckResponse struct {
		Cursors struct {
			CursorsData
		} `json:"Cursors,omitempty"`
	}
	propsMonitorCheckResponse.Cursors = m.Cursors

	jsonDataPropsMonitorCheckResponse, errMonitorCheckResponse := swag.WriteJSON(propsMonitorCheckResponse)
	if errMonitorCheckResponse != nil {
		return nil, errMonitorCheckResponse
	}
	_parts = append(_parts, jsonDataPropsMonitorCheckResponse)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this monitor check response
func (m *MonitorCheckResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ResponseBaseOfListOfMonitorCheck
	if err := m.ResponseBaseOfListOfMonitorCheck.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCursors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitorCheckResponse) validateCursors(formats strfmt.Registry) error {

	if swag.IsZero(m.Cursors) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitorCheckResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitorCheckResponse) UnmarshalBinary(b []byte) error {
	var res MonitorCheckResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
