// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Operator operator
// swagger:model Operator
type Operator struct {

	// allow native login
	AllowNativeLogin bool `json:"AllowNativeLogin,omitempty"`

	// allow single signon
	AllowSingleSignon bool `json:"AllowSingleSignon,omitempty"`

	// backup email
	BackupEmail string `json:"BackupEmail,omitempty"`

	// culture name
	CultureName string `json:"CultureName,omitempty"`

	// email
	Email string `json:"Email,omitempty"`

	// full name
	FullName string `json:"FullName,omitempty"`

	// is account administrator
	// Required: true
	IsAccountAdministrator *bool `json:"IsAccountAdministrator"`

	// is on duty
	// Required: true
	IsOnDuty *bool `json:"IsOnDuty"`

	// mobile phone
	MobilePhone string `json:"MobilePhone,omitempty"`

	// operator Guid
	// Required: true
	OperatorGUID *string `json:"OperatorGuid"`

	// outgoing phone number Id
	OutgoingPhoneNumberID int32 `json:"OutgoingPhoneNumberId,omitempty"`

	// password
	Password string `json:"Password,omitempty"`

	// sms provider
	// Required: true
	SmsProvider SmsProvider `json:"SmsProvider"`

	// time zone Id
	TimeZoneID int64 `json:"TimeZoneId,omitempty"`

	// use numeric sender
	UseNumericSender bool `json:"UseNumericSender,omitempty"`
}

// Validate validates this operator
func (m *Operator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsAccountAdministrator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsOnDuty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmsProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operator) validateIsAccountAdministrator(formats strfmt.Registry) error {

	if err := validate.Required("IsAccountAdministrator", "body", m.IsAccountAdministrator); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateIsOnDuty(formats strfmt.Registry) error {

	if err := validate.Required("IsOnDuty", "body", m.IsOnDuty); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateOperatorGUID(formats strfmt.Registry) error {

	if err := validate.Required("OperatorGuid", "body", m.OperatorGUID); err != nil {
		return err
	}

	return nil
}

func (m *Operator) validateSmsProvider(formats strfmt.Registry) error {

	if err := m.SmsProvider.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SmsProvider")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operator) UnmarshalBinary(b []byte) error {
	var res Operator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
