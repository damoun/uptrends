// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionStep Describes one step in a transaction
// swagger:model TransactionStep
type TransactionStep struct {

	// Text representation of the step element results
	Elements []string `json:"Elements"`

	// Did this step result in an error?
	// Required: true
	HasError *bool `json:"HasError"`

	// The name of the step
	StepName string `json:"StepName,omitempty"`

	// Step (index) number
	// Required: true
	StepNumber *int32 `json:"StepNumber"`

	// Number of milliseconds it took for this step to succeed
	// Required: true
	TotalTime *float64 `json:"TotalTime"`
}

// Validate validates this transaction step
func (m *TransactionStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHasError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionStep) validateHasError(formats strfmt.Registry) error {

	if err := validate.Required("HasError", "body", m.HasError); err != nil {
		return err
	}

	return nil
}

func (m *TransactionStep) validateStepNumber(formats strfmt.Registry) error {

	if err := validate.Required("StepNumber", "body", m.StepNumber); err != nil {
		return err
	}

	return nil
}

func (m *TransactionStep) validateTotalTime(formats strfmt.Registry) error {

	if err := validate.Required("TotalTime", "body", m.TotalTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionStep) UnmarshalBinary(b []byte) error {
	var res TransactionStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
