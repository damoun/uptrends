// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VaultItem vault item
// swagger:model VaultItem
type VaultItem struct {

	// certificate archive
	CertificateArchive *CertificateArchive `json:"CertificateArchive,omitempty"`

	// is sensitive
	// Required: true
	IsSensitive *bool `json:"IsSensitive"`

	// name
	Name string `json:"Name,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// password
	Password string `json:"Password,omitempty"`

	// user name
	UserName string `json:"UserName,omitempty"`

	// value
	Value string `json:"Value,omitempty"`

	// vault item Guid
	// Required: true
	VaultItemGUID *string `json:"VaultItemGuid"`

	// vault item type
	// Required: true
	VaultItemType VaultItemTypes `json:"VaultItemType"`

	// vault section Guid
	// Required: true
	VaultSectionGUID *string `json:"VaultSectionGuid"`
}

// Validate validates this vault item
func (m *VaultItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateArchive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSensitive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultItemGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultSectionGUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultItem) validateCertificateArchive(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateArchive) { // not required
		return nil
	}

	if m.CertificateArchive != nil {
		if err := m.CertificateArchive.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CertificateArchive")
			}
			return err
		}
	}

	return nil
}

func (m *VaultItem) validateIsSensitive(formats strfmt.Registry) error {

	if err := validate.Required("IsSensitive", "body", m.IsSensitive); err != nil {
		return err
	}

	return nil
}

func (m *VaultItem) validateVaultItemGUID(formats strfmt.Registry) error {

	if err := validate.Required("VaultItemGuid", "body", m.VaultItemGUID); err != nil {
		return err
	}

	return nil
}

func (m *VaultItem) validateVaultItemType(formats strfmt.Registry) error {

	if err := m.VaultItemType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("VaultItemType")
		}
		return err
	}

	return nil
}

func (m *VaultItem) validateVaultSectionGUID(formats strfmt.Registry) error {

	if err := validate.Required("VaultSectionGuid", "body", m.VaultSectionGUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VaultItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultItem) UnmarshalBinary(b []byte) error {
	var res VaultItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
