// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAlertGetMonitorAlertsParams creates a new AlertGetMonitorAlertsParams object
// with the default values initialized.
func NewAlertGetMonitorAlertsParams() *AlertGetMonitorAlertsParams {
	var (
		includeRemindersDefault = bool(false)
		presetPeriodDefault     = string("Last24Hours")
		sortingDefault          = string("Descending")
		takeDefault             = int32(100)
	)
	return &AlertGetMonitorAlertsParams{
		IncludeReminders: &includeRemindersDefault,
		PresetPeriod:     &presetPeriodDefault,
		Sorting:          &sortingDefault,
		Take:             &takeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewAlertGetMonitorAlertsParamsWithTimeout creates a new AlertGetMonitorAlertsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAlertGetMonitorAlertsParamsWithTimeout(timeout time.Duration) *AlertGetMonitorAlertsParams {
	var (
		includeRemindersDefault = bool(false)
		presetPeriodDefault     = string("Last24Hours")
		sortingDefault          = string("Descending")
		takeDefault             = int32(100)
	)
	return &AlertGetMonitorAlertsParams{
		IncludeReminders: &includeRemindersDefault,
		PresetPeriod:     &presetPeriodDefault,
		Sorting:          &sortingDefault,
		Take:             &takeDefault,

		timeout: timeout,
	}
}

// NewAlertGetMonitorAlertsParamsWithContext creates a new AlertGetMonitorAlertsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAlertGetMonitorAlertsParamsWithContext(ctx context.Context) *AlertGetMonitorAlertsParams {
	var (
		includeRemindersDefault = bool(false)
		presetPeriodDefault     = string("Last24Hours")
		sortingDefault          = string("Descending")
		takeDefault             = int32(100)
	)
	return &AlertGetMonitorAlertsParams{
		IncludeReminders: &includeRemindersDefault,
		PresetPeriod:     &presetPeriodDefault,
		Sorting:          &sortingDefault,
		Take:             &takeDefault,

		Context: ctx,
	}
}

// NewAlertGetMonitorAlertsParamsWithHTTPClient creates a new AlertGetMonitorAlertsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAlertGetMonitorAlertsParamsWithHTTPClient(client *http.Client) *AlertGetMonitorAlertsParams {
	var (
		includeRemindersDefault = bool(false)
		presetPeriodDefault     = string("Last24Hours")
		sortingDefault          = string("Descending")
		takeDefault             = int32(100)
	)
	return &AlertGetMonitorAlertsParams{
		IncludeReminders: &includeRemindersDefault,
		PresetPeriod:     &presetPeriodDefault,
		Sorting:          &sortingDefault,
		Take:             &takeDefault,
		HTTPClient:       client,
	}
}

/*AlertGetMonitorAlertsParams contains all the parameters to send to the API endpoint
for the alert get monitor alerts operation typically these are written to a http.Request
*/
type AlertGetMonitorAlertsParams struct {

	/*Cursor
	  A cursor value that should be used for traversing the dataset.

	*/
	Cursor *string
	/*End
	  The end of a custom period

	*/
	End *strfmt.DateTime
	/*IncludeReminders
	  When true reminder alerts will be included in the results

	*/
	IncludeReminders *bool
	/*PresetPeriod
	  The requested time period.

	*/
	PresetPeriod *string
	/*Sorting
	  Sorting direction based on timestamp.

	*/
	Sorting *string
	/*Start
	  The start of a custom period (can't be used together with the PresetPeriod parameter)

	*/
	Start *strfmt.DateTime
	/*Take
	  The number of records to return (Max value = 100)

	*/
	Take *int32
	/*MonitorGUID
	  The Guid of the monitor to get alerts for.

	*/
	MonitorGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithTimeout(timeout time.Duration) *AlertGetMonitorAlertsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithContext(ctx context.Context) *AlertGetMonitorAlertsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithHTTPClient(client *http.Client) *AlertGetMonitorAlertsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithCursor(cursor *string) *AlertGetMonitorAlertsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithEnd adds the end to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithEnd(end *strfmt.DateTime) *AlertGetMonitorAlertsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithIncludeReminders adds the includeReminders to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithIncludeReminders(includeReminders *bool) *AlertGetMonitorAlertsParams {
	o.SetIncludeReminders(includeReminders)
	return o
}

// SetIncludeReminders adds the includeReminders to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetIncludeReminders(includeReminders *bool) {
	o.IncludeReminders = includeReminders
}

// WithPresetPeriod adds the presetPeriod to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithPresetPeriod(presetPeriod *string) *AlertGetMonitorAlertsParams {
	o.SetPresetPeriod(presetPeriod)
	return o
}

// SetPresetPeriod adds the presetPeriod to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetPresetPeriod(presetPeriod *string) {
	o.PresetPeriod = presetPeriod
}

// WithSorting adds the sorting to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithSorting(sorting *string) *AlertGetMonitorAlertsParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithStart adds the start to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithStart(start *strfmt.DateTime) *AlertGetMonitorAlertsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetStart(start *strfmt.DateTime) {
	o.Start = start
}

// WithTake adds the take to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithTake(take *int32) *AlertGetMonitorAlertsParams {
	o.SetTake(take)
	return o
}

// SetTake adds the take to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetTake(take *int32) {
	o.Take = take
}

// WithMonitorGUID adds the monitorGUID to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) WithMonitorGUID(monitorGUID string) *AlertGetMonitorAlertsParams {
	o.SetMonitorGUID(monitorGUID)
	return o
}

// SetMonitorGUID adds the monitorGuid to the alert get monitor alerts params
func (o *AlertGetMonitorAlertsParams) SetMonitorGUID(monitorGUID string) {
	o.MonitorGUID = monitorGUID
}

// WriteToRequest writes these params to a swagger request
func (o *AlertGetMonitorAlertsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param Cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("Cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.End != nil {

		// query param End
		var qrEnd strfmt.DateTime
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {
			if err := r.SetQueryParam("End", qEnd); err != nil {
				return err
			}
		}

	}

	if o.IncludeReminders != nil {

		// query param IncludeReminders
		var qrIncludeReminders bool
		if o.IncludeReminders != nil {
			qrIncludeReminders = *o.IncludeReminders
		}
		qIncludeReminders := swag.FormatBool(qrIncludeReminders)
		if qIncludeReminders != "" {
			if err := r.SetQueryParam("IncludeReminders", qIncludeReminders); err != nil {
				return err
			}
		}

	}

	if o.PresetPeriod != nil {

		// query param PresetPeriod
		var qrPresetPeriod string
		if o.PresetPeriod != nil {
			qrPresetPeriod = *o.PresetPeriod
		}
		qPresetPeriod := qrPresetPeriod
		if qPresetPeriod != "" {
			if err := r.SetQueryParam("PresetPeriod", qPresetPeriod); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param Sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("Sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param Start
		var qrStart strfmt.DateTime
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart.String()
		if qStart != "" {
			if err := r.SetQueryParam("Start", qStart); err != nil {
				return err
			}
		}

	}

	if o.Take != nil {

		// query param Take
		var qrTake int32
		if o.Take != nil {
			qrTake = *o.Take
		}
		qTake := swag.FormatInt32(qrTake)
		if qTake != "" {
			if err := r.SetQueryParam("Take", qTake); err != nil {
				return err
			}
		}

	}

	// path param monitorGuid
	if err := r.SetPathParam("monitorGuid", o.MonitorGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
