// Code generated by go-swagger; DO NOT EDIT.

package alert_definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new alert definition API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alert definition API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AlertDefinitionAddIntegrationToEscalationLevel(params *AlertDefinitionAddIntegrationToEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddIntegrationToEscalationLevelCreated, error)

	AlertDefinitionAddMonitorGroupToAlertDefinition(params *AlertDefinitionAddMonitorGroupToAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddMonitorGroupToAlertDefinitionCreated, error)

	AlertDefinitionAddMonitorToAlertDefinition(params *AlertDefinitionAddMonitorToAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddMonitorToAlertDefinitionCreated, error)

	AlertDefinitionAddOperatorGroupToEscalationLevel(params *AlertDefinitionAddOperatorGroupToEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddOperatorGroupToEscalationLevelCreated, error)

	AlertDefinitionAddOperatorToEscalationLevel(params *AlertDefinitionAddOperatorToEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddOperatorToEscalationLevelCreated, error)

	AlertDefinitionCreateAlertDefinition(params *AlertDefinitionCreateAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionCreateAlertDefinitionCreated, error)

	AlertDefinitionDeleteAlertDefinition(params *AlertDefinitionDeleteAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionDeleteAlertDefinitionNoContent, error)

	AlertDefinitionGetAllAlertDefinitions(params *AlertDefinitionGetAllAlertDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllAlertDefinitionsOK, error)

	AlertDefinitionGetAllEscalationLevelIntegrations(params *AlertDefinitionGetAllEscalationLevelIntegrationsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllEscalationLevelIntegrationsOK, error)

	AlertDefinitionGetAllEscalationLevels(params *AlertDefinitionGetAllEscalationLevelsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllEscalationLevelsOK, error)

	AlertDefinitionGetAllMembers(params *AlertDefinitionGetAllMembersParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllMembersOK, error)

	AlertDefinitionGetEscalationLevel(params *AlertDefinitionGetEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetEscalationLevelOK, error)

	AlertDefinitionGetEscalationLevelIntegration(params *AlertDefinitionGetEscalationLevelIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetEscalationLevelIntegrationOK, error)

	AlertDefinitionGetEscalationLevelOperator(params *AlertDefinitionGetEscalationLevelOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetEscalationLevelOperatorOK, error)

	AlertDefinitionGetSpecifiedAlertDefinitions(params *AlertDefinitionGetSpecifiedAlertDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetSpecifiedAlertDefinitionsOK, error)

	AlertDefinitionPatchAlertDefinition(params *AlertDefinitionPatchAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPatchAlertDefinitionNoContent, error)

	AlertDefinitionPatchAlertDefinitionEscalation(params *AlertDefinitionPatchAlertDefinitionEscalationParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPatchAlertDefinitionEscalationNoContent, error)

	AlertDefinitionPutAlertDefinition(params *AlertDefinitionPutAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPutAlertDefinitionNoContent, error)

	AlertDefinitionPutAlertDefinitionEscalation(params *AlertDefinitionPutAlertDefinitionEscalationParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPutAlertDefinitionEscalationNoContent, error)

	AlertDefinitionRemoveIntegrationFromEscalationLevel(params *AlertDefinitionRemoveIntegrationFromEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveIntegrationFromEscalationLevelNoContent, error)

	AlertDefinitionRemoveMonitorFromAlertDefinition(params *AlertDefinitionRemoveMonitorFromAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveMonitorFromAlertDefinitionNoContent, error)

	AlertDefinitionRemoveMonitorGroupFromAlertDefinition(params *AlertDefinitionRemoveMonitorGroupFromAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveMonitorGroupFromAlertDefinitionNoContent, error)

	AlertDefinitionRemoveOperatorFromEscalationLevel(params *AlertDefinitionRemoveOperatorFromEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveOperatorFromEscalationLevelNoContent, error)

	AlertDefinitionRemoveOperatorGroupFromEscalationLevel(params *AlertDefinitionRemoveOperatorGroupFromEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveOperatorGroupFromEscalationLevelNoContent, error)

	AlertDefinitionUpdateIntegrationForEscalationWithPatch(params *AlertDefinitionUpdateIntegrationForEscalationWithPatchParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionUpdateIntegrationForEscalationWithPatchNoContent, error)

	AlertDefinitionUpdateIntegrationForEscalationWithPut(params *AlertDefinitionUpdateIntegrationForEscalationWithPutParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionUpdateIntegrationForEscalationWithPutNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AlertDefinitionAddIntegrationToEscalationLevel adds an integration to a specified escalation level
*/
func (a *Client) AlertDefinitionAddIntegrationToEscalationLevel(params *AlertDefinitionAddIntegrationToEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddIntegrationToEscalationLevelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionAddIntegrationToEscalationLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_AddIntegrationToEscalationLevel",
		Method:             "POST",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionAddIntegrationToEscalationLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionAddIntegrationToEscalationLevelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_AddIntegrationToEscalationLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionAddMonitorGroupToAlertDefinition adds a monitor group to the specified alert definition
*/
func (a *Client) AlertDefinitionAddMonitorGroupToAlertDefinition(params *AlertDefinitionAddMonitorGroupToAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddMonitorGroupToAlertDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionAddMonitorGroupToAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_AddMonitorGroupToAlertDefinition",
		Method:             "POST",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/Members/MonitorGroup/{monitorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionAddMonitorGroupToAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionAddMonitorGroupToAlertDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_AddMonitorGroupToAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionAddMonitorToAlertDefinition adds a monitor to the specified alert definition
*/
func (a *Client) AlertDefinitionAddMonitorToAlertDefinition(params *AlertDefinitionAddMonitorToAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddMonitorToAlertDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionAddMonitorToAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_AddMonitorToAlertDefinition",
		Method:             "POST",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/Members/Monitor/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionAddMonitorToAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionAddMonitorToAlertDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_AddMonitorToAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionAddOperatorGroupToEscalationLevel adds an operator group to the specified escalation level
*/
func (a *Client) AlertDefinitionAddOperatorGroupToEscalationLevel(params *AlertDefinitionAddOperatorGroupToEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddOperatorGroupToEscalationLevelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionAddOperatorGroupToEscalationLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_AddOperatorGroupToEscalationLevel",
		Method:             "POST",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionAddOperatorGroupToEscalationLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionAddOperatorGroupToEscalationLevelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_AddOperatorGroupToEscalationLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionAddOperatorToEscalationLevel adds an operator to the specified escalation level
*/
func (a *Client) AlertDefinitionAddOperatorToEscalationLevel(params *AlertDefinitionAddOperatorToEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionAddOperatorToEscalationLevelCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionAddOperatorToEscalationLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_AddOperatorToEscalationLevel",
		Method:             "POST",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/Operator/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionAddOperatorToEscalationLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionAddOperatorToEscalationLevelCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_AddOperatorToEscalationLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionCreateAlertDefinition creates a new alert definition
*/
func (a *Client) AlertDefinitionCreateAlertDefinition(params *AlertDefinitionCreateAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionCreateAlertDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionCreateAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_CreateAlertDefinition",
		Method:             "POST",
		PathPattern:        "/AlertDefinition",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionCreateAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionCreateAlertDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_CreateAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionDeleteAlertDefinition deletes an existing alert definition
*/
func (a *Client) AlertDefinitionDeleteAlertDefinition(params *AlertDefinitionDeleteAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionDeleteAlertDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionDeleteAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_DeleteAlertDefinition",
		Method:             "DELETE",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionDeleteAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionDeleteAlertDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_DeleteAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetAllAlertDefinitions gets a list of all alert definitions
*/
func (a *Client) AlertDefinitionGetAllAlertDefinitions(params *AlertDefinitionGetAllAlertDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllAlertDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetAllAlertDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetAllAlertDefinitions",
		Method:             "GET",
		PathPattern:        "/AlertDefinition",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetAllAlertDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetAllAlertDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetAllAlertDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetAllEscalationLevelIntegrations gets all integrations for a specified escalation level
*/
func (a *Client) AlertDefinitionGetAllEscalationLevelIntegrations(params *AlertDefinitionGetAllEscalationLevelIntegrationsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllEscalationLevelIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetAllEscalationLevelIntegrationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetAllEscalationLevelIntegrations",
		Method:             "GET",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetAllEscalationLevelIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetAllEscalationLevelIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetAllEscalationLevelIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetAllEscalationLevels gets all escalation level information for the specified alert definition
*/
func (a *Client) AlertDefinitionGetAllEscalationLevels(params *AlertDefinitionGetAllEscalationLevelsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllEscalationLevelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetAllEscalationLevelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetAllEscalationLevels",
		Method:             "GET",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetAllEscalationLevelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetAllEscalationLevelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetAllEscalationLevels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetAllMembers gets a list of all monitor and monitor group guids for the specified alert definition
*/
func (a *Client) AlertDefinitionGetAllMembers(params *AlertDefinitionGetAllMembersParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetAllMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetAllMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetAllMembers",
		Method:             "GET",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/Members",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetAllMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetAllMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetAllMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetEscalationLevel gets the escalation level information of the specified alert definition
*/
func (a *Client) AlertDefinitionGetEscalationLevel(params *AlertDefinitionGetEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetEscalationLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetEscalationLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetEscalationLevel",
		Method:             "GET",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetEscalationLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetEscalationLevelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetEscalationLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetEscalationLevelIntegration gets a single integration for a specified escalation level
*/
func (a *Client) AlertDefinitionGetEscalationLevelIntegration(params *AlertDefinitionGetEscalationLevelIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetEscalationLevelIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetEscalationLevelIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetEscalationLevelIntegration",
		Method:             "GET",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetEscalationLevelIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetEscalationLevelIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetEscalationLevelIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetEscalationLevelOperator gets the operator and operator group guids for the specified escalation level
*/
func (a *Client) AlertDefinitionGetEscalationLevelOperator(params *AlertDefinitionGetEscalationLevelOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetEscalationLevelOperatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetEscalationLevelOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetEscalationLevelOperator",
		Method:             "GET",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetEscalationLevelOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetEscalationLevelOperatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetEscalationLevelOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionGetSpecifiedAlertDefinitions gets the specified alert definition
*/
func (a *Client) AlertDefinitionGetSpecifiedAlertDefinitions(params *AlertDefinitionGetSpecifiedAlertDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionGetSpecifiedAlertDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionGetSpecifiedAlertDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_GetSpecifiedAlertDefinitions",
		Method:             "GET",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionGetSpecifiedAlertDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionGetSpecifiedAlertDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_GetSpecifiedAlertDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionPatchAlertDefinition partiallies updates the definition for the specified alert definition

  This methods accepts parts of an alert definition. Fields that do not require changes can be omitted.
*/
func (a *Client) AlertDefinitionPatchAlertDefinition(params *AlertDefinitionPatchAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPatchAlertDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionPatchAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_PatchAlertDefinition",
		Method:             "PATCH",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionPatchAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionPatchAlertDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_PatchAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionPatchAlertDefinitionEscalation partiallies updates the escalation level for the specified alert definition

  This methods only accepts a complete alert definition where all fields are specified.
*/
func (a *Client) AlertDefinitionPatchAlertDefinitionEscalation(params *AlertDefinitionPatchAlertDefinitionEscalationParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPatchAlertDefinitionEscalationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionPatchAlertDefinitionEscalationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_PatchAlertDefinitionEscalation",
		Method:             "PATCH",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionPatchAlertDefinitionEscalationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionPatchAlertDefinitionEscalationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_PatchAlertDefinitionEscalation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionPutAlertDefinition updates the definition for the specified alert definition

  This methods only accepts a complete alert definition where all fields are specified.
*/
func (a *Client) AlertDefinitionPutAlertDefinition(params *AlertDefinitionPutAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPutAlertDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionPutAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_PutAlertDefinition",
		Method:             "PUT",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionPutAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionPutAlertDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_PutAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionPutAlertDefinitionEscalation updates the escalation level for the specified alert definition

  This methods only accepts a complete alert definition where all fields are specified.
*/
func (a *Client) AlertDefinitionPutAlertDefinitionEscalation(params *AlertDefinitionPutAlertDefinitionEscalationParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionPutAlertDefinitionEscalationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionPutAlertDefinitionEscalationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_PutAlertDefinitionEscalation",
		Method:             "PUT",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionPutAlertDefinitionEscalationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionPutAlertDefinitionEscalationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_PutAlertDefinitionEscalation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionRemoveIntegrationFromEscalationLevel removes an integration from a specified escalation level
*/
func (a *Client) AlertDefinitionRemoveIntegrationFromEscalationLevel(params *AlertDefinitionRemoveIntegrationFromEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveIntegrationFromEscalationLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionRemoveIntegrationFromEscalationLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_RemoveIntegrationFromEscalationLevel",
		Method:             "DELETE",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionRemoveIntegrationFromEscalationLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionRemoveIntegrationFromEscalationLevelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_RemoveIntegrationFromEscalationLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionRemoveMonitorFromAlertDefinition removes a monitor for the specified alert definition
*/
func (a *Client) AlertDefinitionRemoveMonitorFromAlertDefinition(params *AlertDefinitionRemoveMonitorFromAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveMonitorFromAlertDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionRemoveMonitorFromAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_RemoveMonitorFromAlertDefinition",
		Method:             "DELETE",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/Members/Monitor/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionRemoveMonitorFromAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionRemoveMonitorFromAlertDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_RemoveMonitorFromAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionRemoveMonitorGroupFromAlertDefinition removes a monitor group for the specified alert definition
*/
func (a *Client) AlertDefinitionRemoveMonitorGroupFromAlertDefinition(params *AlertDefinitionRemoveMonitorGroupFromAlertDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveMonitorGroupFromAlertDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionRemoveMonitorGroupFromAlertDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_RemoveMonitorGroupFromAlertDefinition",
		Method:             "DELETE",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/Members/MonitorGroup/{monitorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionRemoveMonitorGroupFromAlertDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionRemoveMonitorGroupFromAlertDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_RemoveMonitorGroupFromAlertDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionRemoveOperatorFromEscalationLevel removes an operator for the specified escalation level
*/
func (a *Client) AlertDefinitionRemoveOperatorFromEscalationLevel(params *AlertDefinitionRemoveOperatorFromEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveOperatorFromEscalationLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionRemoveOperatorFromEscalationLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_RemoveOperatorFromEscalationLevel",
		Method:             "DELETE",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/Operator/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionRemoveOperatorFromEscalationLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionRemoveOperatorFromEscalationLevelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_RemoveOperatorFromEscalationLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionRemoveOperatorGroupFromEscalationLevel removes an operator group for the specified escalation level
*/
func (a *Client) AlertDefinitionRemoveOperatorGroupFromEscalationLevel(params *AlertDefinitionRemoveOperatorGroupFromEscalationLevelParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionRemoveOperatorGroupFromEscalationLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionRemoveOperatorGroupFromEscalationLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_RemoveOperatorGroupFromEscalationLevel",
		Method:             "DELETE",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Members/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionRemoveOperatorGroupFromEscalationLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionRemoveOperatorGroupFromEscalationLevelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_RemoveOperatorGroupFromEscalationLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionUpdateIntegrationForEscalationWithPatch partiallies updates an integration for a specified escalation level
*/
func (a *Client) AlertDefinitionUpdateIntegrationForEscalationWithPatch(params *AlertDefinitionUpdateIntegrationForEscalationWithPatchParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionUpdateIntegrationForEscalationWithPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionUpdateIntegrationForEscalationWithPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_UpdateIntegrationForEscalationWithPatch",
		Method:             "PATCH",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionUpdateIntegrationForEscalationWithPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionUpdateIntegrationForEscalationWithPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_UpdateIntegrationForEscalationWithPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AlertDefinitionUpdateIntegrationForEscalationWithPut updates an integration for a specified escalation level
*/
func (a *Client) AlertDefinitionUpdateIntegrationForEscalationWithPut(params *AlertDefinitionUpdateIntegrationForEscalationWithPutParams, authInfo runtime.ClientAuthInfoWriter) (*AlertDefinitionUpdateIntegrationForEscalationWithPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlertDefinitionUpdateIntegrationForEscalationWithPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AlertDefinition_UpdateIntegrationForEscalationWithPut",
		Method:             "PUT",
		PathPattern:        "/AlertDefinition/{alertDefinitionGuid}/EscalationLevel/{escalationLevelId}/Integration/{integrationGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AlertDefinitionUpdateIntegrationForEscalationWithPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlertDefinitionUpdateIntegrationForEscalationWithPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AlertDefinition_UpdateIntegrationForEscalationWithPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
