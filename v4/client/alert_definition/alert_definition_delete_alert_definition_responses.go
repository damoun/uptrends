// Code generated by go-swagger; DO NOT EDIT.

package alert_definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// AlertDefinitionDeleteAlertDefinitionReader is a Reader for the AlertDefinitionDeleteAlertDefinition structure.
type AlertDefinitionDeleteAlertDefinitionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AlertDefinitionDeleteAlertDefinitionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAlertDefinitionDeleteAlertDefinitionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAlertDefinitionDeleteAlertDefinitionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAlertDefinitionDeleteAlertDefinitionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAlertDefinitionDeleteAlertDefinitionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAlertDefinitionDeleteAlertDefinitionNoContent creates a AlertDefinitionDeleteAlertDefinitionNoContent with default headers values
func NewAlertDefinitionDeleteAlertDefinitionNoContent() *AlertDefinitionDeleteAlertDefinitionNoContent {
	return &AlertDefinitionDeleteAlertDefinitionNoContent{}
}

/*AlertDefinitionDeleteAlertDefinitionNoContent handles this case with default header values.

The request completed successfully. No content is returned.
*/
type AlertDefinitionDeleteAlertDefinitionNoContent struct {
}

func (o *AlertDefinitionDeleteAlertDefinitionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /AlertDefinition/{alertDefinitionGuid}][%d] alertDefinitionDeleteAlertDefinitionNoContent ", 204)
}

func (o *AlertDefinitionDeleteAlertDefinitionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAlertDefinitionDeleteAlertDefinitionBadRequest creates a AlertDefinitionDeleteAlertDefinitionBadRequest with default headers values
func NewAlertDefinitionDeleteAlertDefinitionBadRequest() *AlertDefinitionDeleteAlertDefinitionBadRequest {
	return &AlertDefinitionDeleteAlertDefinitionBadRequest{}
}

/*AlertDefinitionDeleteAlertDefinitionBadRequest handles this case with default header values.

The request failed.
*/
type AlertDefinitionDeleteAlertDefinitionBadRequest struct {
	Payload *models.MessageList
}

func (o *AlertDefinitionDeleteAlertDefinitionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /AlertDefinition/{alertDefinitionGuid}][%d] alertDefinitionDeleteAlertDefinitionBadRequest  %+v", 400, o.Payload)
}

func (o *AlertDefinitionDeleteAlertDefinitionBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *AlertDefinitionDeleteAlertDefinitionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAlertDefinitionDeleteAlertDefinitionForbidden creates a AlertDefinitionDeleteAlertDefinitionForbidden with default headers values
func NewAlertDefinitionDeleteAlertDefinitionForbidden() *AlertDefinitionDeleteAlertDefinitionForbidden {
	return &AlertDefinitionDeleteAlertDefinitionForbidden{}
}

/*AlertDefinitionDeleteAlertDefinitionForbidden handles this case with default header values.

One or more validation errors occurred.
*/
type AlertDefinitionDeleteAlertDefinitionForbidden struct {
	Payload *models.MessageList
}

func (o *AlertDefinitionDeleteAlertDefinitionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /AlertDefinition/{alertDefinitionGuid}][%d] alertDefinitionDeleteAlertDefinitionForbidden  %+v", 403, o.Payload)
}

func (o *AlertDefinitionDeleteAlertDefinitionForbidden) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *AlertDefinitionDeleteAlertDefinitionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAlertDefinitionDeleteAlertDefinitionNotFound creates a AlertDefinitionDeleteAlertDefinitionNotFound with default headers values
func NewAlertDefinitionDeleteAlertDefinitionNotFound() *AlertDefinitionDeleteAlertDefinitionNotFound {
	return &AlertDefinitionDeleteAlertDefinitionNotFound{}
}

/*AlertDefinitionDeleteAlertDefinitionNotFound handles this case with default header values.

The specified alert definition could not be found.
*/
type AlertDefinitionDeleteAlertDefinitionNotFound struct {
	Payload *models.MessageList
}

func (o *AlertDefinitionDeleteAlertDefinitionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /AlertDefinition/{alertDefinitionGuid}][%d] alertDefinitionDeleteAlertDefinitionNotFound  %+v", 404, o.Payload)
}

func (o *AlertDefinitionDeleteAlertDefinitionNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *AlertDefinitionDeleteAlertDefinitionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
