// Code generated by go-swagger; DO NOT EDIT.

package checkpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new checkpoint API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for checkpoint API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CheckpointServerGetAllServerIpv4s anonymous call returns all the IPv4 addresses of all the checkpoint servers
*/
func (a *Client) CheckpointServerGetAllServerIpv4s(params *CheckpointServerGetAllServerIpv4sParams) (*CheckpointServerGetAllServerIpv4sOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointServerGetAllServerIpv4sParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointServer_GetAllServerIpv4s",
		Method:             "GET",
		PathPattern:        "/Checkpoint/Server/Ipv4",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointServerGetAllServerIpv4sReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointServerGetAllServerIpv4sOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointServer_GetAllServerIpv4s: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckpointServerGetAllServerIpv6s anonymous call returns all the IPv6 addresses of all the checkpoint servers
*/
func (a *Client) CheckpointServerGetAllServerIpv6s(params *CheckpointServerGetAllServerIpv6sParams) (*CheckpointServerGetAllServerIpv6sOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointServerGetAllServerIpv6sParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointServer_GetAllServerIpv6s",
		Method:             "GET",
		PathPattern:        "/Checkpoint/Server/Ipv6",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointServerGetAllServerIpv6sReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointServerGetAllServerIpv6sOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointServer_GetAllServerIpv6s: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckpointServerGetServer returns the specified checkpoint server
*/
func (a *Client) CheckpointServerGetServer(params *CheckpointServerGetServerParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointServerGetServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointServerGetServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointServer_GetServer",
		Method:             "GET",
		PathPattern:        "/Checkpoint/Server/{serverId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointServerGetServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointServerGetServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointServer_GetServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckpointGetAllCheckpoints returns all the checkpoints
*/
func (a *Client) CheckpointGetAllCheckpoints(params *CheckpointGetAllCheckpointsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointGetAllCheckpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointGetAllCheckpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Checkpoint_GetAllCheckpoints",
		Method:             "GET",
		PathPattern:        "/Checkpoint",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointGetAllCheckpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointGetAllCheckpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checkpoint_GetAllCheckpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckpointGetCheckpoint returns the specified checkpoint
*/
func (a *Client) CheckpointGetCheckpoint(params *CheckpointGetCheckpointParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointGetCheckpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointGetCheckpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Checkpoint_GetCheckpoint",
		Method:             "GET",
		PathPattern:        "/Checkpoint/{checkpointId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointGetCheckpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointGetCheckpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checkpoint_GetCheckpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
