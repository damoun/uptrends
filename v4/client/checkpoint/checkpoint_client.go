// Code generated by go-swagger; DO NOT EDIT.

package checkpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new checkpoint API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for checkpoint API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CheckpointRegionGetAllCheckpointRegions(params *CheckpointRegionGetAllCheckpointRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointRegionGetAllCheckpointRegionsOK, error)

	CheckpointRegionGetCheckpointRegionCheckpoints(params *CheckpointRegionGetCheckpointRegionCheckpointsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointRegionGetCheckpointRegionCheckpointsOK, error)

	CheckpointRegionGetSpecifiedCheckpointRegion(params *CheckpointRegionGetSpecifiedCheckpointRegionParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointRegionGetSpecifiedCheckpointRegionOK, error)

	CheckpointServerGetAllServerIPV4Addresses(params *CheckpointServerGetAllServerIPV4AddressesParams) (*CheckpointServerGetAllServerIPV4AddressesOK, error)

	CheckpointServerGetAllServerIPV6Addresses(params *CheckpointServerGetAllServerIPV6AddressesParams) (*CheckpointServerGetAllServerIPV6AddressesOK, error)

	CheckpointServerGetServer(params *CheckpointServerGetServerParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointServerGetServerOK, error)

	CheckpointGetAllCheckpoints(params *CheckpointGetAllCheckpointsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointGetAllCheckpointsOK, error)

	CheckpointGetCheckpoint(params *CheckpointGetCheckpointParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointGetCheckpointOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckpointRegionGetAllCheckpointRegions returns all the checkpoint regions
*/
func (a *Client) CheckpointRegionGetAllCheckpointRegions(params *CheckpointRegionGetAllCheckpointRegionsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointRegionGetAllCheckpointRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointRegionGetAllCheckpointRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointRegion_GetAllCheckpointRegions",
		Method:             "GET",
		PathPattern:        "/CheckpointRegion",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointRegionGetAllCheckpointRegionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointRegionGetAllCheckpointRegionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointRegion_GetAllCheckpointRegions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckpointRegionGetCheckpointRegionCheckpoints returns the checkpoints for the specified checkpoint region
*/
func (a *Client) CheckpointRegionGetCheckpointRegionCheckpoints(params *CheckpointRegionGetCheckpointRegionCheckpointsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointRegionGetCheckpointRegionCheckpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointRegionGetCheckpointRegionCheckpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointRegion_GetCheckpointRegionCheckpoints",
		Method:             "GET",
		PathPattern:        "/CheckpointRegion/{checkpointRegionId}/Checkpoint",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointRegionGetCheckpointRegionCheckpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointRegionGetCheckpointRegionCheckpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointRegion_GetCheckpointRegionCheckpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckpointRegionGetSpecifiedCheckpointRegion returns the specified checkpoint region
*/
func (a *Client) CheckpointRegionGetSpecifiedCheckpointRegion(params *CheckpointRegionGetSpecifiedCheckpointRegionParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointRegionGetSpecifiedCheckpointRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointRegionGetSpecifiedCheckpointRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointRegion_GetSpecifiedCheckpointRegion",
		Method:             "GET",
		PathPattern:        "/CheckpointRegion/{checkpointRegionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointRegionGetSpecifiedCheckpointRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointRegionGetSpecifiedCheckpointRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointRegion_GetSpecifiedCheckpointRegion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckpointServerGetAllServerIPV4Addresses anonymous call that returns all the IPv4 addresses of all the checkpoint servers
*/
func (a *Client) CheckpointServerGetAllServerIPV4Addresses(params *CheckpointServerGetAllServerIPV4AddressesParams) (*CheckpointServerGetAllServerIPV4AddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointServerGetAllServerIPV4AddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointServer_GetAllServerIpv4Addresses",
		Method:             "GET",
		PathPattern:        "/Checkpoint/Server/Ipv4",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointServerGetAllServerIPV4AddressesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointServerGetAllServerIPV4AddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointServer_GetAllServerIpv4Addresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckpointServerGetAllServerIPV6Addresses anonymous call that returns all the IPv6 addresses of all the checkpoint servers
*/
func (a *Client) CheckpointServerGetAllServerIPV6Addresses(params *CheckpointServerGetAllServerIPV6AddressesParams) (*CheckpointServerGetAllServerIPV6AddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointServerGetAllServerIPV6AddressesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointServer_GetAllServerIpv6Addresses",
		Method:             "GET",
		PathPattern:        "/Checkpoint/Server/Ipv6",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointServerGetAllServerIPV6AddressesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointServerGetAllServerIPV6AddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointServer_GetAllServerIpv6Addresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckpointServerGetServer returns the requested checkpoint server
*/
func (a *Client) CheckpointServerGetServer(params *CheckpointServerGetServerParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointServerGetServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointServerGetServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CheckpointServer_GetServer",
		Method:             "GET",
		PathPattern:        "/Checkpoint/Server/{serverId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointServerGetServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointServerGetServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckpointServer_GetServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckpointGetAllCheckpoints returns all the checkpoints
*/
func (a *Client) CheckpointGetAllCheckpoints(params *CheckpointGetAllCheckpointsParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointGetAllCheckpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointGetAllCheckpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Checkpoint_GetAllCheckpoints",
		Method:             "GET",
		PathPattern:        "/Checkpoint",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointGetAllCheckpointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointGetAllCheckpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checkpoint_GetAllCheckpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckpointGetCheckpoint returns the specified checkpoint
*/
func (a *Client) CheckpointGetCheckpoint(params *CheckpointGetCheckpointParams, authInfo runtime.ClientAuthInfoWriter) (*CheckpointGetCheckpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckpointGetCheckpointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Checkpoint_GetCheckpoint",
		Method:             "GET",
		PathPattern:        "/Checkpoint/{checkpointId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckpointGetCheckpointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckpointGetCheckpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Checkpoint_GetCheckpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
