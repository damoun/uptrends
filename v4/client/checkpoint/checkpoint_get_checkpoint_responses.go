// Code generated by go-swagger; DO NOT EDIT.

package checkpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// CheckpointGetCheckpointReader is a Reader for the CheckpointGetCheckpoint structure.
type CheckpointGetCheckpointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckpointGetCheckpointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckpointGetCheckpointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckpointGetCheckpointBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckpointGetCheckpointNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckpointGetCheckpointOK creates a CheckpointGetCheckpointOK with default headers values
func NewCheckpointGetCheckpointOK() *CheckpointGetCheckpointOK {
	return &CheckpointGetCheckpointOK{}
}

/*CheckpointGetCheckpointOK handles this case with default header values.

The request completed successfully.
*/
type CheckpointGetCheckpointOK struct {
	Payload *models.CheckpointResponse
}

func (o *CheckpointGetCheckpointOK) Error() string {
	return fmt.Sprintf("[GET /Checkpoint/{checkpointId}][%d] checkpointGetCheckpointOK  %+v", 200, o.Payload)
}

func (o *CheckpointGetCheckpointOK) GetPayload() *models.CheckpointResponse {
	return o.Payload
}

func (o *CheckpointGetCheckpointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CheckpointResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckpointGetCheckpointBadRequest creates a CheckpointGetCheckpointBadRequest with default headers values
func NewCheckpointGetCheckpointBadRequest() *CheckpointGetCheckpointBadRequest {
	return &CheckpointGetCheckpointBadRequest{}
}

/*CheckpointGetCheckpointBadRequest handles this case with default header values.

The request failed.
*/
type CheckpointGetCheckpointBadRequest struct {
	Payload *models.MessageList
}

func (o *CheckpointGetCheckpointBadRequest) Error() string {
	return fmt.Sprintf("[GET /Checkpoint/{checkpointId}][%d] checkpointGetCheckpointBadRequest  %+v", 400, o.Payload)
}

func (o *CheckpointGetCheckpointBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *CheckpointGetCheckpointBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckpointGetCheckpointNotFound creates a CheckpointGetCheckpointNotFound with default headers values
func NewCheckpointGetCheckpointNotFound() *CheckpointGetCheckpointNotFound {
	return &CheckpointGetCheckpointNotFound{}
}

/*CheckpointGetCheckpointNotFound handles this case with default header values.

The specified checkpoint doesn't exist.
*/
type CheckpointGetCheckpointNotFound struct {
	Payload *models.MessageList
}

func (o *CheckpointGetCheckpointNotFound) Error() string {
	return fmt.Sprintf("[GET /Checkpoint/{checkpointId}][%d] checkpointGetCheckpointNotFound  %+v", 404, o.Payload)
}

func (o *CheckpointGetCheckpointNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *CheckpointGetCheckpointNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
