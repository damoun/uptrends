// Code generated by go-swagger; DO NOT EDIT.

package checkpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// CheckpointRegionGetSpecifiedCheckpointRegionReader is a Reader for the CheckpointRegionGetSpecifiedCheckpointRegion structure.
type CheckpointRegionGetSpecifiedCheckpointRegionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckpointRegionGetSpecifiedCheckpointRegionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckpointRegionGetSpecifiedCheckpointRegionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckpointRegionGetSpecifiedCheckpointRegionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckpointRegionGetSpecifiedCheckpointRegionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckpointRegionGetSpecifiedCheckpointRegionOK creates a CheckpointRegionGetSpecifiedCheckpointRegionOK with default headers values
func NewCheckpointRegionGetSpecifiedCheckpointRegionOK() *CheckpointRegionGetSpecifiedCheckpointRegionOK {
	return &CheckpointRegionGetSpecifiedCheckpointRegionOK{}
}

/*CheckpointRegionGetSpecifiedCheckpointRegionOK handles this case with default header values.

The request completed successfully.
*/
type CheckpointRegionGetSpecifiedCheckpointRegionOK struct {
	Payload *models.CheckpointRegion
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionOK) Error() string {
	return fmt.Sprintf("[GET /CheckpointRegion/{checkpointRegionId}][%d] checkpointRegionGetSpecifiedCheckpointRegionOK  %+v", 200, o.Payload)
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionOK) GetPayload() *models.CheckpointRegion {
	return o.Payload
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CheckpointRegion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckpointRegionGetSpecifiedCheckpointRegionBadRequest creates a CheckpointRegionGetSpecifiedCheckpointRegionBadRequest with default headers values
func NewCheckpointRegionGetSpecifiedCheckpointRegionBadRequest() *CheckpointRegionGetSpecifiedCheckpointRegionBadRequest {
	return &CheckpointRegionGetSpecifiedCheckpointRegionBadRequest{}
}

/*CheckpointRegionGetSpecifiedCheckpointRegionBadRequest handles this case with default header values.

The request failed.
*/
type CheckpointRegionGetSpecifiedCheckpointRegionBadRequest struct {
	Payload *models.MessageList
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionBadRequest) Error() string {
	return fmt.Sprintf("[GET /CheckpointRegion/{checkpointRegionId}][%d] checkpointRegionGetSpecifiedCheckpointRegionBadRequest  %+v", 400, o.Payload)
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckpointRegionGetSpecifiedCheckpointRegionNotFound creates a CheckpointRegionGetSpecifiedCheckpointRegionNotFound with default headers values
func NewCheckpointRegionGetSpecifiedCheckpointRegionNotFound() *CheckpointRegionGetSpecifiedCheckpointRegionNotFound {
	return &CheckpointRegionGetSpecifiedCheckpointRegionNotFound{}
}

/*CheckpointRegionGetSpecifiedCheckpointRegionNotFound handles this case with default header values.

The checkpoint region could not be found.
*/
type CheckpointRegionGetSpecifiedCheckpointRegionNotFound struct {
	Payload *models.MessageList
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionNotFound) Error() string {
	return fmt.Sprintf("[GET /CheckpointRegion/{checkpointRegionId}][%d] checkpointRegionGetSpecifiedCheckpointRegionNotFound  %+v", 404, o.Payload)
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *CheckpointRegionGetSpecifiedCheckpointRegionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
