// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// DashboardUpdateDashboardReader is a Reader for the DashboardUpdateDashboard structure.
type DashboardUpdateDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DashboardUpdateDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDashboardUpdateDashboardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDashboardUpdateDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDashboardUpdateDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDashboardUpdateDashboardNoContent creates a DashboardUpdateDashboardNoContent with default headers values
func NewDashboardUpdateDashboardNoContent() *DashboardUpdateDashboardNoContent {
	return &DashboardUpdateDashboardNoContent{}
}

/*DashboardUpdateDashboardNoContent handles this case with default header values.

The request completed successfully.
*/
type DashboardUpdateDashboardNoContent struct {
}

func (o *DashboardUpdateDashboardNoContent) Error() string {
	return fmt.Sprintf("[PUT /Dashboard/{dashboardGuid}][%d] dashboardUpdateDashboardNoContent ", 204)
}

func (o *DashboardUpdateDashboardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDashboardUpdateDashboardBadRequest creates a DashboardUpdateDashboardBadRequest with default headers values
func NewDashboardUpdateDashboardBadRequest() *DashboardUpdateDashboardBadRequest {
	return &DashboardUpdateDashboardBadRequest{}
}

/*DashboardUpdateDashboardBadRequest handles this case with default header values.

The request failed.
*/
type DashboardUpdateDashboardBadRequest struct {
	Payload *models.MessageList
}

func (o *DashboardUpdateDashboardBadRequest) Error() string {
	return fmt.Sprintf("[PUT /Dashboard/{dashboardGuid}][%d] dashboardUpdateDashboardBadRequest  %+v", 400, o.Payload)
}

func (o *DashboardUpdateDashboardBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *DashboardUpdateDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardUpdateDashboardNotFound creates a DashboardUpdateDashboardNotFound with default headers values
func NewDashboardUpdateDashboardNotFound() *DashboardUpdateDashboardNotFound {
	return &DashboardUpdateDashboardNotFound{}
}

/*DashboardUpdateDashboardNotFound handles this case with default header values.

One or more of the specified entities could not be found.
*/
type DashboardUpdateDashboardNotFound struct {
	Payload *models.MessageList
}

func (o *DashboardUpdateDashboardNotFound) Error() string {
	return fmt.Sprintf("[PUT /Dashboard/{dashboardGuid}][%d] dashboardUpdateDashboardNotFound  %+v", 404, o.Payload)
}

func (o *DashboardUpdateDashboardNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *DashboardUpdateDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
