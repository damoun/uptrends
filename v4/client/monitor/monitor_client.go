// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitor API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitor API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	MonitorCleanupMaintenancePeriods(params *MonitorCleanupMaintenancePeriodsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCleanupMaintenancePeriodsNoContent, error)

	MonitorCloneMonitor(params *MonitorCloneMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCloneMonitorCreated, error)

	MonitorCreateMaintenancePeriodForMonitor(params *MonitorCreateMaintenancePeriodForMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCreateMaintenancePeriodForMonitorCreated, error)

	MonitorDeleteMaintenancePeriodFromMonitor(params *MonitorDeleteMaintenancePeriodFromMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorDeleteMaintenancePeriodFromMonitorNoContent, error)

	MonitorDeleteMonitor(params *MonitorDeleteMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorDeleteMonitorNoContent, error)

	MonitorGetAllMaintenancePeriodsForMonitor(params *MonitorGetAllMaintenancePeriodsForMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetAllMaintenancePeriodsForMonitorOK, error)

	MonitorGetMonitor(params *MonitorGetMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetMonitorOK, error)

	MonitorGetMonitorGroups(params *MonitorGetMonitorGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetMonitorGroupsOK, error)

	MonitorGetMonitors(params *MonitorGetMonitorsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetMonitorsOK, error)

	MonitorPatchMonitor(params *MonitorPatchMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorPatchMonitorNoContent, error)

	MonitorPostMonitor(params *MonitorPostMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorPostMonitorCreated, error)

	MonitorPutMonitor(params *MonitorPutMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorPutMonitorNoContent, error)

	MonitorUpdateMaintenancePeriodForMonitor(params *MonitorUpdateMaintenancePeriodForMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorUpdateMaintenancePeriodForMonitorNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  MonitorCleanupMaintenancePeriods clears out all one time maintenance periods for the specified monitor older than the specified date
*/
func (a *Client) MonitorCleanupMaintenancePeriods(params *MonitorCleanupMaintenancePeriodsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCleanupMaintenancePeriodsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCleanupMaintenancePeriodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_CleanupMaintenancePeriods",
		Method:             "POST",
		PathPattern:        "/Monitor/{monitorGuid}/MaintenancePeriod/Cleanup/{beforeDate}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCleanupMaintenancePeriodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCleanupMaintenancePeriodsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_CleanupMaintenancePeriods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorCloneMonitor creates a clone duplicate of the specified monitor

  Upon creation, the new monitor will be inactive. This allows you to make the necessary changes before you activate it. All other settings will be transferred to the new monitor as-is.
*/
func (a *Client) MonitorCloneMonitor(params *MonitorCloneMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCloneMonitorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCloneMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_CloneMonitor",
		Method:             "POST",
		PathPattern:        "/Monitor/{monitorGuid}/Clone",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCloneMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCloneMonitorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_CloneMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorCreateMaintenancePeriodForMonitor saves the new maintenance period provided for the specified monitor
*/
func (a *Client) MonitorCreateMaintenancePeriodForMonitor(params *MonitorCreateMaintenancePeriodForMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorCreateMaintenancePeriodForMonitorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorCreateMaintenancePeriodForMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_CreateMaintenancePeriodForMonitor",
		Method:             "POST",
		PathPattern:        "/Monitor/{monitorGuid}/MaintenancePeriod",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorCreateMaintenancePeriodForMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorCreateMaintenancePeriodForMonitorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_CreateMaintenancePeriodForMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorDeleteMaintenancePeriodFromMonitor deletes the specified maintenance period from the specified monitor
*/
func (a *Client) MonitorDeleteMaintenancePeriodFromMonitor(params *MonitorDeleteMaintenancePeriodFromMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorDeleteMaintenancePeriodFromMonitorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorDeleteMaintenancePeriodFromMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_DeleteMaintenancePeriodFromMonitor",
		Method:             "DELETE",
		PathPattern:        "/Monitor/{monitorGuid}/MaintenancePeriod/{maintenancePeriodId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorDeleteMaintenancePeriodFromMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorDeleteMaintenancePeriodFromMonitorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_DeleteMaintenancePeriodFromMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorDeleteMonitor deletes the specified monitor
*/
func (a *Client) MonitorDeleteMonitor(params *MonitorDeleteMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorDeleteMonitorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorDeleteMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_DeleteMonitor",
		Method:             "DELETE",
		PathPattern:        "/Monitor/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorDeleteMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorDeleteMonitorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_DeleteMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGetAllMaintenancePeriodsForMonitor finds all maintenance periods for a monitor
*/
func (a *Client) MonitorGetAllMaintenancePeriodsForMonitor(params *MonitorGetAllMaintenancePeriodsForMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetAllMaintenancePeriodsForMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGetAllMaintenancePeriodsForMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_GetAllMaintenancePeriodsForMonitor",
		Method:             "GET",
		PathPattern:        "/Monitor/{monitorGuid}/MaintenancePeriod",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGetAllMaintenancePeriodsForMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGetAllMaintenancePeriodsForMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_GetAllMaintenancePeriodsForMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGetMonitor returns the definition of the specified monitor
*/
func (a *Client) MonitorGetMonitor(params *MonitorGetMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGetMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_GetMonitor",
		Method:             "GET",
		PathPattern:        "/Monitor/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGetMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGetMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_GetMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGetMonitorGroups returns the Guid of each monitor group where the specified monitor is a member of
*/
func (a *Client) MonitorGetMonitorGroups(params *MonitorGetMonitorGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetMonitorGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGetMonitorGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_GetMonitorGroups",
		Method:             "GET",
		PathPattern:        "/Monitor/{monitorGuid}/MonitorGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGetMonitorGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGetMonitorGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_GetMonitorGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGetMonitors returns the definition of all monitors available in the account
*/
func (a *Client) MonitorGetMonitors(params *MonitorGetMonitorsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGetMonitorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGetMonitorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_GetMonitors",
		Method:             "GET",
		PathPattern:        "/Monitor",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGetMonitorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGetMonitorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_GetMonitors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorPatchMonitor partiallies updates the definition of the specified monitor

  This methods accepts parts of a monitor definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.
*/
func (a *Client) MonitorPatchMonitor(params *MonitorPatchMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorPatchMonitorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorPatchMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_PatchMonitor",
		Method:             "PATCH",
		PathPattern:        "/Monitor/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorPatchMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorPatchMonitorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_PatchMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorPostMonitor creates a new monitor
*/
func (a *Client) MonitorPostMonitor(params *MonitorPostMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorPostMonitorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorPostMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_PostMonitor",
		Method:             "POST",
		PathPattern:        "/Monitor",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorPostMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorPostMonitorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_PostMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorPutMonitor updates the definition of the specified monitor

  This methods only accepts a complete monitor definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.
*/
func (a *Client) MonitorPutMonitor(params *MonitorPutMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorPutMonitorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorPutMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_PutMonitor",
		Method:             "PUT",
		PathPattern:        "/Monitor/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorPutMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorPutMonitorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_PutMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorUpdateMaintenancePeriodForMonitor updates the specified maintenance schedule for the specified monitor
*/
func (a *Client) MonitorUpdateMaintenancePeriodForMonitor(params *MonitorUpdateMaintenancePeriodForMonitorParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorUpdateMaintenancePeriodForMonitorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorUpdateMaintenancePeriodForMonitorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Monitor_UpdateMaintenancePeriodForMonitor",
		Method:             "PUT",
		PathPattern:        "/Monitor/{monitorGuid}/MaintenancePeriod/{maintenancePeriodId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorUpdateMaintenancePeriodForMonitorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorUpdateMaintenancePeriodForMonitorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Monitor_UpdateMaintenancePeriodForMonitor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
