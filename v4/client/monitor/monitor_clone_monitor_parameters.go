// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMonitorCloneMonitorParams creates a new MonitorCloneMonitorParams object
// with the default values initialized.
func NewMonitorCloneMonitorParams() *MonitorCloneMonitorParams {
	var (
		includeMaintenancePeriodsDefault = bool(true)
		includeOperatorGroupsDefault     = bool(true)
	)
	return &MonitorCloneMonitorParams{
		IncludeMaintenancePeriods: &includeMaintenancePeriodsDefault,
		IncludeOperatorGroups:     &includeOperatorGroupsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewMonitorCloneMonitorParamsWithTimeout creates a new MonitorCloneMonitorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMonitorCloneMonitorParamsWithTimeout(timeout time.Duration) *MonitorCloneMonitorParams {
	var (
		includeMaintenancePeriodsDefault = bool(true)
		includeOperatorGroupsDefault     = bool(true)
	)
	return &MonitorCloneMonitorParams{
		IncludeMaintenancePeriods: &includeMaintenancePeriodsDefault,
		IncludeOperatorGroups:     &includeOperatorGroupsDefault,

		timeout: timeout,
	}
}

// NewMonitorCloneMonitorParamsWithContext creates a new MonitorCloneMonitorParams object
// with the default values initialized, and the ability to set a context for a request
func NewMonitorCloneMonitorParamsWithContext(ctx context.Context) *MonitorCloneMonitorParams {
	var (
		includeMaintenancePeriodsDefault = bool(true)
		includeOperatorGroupsDefault     = bool(true)
	)
	return &MonitorCloneMonitorParams{
		IncludeMaintenancePeriods: &includeMaintenancePeriodsDefault,
		IncludeOperatorGroups:     &includeOperatorGroupsDefault,

		Context: ctx,
	}
}

// NewMonitorCloneMonitorParamsWithHTTPClient creates a new MonitorCloneMonitorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMonitorCloneMonitorParamsWithHTTPClient(client *http.Client) *MonitorCloneMonitorParams {
	var (
		includeMaintenancePeriodsDefault = bool(true)
		includeOperatorGroupsDefault     = bool(true)
	)
	return &MonitorCloneMonitorParams{
		IncludeMaintenancePeriods: &includeMaintenancePeriodsDefault,
		IncludeOperatorGroups:     &includeOperatorGroupsDefault,
		HTTPClient:                client,
	}
}

/*MonitorCloneMonitorParams contains all the parameters to send to the API endpoint
for the monitor clone monitor operation typically these are written to a http.Request
*/
type MonitorCloneMonitorParams struct {

	/*IncludeMaintenancePeriods
	  Whether or not to also copy the maintenance periods into the clone.

	*/
	IncludeMaintenancePeriods *bool
	/*IncludeOperatorGroups
	  Whether or not to also copy the operator group memberships into the clone.

	*/
	IncludeOperatorGroups *bool
	/*MonitorGUID
	  The guid of the monitor you want to clone.

	*/
	MonitorGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) WithTimeout(timeout time.Duration) *MonitorCloneMonitorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) WithContext(ctx context.Context) *MonitorCloneMonitorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) WithHTTPClient(client *http.Client) *MonitorCloneMonitorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeMaintenancePeriods adds the includeMaintenancePeriods to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) WithIncludeMaintenancePeriods(includeMaintenancePeriods *bool) *MonitorCloneMonitorParams {
	o.SetIncludeMaintenancePeriods(includeMaintenancePeriods)
	return o
}

// SetIncludeMaintenancePeriods adds the includeMaintenancePeriods to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) SetIncludeMaintenancePeriods(includeMaintenancePeriods *bool) {
	o.IncludeMaintenancePeriods = includeMaintenancePeriods
}

// WithIncludeOperatorGroups adds the includeOperatorGroups to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) WithIncludeOperatorGroups(includeOperatorGroups *bool) *MonitorCloneMonitorParams {
	o.SetIncludeOperatorGroups(includeOperatorGroups)
	return o
}

// SetIncludeOperatorGroups adds the includeOperatorGroups to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) SetIncludeOperatorGroups(includeOperatorGroups *bool) {
	o.IncludeOperatorGroups = includeOperatorGroups
}

// WithMonitorGUID adds the monitorGUID to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) WithMonitorGUID(monitorGUID string) *MonitorCloneMonitorParams {
	o.SetMonitorGUID(monitorGUID)
	return o
}

// SetMonitorGUID adds the monitorGuid to the monitor clone monitor params
func (o *MonitorCloneMonitorParams) SetMonitorGUID(monitorGUID string) {
	o.MonitorGUID = monitorGUID
}

// WriteToRequest writes these params to a swagger request
func (o *MonitorCloneMonitorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeMaintenancePeriods != nil {

		// query param includeMaintenancePeriods
		var qrIncludeMaintenancePeriods bool
		if o.IncludeMaintenancePeriods != nil {
			qrIncludeMaintenancePeriods = *o.IncludeMaintenancePeriods
		}
		qIncludeMaintenancePeriods := swag.FormatBool(qrIncludeMaintenancePeriods)
		if qIncludeMaintenancePeriods != "" {
			if err := r.SetQueryParam("includeMaintenancePeriods", qIncludeMaintenancePeriods); err != nil {
				return err
			}
		}

	}

	if o.IncludeOperatorGroups != nil {

		// query param includeOperatorGroups
		var qrIncludeOperatorGroups bool
		if o.IncludeOperatorGroups != nil {
			qrIncludeOperatorGroups = *o.IncludeOperatorGroups
		}
		qIncludeOperatorGroups := swag.FormatBool(qrIncludeOperatorGroups)
		if qIncludeOperatorGroups != "" {
			if err := r.SetQueryParam("includeOperatorGroups", qIncludeOperatorGroups); err != nil {
				return err
			}
		}

	}

	// path param monitorGuid
	if err := r.SetPathParam("monitorGuid", o.MonitorGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
