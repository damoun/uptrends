// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// MonitorGetMonitorGroupsReader is a Reader for the MonitorGetMonitorGroups structure.
type MonitorGetMonitorGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorGetMonitorGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMonitorGetMonitorGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorGetMonitorGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMonitorGetMonitorGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMonitorGetMonitorGroupsOK creates a MonitorGetMonitorGroupsOK with default headers values
func NewMonitorGetMonitorGroupsOK() *MonitorGetMonitorGroupsOK {
	return &MonitorGetMonitorGroupsOK{}
}

/*MonitorGetMonitorGroupsOK handles this case with default header values.

The request completed successfully.
*/
type MonitorGetMonitorGroupsOK struct {
	Payload *models.Monitor
}

func (o *MonitorGetMonitorGroupsOK) Error() string {
	return fmt.Sprintf("[GET /Monitor/{monitorGuid}/MonitorGroup][%d] monitorGetMonitorGroupsOK  %+v", 200, o.Payload)
}

func (o *MonitorGetMonitorGroupsOK) GetPayload() *models.Monitor {
	return o.Payload
}

func (o *MonitorGetMonitorGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Monitor)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGetMonitorGroupsBadRequest creates a MonitorGetMonitorGroupsBadRequest with default headers values
func NewMonitorGetMonitorGroupsBadRequest() *MonitorGetMonitorGroupsBadRequest {
	return &MonitorGetMonitorGroupsBadRequest{}
}

/*MonitorGetMonitorGroupsBadRequest handles this case with default header values.

The request failed.
*/
type MonitorGetMonitorGroupsBadRequest struct {
	Payload *models.MessageList
}

func (o *MonitorGetMonitorGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /Monitor/{monitorGuid}/MonitorGroup][%d] monitorGetMonitorGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorGetMonitorGroupsBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGetMonitorGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGetMonitorGroupsNotFound creates a MonitorGetMonitorGroupsNotFound with default headers values
func NewMonitorGetMonitorGroupsNotFound() *MonitorGetMonitorGroupsNotFound {
	return &MonitorGetMonitorGroupsNotFound{}
}

/*MonitorGetMonitorGroupsNotFound handles this case with default header values.

The specified monitor does not exist.
*/
type MonitorGetMonitorGroupsNotFound struct {
	Payload *models.MessageList
}

func (o *MonitorGetMonitorGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /Monitor/{monitorGuid}/MonitorGroup][%d] monitorGetMonitorGroupsNotFound  %+v", 404, o.Payload)
}

func (o *MonitorGetMonitorGroupsNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGetMonitorGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
