// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// MonitorGetMonitorReader is a Reader for the MonitorGetMonitor structure.
type MonitorGetMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorGetMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMonitorGetMonitorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorGetMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMonitorGetMonitorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMonitorGetMonitorOK creates a MonitorGetMonitorOK with default headers values
func NewMonitorGetMonitorOK() *MonitorGetMonitorOK {
	return &MonitorGetMonitorOK{}
}

/*MonitorGetMonitorOK handles this case with default header values.

The request completed successfully.
*/
type MonitorGetMonitorOK struct {
	Payload *models.Monitor
}

func (o *MonitorGetMonitorOK) Error() string {
	return fmt.Sprintf("[GET /Monitor/{monitorGuid}][%d] monitorGetMonitorOK  %+v", 200, o.Payload)
}

func (o *MonitorGetMonitorOK) GetPayload() *models.Monitor {
	return o.Payload
}

func (o *MonitorGetMonitorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Monitor)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGetMonitorBadRequest creates a MonitorGetMonitorBadRequest with default headers values
func NewMonitorGetMonitorBadRequest() *MonitorGetMonitorBadRequest {
	return &MonitorGetMonitorBadRequest{}
}

/*MonitorGetMonitorBadRequest handles this case with default header values.

The request failed.
*/
type MonitorGetMonitorBadRequest struct {
	Payload *models.MessageList
}

func (o *MonitorGetMonitorBadRequest) Error() string {
	return fmt.Sprintf("[GET /Monitor/{monitorGuid}][%d] monitorGetMonitorBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorGetMonitorBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGetMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGetMonitorNotFound creates a MonitorGetMonitorNotFound with default headers values
func NewMonitorGetMonitorNotFound() *MonitorGetMonitorNotFound {
	return &MonitorGetMonitorNotFound{}
}

/*MonitorGetMonitorNotFound handles this case with default header values.

The specified monitor does not exist.
*/
type MonitorGetMonitorNotFound struct {
	Payload *models.MessageList
}

func (o *MonitorGetMonitorNotFound) Error() string {
	return fmt.Sprintf("[GET /Monitor/{monitorGuid}][%d] monitorGetMonitorNotFound  %+v", 404, o.Payload)
}

func (o *MonitorGetMonitorNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGetMonitorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
