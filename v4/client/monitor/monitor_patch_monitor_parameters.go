// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/v4/models"
)

// NewMonitorPatchMonitorParams creates a new MonitorPatchMonitorParams object
// with the default values initialized.
func NewMonitorPatchMonitorParams() *MonitorPatchMonitorParams {
	var ()
	return &MonitorPatchMonitorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMonitorPatchMonitorParamsWithTimeout creates a new MonitorPatchMonitorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMonitorPatchMonitorParamsWithTimeout(timeout time.Duration) *MonitorPatchMonitorParams {
	var ()
	return &MonitorPatchMonitorParams{

		timeout: timeout,
	}
}

// NewMonitorPatchMonitorParamsWithContext creates a new MonitorPatchMonitorParams object
// with the default values initialized, and the ability to set a context for a request
func NewMonitorPatchMonitorParamsWithContext(ctx context.Context) *MonitorPatchMonitorParams {
	var ()
	return &MonitorPatchMonitorParams{

		Context: ctx,
	}
}

// NewMonitorPatchMonitorParamsWithHTTPClient creates a new MonitorPatchMonitorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMonitorPatchMonitorParamsWithHTTPClient(client *http.Client) *MonitorPatchMonitorParams {
	var ()
	return &MonitorPatchMonitorParams{
		HTTPClient: client,
	}
}

/*MonitorPatchMonitorParams contains all the parameters to send to the API endpoint
for the monitor patch monitor operation typically these are written to a http.Request
*/
type MonitorPatchMonitorParams struct {

	/*APIMonitor
	  The partial definition for the monitor that should be updated.

	*/
	APIMonitor *models.APIMonitor
	/*MonitorGUID
	  The Guid of the monitor that should be updated.

	*/
	MonitorGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) WithTimeout(timeout time.Duration) *MonitorPatchMonitorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) WithContext(ctx context.Context) *MonitorPatchMonitorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) WithHTTPClient(client *http.Client) *MonitorPatchMonitorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIMonitor adds the aPIMonitor to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) WithAPIMonitor(aPIMonitor *models.APIMonitor) *MonitorPatchMonitorParams {
	o.SetAPIMonitor(aPIMonitor)
	return o
}

// SetAPIMonitor adds the apiMonitor to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) SetAPIMonitor(aPIMonitor *models.APIMonitor) {
	o.APIMonitor = aPIMonitor
}

// WithMonitorGUID adds the monitorGUID to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) WithMonitorGUID(monitorGUID string) *MonitorPatchMonitorParams {
	o.SetMonitorGUID(monitorGUID)
	return o
}

// SetMonitorGUID adds the monitorGuid to the monitor patch monitor params
func (o *MonitorPatchMonitorParams) SetMonitorGUID(monitorGUID string) {
	o.MonitorGUID = monitorGUID
}

// WriteToRequest writes these params to a swagger request
func (o *MonitorPatchMonitorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.APIMonitor != nil {
		if err := r.SetBodyParam(o.APIMonitor); err != nil {
			return err
		}
	}

	// path param monitorGuid
	if err := r.SetPathParam("monitorGuid", o.MonitorGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
