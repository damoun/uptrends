// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/v4/models"
)

// MonitorPatchMonitorReader is a Reader for the MonitorPatchMonitor structure.
type MonitorPatchMonitorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorPatchMonitorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewMonitorPatchMonitorNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorPatchMonitorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMonitorPatchMonitorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMonitorPatchMonitorNoContent creates a MonitorPatchMonitorNoContent with default headers values
func NewMonitorPatchMonitorNoContent() *MonitorPatchMonitorNoContent {
	return &MonitorPatchMonitorNoContent{}
}

/*MonitorPatchMonitorNoContent handles this case with default header values.

The patch was successful. No content is returned.
*/
type MonitorPatchMonitorNoContent struct {
}

func (o *MonitorPatchMonitorNoContent) Error() string {
	return fmt.Sprintf("[PATCH /Monitor/{monitorGuid}][%d] monitorPatchMonitorNoContent ", 204)
}

func (o *MonitorPatchMonitorNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMonitorPatchMonitorBadRequest creates a MonitorPatchMonitorBadRequest with default headers values
func NewMonitorPatchMonitorBadRequest() *MonitorPatchMonitorBadRequest {
	return &MonitorPatchMonitorBadRequest{}
}

/*MonitorPatchMonitorBadRequest handles this case with default header values.

The request failed.
*/
type MonitorPatchMonitorBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *MonitorPatchMonitorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /Monitor/{monitorGuid}][%d] monitorPatchMonitorBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorPatchMonitorBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *MonitorPatchMonitorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorPatchMonitorNotFound creates a MonitorPatchMonitorNotFound with default headers values
func NewMonitorPatchMonitorNotFound() *MonitorPatchMonitorNotFound {
	return &MonitorPatchMonitorNotFound{}
}

/*MonitorPatchMonitorNotFound handles this case with default header values.

The specified monitor does not exist.
*/
type MonitorPatchMonitorNotFound struct {
	Payload *models.APIMessageInfo
}

func (o *MonitorPatchMonitorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /Monitor/{monitorGuid}][%d] monitorPatchMonitorNotFound  %+v", 404, o.Payload)
}

func (o *MonitorPatchMonitorNotFound) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *MonitorPatchMonitorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
