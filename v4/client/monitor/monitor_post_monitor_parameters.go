// Code generated by go-swagger; DO NOT EDIT.

package monitor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// NewMonitorPostMonitorParams creates a new MonitorPostMonitorParams object
// with the default values initialized.
func NewMonitorPostMonitorParams() *MonitorPostMonitorParams {
	var ()
	return &MonitorPostMonitorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMonitorPostMonitorParamsWithTimeout creates a new MonitorPostMonitorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMonitorPostMonitorParamsWithTimeout(timeout time.Duration) *MonitorPostMonitorParams {
	var ()
	return &MonitorPostMonitorParams{

		timeout: timeout,
	}
}

// NewMonitorPostMonitorParamsWithContext creates a new MonitorPostMonitorParams object
// with the default values initialized, and the ability to set a context for a request
func NewMonitorPostMonitorParamsWithContext(ctx context.Context) *MonitorPostMonitorParams {
	var ()
	return &MonitorPostMonitorParams{

		Context: ctx,
	}
}

// NewMonitorPostMonitorParamsWithHTTPClient creates a new MonitorPostMonitorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMonitorPostMonitorParamsWithHTTPClient(client *http.Client) *MonitorPostMonitorParams {
	var ()
	return &MonitorPostMonitorParams{
		HTTPClient: client,
	}
}

/*MonitorPostMonitorParams contains all the parameters to send to the API endpoint
for the monitor post monitor operation typically these are written to a http.Request
*/
type MonitorPostMonitorParams struct {

	/*Monitor
	  The complete definition of the monitor that should be created.

	*/
	Monitor *models.Monitor

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the monitor post monitor params
func (o *MonitorPostMonitorParams) WithTimeout(timeout time.Duration) *MonitorPostMonitorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitor post monitor params
func (o *MonitorPostMonitorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitor post monitor params
func (o *MonitorPostMonitorParams) WithContext(ctx context.Context) *MonitorPostMonitorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitor post monitor params
func (o *MonitorPostMonitorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitor post monitor params
func (o *MonitorPostMonitorParams) WithHTTPClient(client *http.Client) *MonitorPostMonitorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitor post monitor params
func (o *MonitorPostMonitorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMonitor adds the monitor to the monitor post monitor params
func (o *MonitorPostMonitorParams) WithMonitor(monitor *models.Monitor) *MonitorPostMonitorParams {
	o.SetMonitor(monitor)
	return o
}

// SetMonitor adds the monitor to the monitor post monitor params
func (o *MonitorPostMonitorParams) SetMonitor(monitor *models.Monitor) {
	o.Monitor = monitor
}

// WriteToRequest writes these params to a swagger request
func (o *MonitorPostMonitorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Monitor != nil {
		if err := r.SetBodyParam(o.Monitor); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
