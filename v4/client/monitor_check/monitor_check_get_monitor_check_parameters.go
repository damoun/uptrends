// Code generated by go-swagger; DO NOT EDIT.

package monitor_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMonitorCheckGetMonitorCheckParams creates a new MonitorCheckGetMonitorCheckParams object
// with the default values initialized.
func NewMonitorCheckGetMonitorCheckParams() *MonitorCheckGetMonitorCheckParams {
	var (
		presetPeriodDefault = string("Last24Hours")
		sortingDefault      = string("Descending")
		takeDefault         = int32(100)
	)
	return &MonitorCheckGetMonitorCheckParams{
		PresetPeriod: &presetPeriodDefault,
		Sorting:      &sortingDefault,
		Take:         &takeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewMonitorCheckGetMonitorCheckParamsWithTimeout creates a new MonitorCheckGetMonitorCheckParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMonitorCheckGetMonitorCheckParamsWithTimeout(timeout time.Duration) *MonitorCheckGetMonitorCheckParams {
	var (
		presetPeriodDefault = string("Last24Hours")
		sortingDefault      = string("Descending")
		takeDefault         = int32(100)
	)
	return &MonitorCheckGetMonitorCheckParams{
		PresetPeriod: &presetPeriodDefault,
		Sorting:      &sortingDefault,
		Take:         &takeDefault,

		timeout: timeout,
	}
}

// NewMonitorCheckGetMonitorCheckParamsWithContext creates a new MonitorCheckGetMonitorCheckParams object
// with the default values initialized, and the ability to set a context for a request
func NewMonitorCheckGetMonitorCheckParamsWithContext(ctx context.Context) *MonitorCheckGetMonitorCheckParams {
	var (
		presetPeriodDefault = string("Last24Hours")
		sortingDefault      = string("Descending")
		takeDefault         = int32(100)
	)
	return &MonitorCheckGetMonitorCheckParams{
		PresetPeriod: &presetPeriodDefault,
		Sorting:      &sortingDefault,
		Take:         &takeDefault,

		Context: ctx,
	}
}

// NewMonitorCheckGetMonitorCheckParamsWithHTTPClient creates a new MonitorCheckGetMonitorCheckParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMonitorCheckGetMonitorCheckParamsWithHTTPClient(client *http.Client) *MonitorCheckGetMonitorCheckParams {
	var (
		presetPeriodDefault = string("Last24Hours")
		sortingDefault      = string("Descending")
		takeDefault         = int32(100)
	)
	return &MonitorCheckGetMonitorCheckParams{
		PresetPeriod: &presetPeriodDefault,
		Sorting:      &sortingDefault,
		Take:         &takeDefault,
		HTTPClient:   client,
	}
}

/*MonitorCheckGetMonitorCheckParams contains all the parameters to send to the API endpoint
for the monitor check get monitor check operation typically these are written to a http.Request
*/
type MonitorCheckGetMonitorCheckParams struct {

	/*Cursor
	  A cursor value that should be used for traversing the dataset.

	*/
	Cursor *string
	/*End
	  The end of a custom period

	*/
	End *strfmt.DateTime
	/*ErrorLevel
	  Error level filter that should be applied. (default = NoError and above)

	*/
	ErrorLevel *string
	/*PresetPeriod
	  The requested time period.

	*/
	PresetPeriod *string
	/*ShowPartialMeasurements
	  Show partial measurements from concurrent monitors

	*/
	ShowPartialMeasurements *bool
	/*Sorting
	  Sorting direction based on timestamp.

	*/
	Sorting *string
	/*Start
	  The start of a custom period (can't be used together with the PresetPeriod parameter)

	*/
	Start *strfmt.DateTime
	/*Take
	  The number of records to return (Max value = 100)

	*/
	Take *int32
	/*MonitorGUID
	  The Guid of the monitor to get monitor checks for.

	*/
	MonitorGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithTimeout(timeout time.Duration) *MonitorCheckGetMonitorCheckParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithContext(ctx context.Context) *MonitorCheckGetMonitorCheckParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithHTTPClient(client *http.Client) *MonitorCheckGetMonitorCheckParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithCursor(cursor *string) *MonitorCheckGetMonitorCheckParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithEnd adds the end to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithEnd(end *strfmt.DateTime) *MonitorCheckGetMonitorCheckParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithErrorLevel adds the errorLevel to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithErrorLevel(errorLevel *string) *MonitorCheckGetMonitorCheckParams {
	o.SetErrorLevel(errorLevel)
	return o
}

// SetErrorLevel adds the errorLevel to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetErrorLevel(errorLevel *string) {
	o.ErrorLevel = errorLevel
}

// WithPresetPeriod adds the presetPeriod to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithPresetPeriod(presetPeriod *string) *MonitorCheckGetMonitorCheckParams {
	o.SetPresetPeriod(presetPeriod)
	return o
}

// SetPresetPeriod adds the presetPeriod to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetPresetPeriod(presetPeriod *string) {
	o.PresetPeriod = presetPeriod
}

// WithShowPartialMeasurements adds the showPartialMeasurements to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithShowPartialMeasurements(showPartialMeasurements *bool) *MonitorCheckGetMonitorCheckParams {
	o.SetShowPartialMeasurements(showPartialMeasurements)
	return o
}

// SetShowPartialMeasurements adds the showPartialMeasurements to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetShowPartialMeasurements(showPartialMeasurements *bool) {
	o.ShowPartialMeasurements = showPartialMeasurements
}

// WithSorting adds the sorting to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithSorting(sorting *string) *MonitorCheckGetMonitorCheckParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithStart adds the start to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithStart(start *strfmt.DateTime) *MonitorCheckGetMonitorCheckParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetStart(start *strfmt.DateTime) {
	o.Start = start
}

// WithTake adds the take to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithTake(take *int32) *MonitorCheckGetMonitorCheckParams {
	o.SetTake(take)
	return o
}

// SetTake adds the take to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetTake(take *int32) {
	o.Take = take
}

// WithMonitorGUID adds the monitorGUID to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) WithMonitorGUID(monitorGUID string) *MonitorCheckGetMonitorCheckParams {
	o.SetMonitorGUID(monitorGUID)
	return o
}

// SetMonitorGUID adds the monitorGuid to the monitor check get monitor check params
func (o *MonitorCheckGetMonitorCheckParams) SetMonitorGUID(monitorGUID string) {
	o.MonitorGUID = monitorGUID
}

// WriteToRequest writes these params to a swagger request
func (o *MonitorCheckGetMonitorCheckParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param Cursor
		var qrCursor string
		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {
			if err := r.SetQueryParam("Cursor", qCursor); err != nil {
				return err
			}
		}

	}

	if o.End != nil {

		// query param End
		var qrEnd strfmt.DateTime
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {
			if err := r.SetQueryParam("End", qEnd); err != nil {
				return err
			}
		}

	}

	if o.ErrorLevel != nil {

		// query param ErrorLevel
		var qrErrorLevel string
		if o.ErrorLevel != nil {
			qrErrorLevel = *o.ErrorLevel
		}
		qErrorLevel := qrErrorLevel
		if qErrorLevel != "" {
			if err := r.SetQueryParam("ErrorLevel", qErrorLevel); err != nil {
				return err
			}
		}

	}

	if o.PresetPeriod != nil {

		// query param PresetPeriod
		var qrPresetPeriod string
		if o.PresetPeriod != nil {
			qrPresetPeriod = *o.PresetPeriod
		}
		qPresetPeriod := qrPresetPeriod
		if qPresetPeriod != "" {
			if err := r.SetQueryParam("PresetPeriod", qPresetPeriod); err != nil {
				return err
			}
		}

	}

	if o.ShowPartialMeasurements != nil {

		// query param ShowPartialMeasurements
		var qrShowPartialMeasurements bool
		if o.ShowPartialMeasurements != nil {
			qrShowPartialMeasurements = *o.ShowPartialMeasurements
		}
		qShowPartialMeasurements := swag.FormatBool(qrShowPartialMeasurements)
		if qShowPartialMeasurements != "" {
			if err := r.SetQueryParam("ShowPartialMeasurements", qShowPartialMeasurements); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param Sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("Sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param Start
		var qrStart strfmt.DateTime
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart.String()
		if qStart != "" {
			if err := r.SetQueryParam("Start", qStart); err != nil {
				return err
			}
		}

	}

	if o.Take != nil {

		// query param Take
		var qrTake int32
		if o.Take != nil {
			qrTake = *o.Take
		}
		qTake := swag.FormatInt32(qrTake)
		if qTake != "" {
			if err := r.SetQueryParam("Take", qTake); err != nil {
				return err
			}
		}

	}

	// path param monitorGuid
	if err := r.SetPathParam("monitorGuid", o.MonitorGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
