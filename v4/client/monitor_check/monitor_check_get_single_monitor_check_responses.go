// Code generated by go-swagger; DO NOT EDIT.

package monitor_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/v4/models"
)

// MonitorCheckGetSingleMonitorCheckReader is a Reader for the MonitorCheckGetSingleMonitorCheck structure.
type MonitorCheckGetSingleMonitorCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorCheckGetSingleMonitorCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMonitorCheckGetSingleMonitorCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorCheckGetSingleMonitorCheckBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMonitorCheckGetSingleMonitorCheckOK creates a MonitorCheckGetSingleMonitorCheckOK with default headers values
func NewMonitorCheckGetSingleMonitorCheckOK() *MonitorCheckGetSingleMonitorCheckOK {
	return &MonitorCheckGetSingleMonitorCheckOK{}
}

/*MonitorCheckGetSingleMonitorCheckOK handles this case with default header values.

MonitorCheckGetSingleMonitorCheckOK monitor check get single monitor check o k
*/
type MonitorCheckGetSingleMonitorCheckOK struct {
	Payload *models.SingleMonitorCheckResponse
}

func (o *MonitorCheckGetSingleMonitorCheckOK) Error() string {
	return fmt.Sprintf("[GET /MonitorCheck/{monitorCheckId}][%d] monitorCheckGetSingleMonitorCheckOK  %+v", 200, o.Payload)
}

func (o *MonitorCheckGetSingleMonitorCheckOK) GetPayload() *models.SingleMonitorCheckResponse {
	return o.Payload
}

func (o *MonitorCheckGetSingleMonitorCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SingleMonitorCheckResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorCheckGetSingleMonitorCheckBadRequest creates a MonitorCheckGetSingleMonitorCheckBadRequest with default headers values
func NewMonitorCheckGetSingleMonitorCheckBadRequest() *MonitorCheckGetSingleMonitorCheckBadRequest {
	return &MonitorCheckGetSingleMonitorCheckBadRequest{}
}

/*MonitorCheckGetSingleMonitorCheckBadRequest handles this case with default header values.

The request failed.
*/
type MonitorCheckGetSingleMonitorCheckBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *MonitorCheckGetSingleMonitorCheckBadRequest) Error() string {
	return fmt.Sprintf("[GET /MonitorCheck/{monitorCheckId}][%d] monitorCheckGetSingleMonitorCheckBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorCheckGetSingleMonitorCheckBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *MonitorCheckGetSingleMonitorCheckBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
