// Code generated by go-swagger; DO NOT EDIT.

package monitor_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitor group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitor group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	MonitorGroupAddMaintenancePeriodToAllMembers(params *MonitorGroupAddMaintenancePeriodToAllMembersParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupAddMaintenancePeriodToAllMembersNoContent, error)

	MonitorGroupAddMonitorToMonitorGroup(params *MonitorGroupAddMonitorToMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupAddMonitorToMonitorGroupCreated, error)

	MonitorGroupCreateMonitorGroup(params *MonitorGroupCreateMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupCreateMonitorGroupCreated, error)

	MonitorGroupDeleteMonitorGroup(params *MonitorGroupDeleteMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupDeleteMonitorGroupNoContent, error)

	MonitorGroupGetAllMonitorGroups(params *MonitorGroupGetAllMonitorGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupGetAllMonitorGroupsOK, error)

	MonitorGroupGetMonitorGroup(params *MonitorGroupGetMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupGetMonitorGroupOK, error)

	MonitorGroupGetMonitorGroupMembers(params *MonitorGroupGetMonitorGroupMembersParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupGetMonitorGroupMembersOK, error)

	MonitorGroupRemoveMonitorFromMonitorGroup(params *MonitorGroupRemoveMonitorFromMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupRemoveMonitorFromMonitorGroupNoContent, error)

	MonitorGroupStartAllMonitorAlertsInGroup(params *MonitorGroupStartAllMonitorAlertsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStartAllMonitorAlertsInGroupNoContent, error)

	MonitorGroupStartAllMonitorsInGroup(params *MonitorGroupStartAllMonitorsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStartAllMonitorsInGroupNoContent, error)

	MonitorGroupStopAllMonitorAlertsInGroup(params *MonitorGroupStopAllMonitorAlertsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStopAllMonitorAlertsInGroupNoContent, error)

	MonitorGroupStopAllMonitorsInGroup(params *MonitorGroupStopAllMonitorsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStopAllMonitorsInGroupNoContent, error)

	MonitorGroupUpdateMonitorGroup(params *MonitorGroupUpdateMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupUpdateMonitorGroupNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  MonitorGroupAddMaintenancePeriodToAllMembers adds the provided maintenance period to all monitors in the group specified
*/
func (a *Client) MonitorGroupAddMaintenancePeriodToAllMembers(params *MonitorGroupAddMaintenancePeriodToAllMembersParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupAddMaintenancePeriodToAllMembersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupAddMaintenancePeriodToAllMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_AddMaintenancePeriodToAllMembers",
		Method:             "POST",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/AddMaintenancePeriodToAllMembers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupAddMaintenancePeriodToAllMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupAddMaintenancePeriodToAllMembersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_AddMaintenancePeriodToAllMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupAddMonitorToMonitorGroup adds the specified monitor to the monitor group
*/
func (a *Client) MonitorGroupAddMonitorToMonitorGroup(params *MonitorGroupAddMonitorToMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupAddMonitorToMonitorGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupAddMonitorToMonitorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_AddMonitorToMonitorGroup",
		Method:             "POST",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/Members/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupAddMonitorToMonitorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupAddMonitorToMonitorGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_AddMonitorToMonitorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupCreateMonitorGroup creates a new monitor group
*/
func (a *Client) MonitorGroupCreateMonitorGroup(params *MonitorGroupCreateMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupCreateMonitorGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupCreateMonitorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_CreateMonitorGroup",
		Method:             "POST",
		PathPattern:        "/MonitorGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupCreateMonitorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupCreateMonitorGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_CreateMonitorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupDeleteMonitorGroup deletes the specified monitor group
*/
func (a *Client) MonitorGroupDeleteMonitorGroup(params *MonitorGroupDeleteMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupDeleteMonitorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupDeleteMonitorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_DeleteMonitorGroup",
		Method:             "DELETE",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupDeleteMonitorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupDeleteMonitorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_DeleteMonitorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupGetAllMonitorGroups gets all monitor groups
*/
func (a *Client) MonitorGroupGetAllMonitorGroups(params *MonitorGroupGetAllMonitorGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupGetAllMonitorGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupGetAllMonitorGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_GetAllMonitorGroups",
		Method:             "GET",
		PathPattern:        "/MonitorGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupGetAllMonitorGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupGetAllMonitorGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_GetAllMonitorGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupGetMonitorGroup gets the details of a monitor group
*/
func (a *Client) MonitorGroupGetMonitorGroup(params *MonitorGroupGetMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupGetMonitorGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupGetMonitorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_GetMonitorGroup",
		Method:             "GET",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupGetMonitorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupGetMonitorGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_GetMonitorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupGetMonitorGroupMembers gets a list of all members of a monitor group
*/
func (a *Client) MonitorGroupGetMonitorGroupMembers(params *MonitorGroupGetMonitorGroupMembersParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupGetMonitorGroupMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupGetMonitorGroupMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_GetMonitorGroupMembers",
		Method:             "GET",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/Members",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupGetMonitorGroupMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupGetMonitorGroupMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_GetMonitorGroupMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupRemoveMonitorFromMonitorGroup removes the specified monitor from the monitor group
*/
func (a *Client) MonitorGroupRemoveMonitorFromMonitorGroup(params *MonitorGroupRemoveMonitorFromMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupRemoveMonitorFromMonitorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupRemoveMonitorFromMonitorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_RemoveMonitorFromMonitorGroup",
		Method:             "DELETE",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/Members/{monitorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupRemoveMonitorFromMonitorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupRemoveMonitorFromMonitorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_RemoveMonitorFromMonitorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupStartAllMonitorAlertsInGroup starts alerting for all monitors that are a member of the monitor group specified by the monitor group GUID
*/
func (a *Client) MonitorGroupStartAllMonitorAlertsInGroup(params *MonitorGroupStartAllMonitorAlertsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStartAllMonitorAlertsInGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupStartAllMonitorAlertsInGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_StartAllMonitorAlertsInGroup",
		Method:             "POST",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/StartAllMonitorAlerts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupStartAllMonitorAlertsInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupStartAllMonitorAlertsInGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_StartAllMonitorAlertsInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupStartAllMonitorsInGroup starts all monitors that are a member of the monitor group specified by the monitor group GUID
*/
func (a *Client) MonitorGroupStartAllMonitorsInGroup(params *MonitorGroupStartAllMonitorsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStartAllMonitorsInGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupStartAllMonitorsInGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_StartAllMonitorsInGroup",
		Method:             "POST",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/StartAllMonitors",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupStartAllMonitorsInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupStartAllMonitorsInGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_StartAllMonitorsInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupStopAllMonitorAlertsInGroup stops alerting for all monitors that are a member of the monitor group specified by the monitor group GUID
*/
func (a *Client) MonitorGroupStopAllMonitorAlertsInGroup(params *MonitorGroupStopAllMonitorAlertsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStopAllMonitorAlertsInGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupStopAllMonitorAlertsInGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_StopAllMonitorAlertsInGroup",
		Method:             "POST",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/StopAllMonitorAlerts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupStopAllMonitorAlertsInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupStopAllMonitorAlertsInGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_StopAllMonitorAlertsInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupStopAllMonitorsInGroup stops all monitors that are a member of the monitor group specified by the monitor group GUID
*/
func (a *Client) MonitorGroupStopAllMonitorsInGroup(params *MonitorGroupStopAllMonitorsInGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupStopAllMonitorsInGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupStopAllMonitorsInGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_StopAllMonitorsInGroup",
		Method:             "POST",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}/StopAllMonitors",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupStopAllMonitorsInGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupStopAllMonitorsInGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_StopAllMonitorsInGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MonitorGroupUpdateMonitorGroup updates the monitor group with the Guid specified
*/
func (a *Client) MonitorGroupUpdateMonitorGroup(params *MonitorGroupUpdateMonitorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*MonitorGroupUpdateMonitorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMonitorGroupUpdateMonitorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MonitorGroup_UpdateMonitorGroup",
		Method:             "PUT",
		PathPattern:        "/MonitorGroup/{monitorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MonitorGroupUpdateMonitorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MonitorGroupUpdateMonitorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MonitorGroup_UpdateMonitorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
