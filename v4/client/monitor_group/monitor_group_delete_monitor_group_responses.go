// Code generated by go-swagger; DO NOT EDIT.

package monitor_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// MonitorGroupDeleteMonitorGroupReader is a Reader for the MonitorGroupDeleteMonitorGroup structure.
type MonitorGroupDeleteMonitorGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorGroupDeleteMonitorGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewMonitorGroupDeleteMonitorGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorGroupDeleteMonitorGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMonitorGroupDeleteMonitorGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMonitorGroupDeleteMonitorGroupNoContent creates a MonitorGroupDeleteMonitorGroupNoContent with default headers values
func NewMonitorGroupDeleteMonitorGroupNoContent() *MonitorGroupDeleteMonitorGroupNoContent {
	return &MonitorGroupDeleteMonitorGroupNoContent{}
}

/*MonitorGroupDeleteMonitorGroupNoContent handles this case with default header values.

The request completed successfully. No content is returned.
*/
type MonitorGroupDeleteMonitorGroupNoContent struct {
}

func (o *MonitorGroupDeleteMonitorGroupNoContent) Error() string {
	return fmt.Sprintf("[DELETE /MonitorGroup/{monitorGroupGuid}][%d] monitorGroupDeleteMonitorGroupNoContent ", 204)
}

func (o *MonitorGroupDeleteMonitorGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewMonitorGroupDeleteMonitorGroupBadRequest creates a MonitorGroupDeleteMonitorGroupBadRequest with default headers values
func NewMonitorGroupDeleteMonitorGroupBadRequest() *MonitorGroupDeleteMonitorGroupBadRequest {
	return &MonitorGroupDeleteMonitorGroupBadRequest{}
}

/*MonitorGroupDeleteMonitorGroupBadRequest handles this case with default header values.

The request failed.
or
Deleting the AllMonitors group is not allowed.
*/
type MonitorGroupDeleteMonitorGroupBadRequest struct {
	Payload *models.MessageList
}

func (o *MonitorGroupDeleteMonitorGroupBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /MonitorGroup/{monitorGroupGuid}][%d] monitorGroupDeleteMonitorGroupBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorGroupDeleteMonitorGroupBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGroupDeleteMonitorGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGroupDeleteMonitorGroupNotFound creates a MonitorGroupDeleteMonitorGroupNotFound with default headers values
func NewMonitorGroupDeleteMonitorGroupNotFound() *MonitorGroupDeleteMonitorGroupNotFound {
	return &MonitorGroupDeleteMonitorGroupNotFound{}
}

/*MonitorGroupDeleteMonitorGroupNotFound handles this case with default header values.

The requested monitor group was not found.
*/
type MonitorGroupDeleteMonitorGroupNotFound struct {
	Payload *models.MessageList
}

func (o *MonitorGroupDeleteMonitorGroupNotFound) Error() string {
	return fmt.Sprintf("[DELETE /MonitorGroup/{monitorGroupGuid}][%d] monitorGroupDeleteMonitorGroupNotFound  %+v", 404, o.Payload)
}

func (o *MonitorGroupDeleteMonitorGroupNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGroupDeleteMonitorGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
