// Code generated by go-swagger; DO NOT EDIT.

package monitor_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// MonitorGroupGetMonitorGroupReader is a Reader for the MonitorGroupGetMonitorGroup structure.
type MonitorGroupGetMonitorGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MonitorGroupGetMonitorGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMonitorGroupGetMonitorGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewMonitorGroupGetMonitorGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMonitorGroupGetMonitorGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMonitorGroupGetMonitorGroupOK creates a MonitorGroupGetMonitorGroupOK with default headers values
func NewMonitorGroupGetMonitorGroupOK() *MonitorGroupGetMonitorGroupOK {
	return &MonitorGroupGetMonitorGroupOK{}
}

/*MonitorGroupGetMonitorGroupOK handles this case with default header values.

The request completed successfully.
*/
type MonitorGroupGetMonitorGroupOK struct {
	Payload *models.MonitorGroup
}

func (o *MonitorGroupGetMonitorGroupOK) Error() string {
	return fmt.Sprintf("[GET /MonitorGroup/{monitorGroupGuid}][%d] monitorGroupGetMonitorGroupOK  %+v", 200, o.Payload)
}

func (o *MonitorGroupGetMonitorGroupOK) GetPayload() *models.MonitorGroup {
	return o.Payload
}

func (o *MonitorGroupGetMonitorGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MonitorGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGroupGetMonitorGroupBadRequest creates a MonitorGroupGetMonitorGroupBadRequest with default headers values
func NewMonitorGroupGetMonitorGroupBadRequest() *MonitorGroupGetMonitorGroupBadRequest {
	return &MonitorGroupGetMonitorGroupBadRequest{}
}

/*MonitorGroupGetMonitorGroupBadRequest handles this case with default header values.

The request failed.
*/
type MonitorGroupGetMonitorGroupBadRequest struct {
	Payload *models.MessageList
}

func (o *MonitorGroupGetMonitorGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /MonitorGroup/{monitorGroupGuid}][%d] monitorGroupGetMonitorGroupBadRequest  %+v", 400, o.Payload)
}

func (o *MonitorGroupGetMonitorGroupBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGroupGetMonitorGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMonitorGroupGetMonitorGroupNotFound creates a MonitorGroupGetMonitorGroupNotFound with default headers values
func NewMonitorGroupGetMonitorGroupNotFound() *MonitorGroupGetMonitorGroupNotFound {
	return &MonitorGroupGetMonitorGroupNotFound{}
}

/*MonitorGroupGetMonitorGroupNotFound handles this case with default header values.

The requested monitor group was not found.
*/
type MonitorGroupGetMonitorGroupNotFound struct {
	Payload *models.MessageList
}

func (o *MonitorGroupGetMonitorGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /MonitorGroup/{monitorGroupGuid}][%d] monitorGroupGetMonitorGroupNotFound  %+v", 404, o.Payload)
}

func (o *MonitorGroupGetMonitorGroupNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *MonitorGroupGetMonitorGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
