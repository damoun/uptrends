// Code generated by go-swagger; DO NOT EDIT.

package operator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operator API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operator API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OperatorAddDutyPeriodForOperator(params *OperatorAddDutyPeriodForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorAddDutyPeriodForOperatorCreated, error)

	OperatorCreateOperator(params *OperatorCreateOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorCreateOperatorCreated, error)

	OperatorDeleteAuthorizationForOperator(params *OperatorDeleteAuthorizationForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorDeleteAuthorizationForOperatorNoContent, error)

	OperatorDeleteDutyScheduleFromOperator(params *OperatorDeleteDutyScheduleFromOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorDeleteDutyScheduleFromOperatorNoContent, error)

	OperatorDeleteOperator(params *OperatorDeleteOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorDeleteOperatorNoContent, error)

	OperatorGetAllOperators(params *OperatorGetAllOperatorsParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetAllOperatorsOK, error)

	OperatorGetAuthorizationsForOperator(params *OperatorGetAuthorizationsForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetAuthorizationsForOperatorOK, error)

	OperatorGetDutyScheduleForOperator(params *OperatorGetDutyScheduleForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetDutyScheduleForOperatorOK, error)

	OperatorGetOperator(params *OperatorGetOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetOperatorOK, error)

	OperatorGetOperatorGroupsForOperator(params *OperatorGetOperatorGroupsForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetOperatorGroupsForOperatorOK, error)

	OperatorPostAuthorizationForOperator(params *OperatorPostAuthorizationForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorPostAuthorizationForOperatorNoContent, error)

	OperatorUpdateDutyPeriodForOperator(params *OperatorUpdateDutyPeriodForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorUpdateDutyPeriodForOperatorNoContent, error)

	OperatorUpdateOperator(params *OperatorUpdateOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorUpdateOperatorNoContent, error)

	OperatorUpdateOperatorWithPatch(params *OperatorUpdateOperatorWithPatchParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorUpdateOperatorWithPatchNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OperatorAddDutyPeriodForOperator adds a duty schedule to the specified operator
*/
func (a *Client) OperatorAddDutyPeriodForOperator(params *OperatorAddDutyPeriodForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorAddDutyPeriodForOperatorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorAddDutyPeriodForOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_AddDutyPeriodForOperator",
		Method:             "POST",
		PathPattern:        "/Operator/{operatorGuid}/DutySchedule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorAddDutyPeriodForOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorAddDutyPeriodForOperatorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_AddDutyPeriodForOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorCreateOperator creates a new operator
*/
func (a *Client) OperatorCreateOperator(params *OperatorCreateOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorCreateOperatorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorCreateOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_CreateOperator",
		Method:             "POST",
		PathPattern:        "/Operator",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorCreateOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorCreateOperatorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_CreateOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorDeleteAuthorizationForOperator removes the specified authorization of this operator
*/
func (a *Client) OperatorDeleteAuthorizationForOperator(params *OperatorDeleteAuthorizationForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorDeleteAuthorizationForOperatorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorDeleteAuthorizationForOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_DeleteAuthorizationForOperator",
		Method:             "DELETE",
		PathPattern:        "/Operator/{operatorGuid}/Authorization/{authorizationType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorDeleteAuthorizationForOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorDeleteAuthorizationForOperatorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_DeleteAuthorizationForOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorDeleteDutyScheduleFromOperator deletes the specified duty schedule of the specified operator
*/
func (a *Client) OperatorDeleteDutyScheduleFromOperator(params *OperatorDeleteDutyScheduleFromOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorDeleteDutyScheduleFromOperatorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorDeleteDutyScheduleFromOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_DeleteDutyScheduleFromOperator",
		Method:             "DELETE",
		PathPattern:        "/Operator/{operatorGuid}/DutySchedule/{dutyScheduleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorDeleteDutyScheduleFromOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorDeleteDutyScheduleFromOperatorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_DeleteDutyScheduleFromOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorDeleteOperator deletes an existing operator
*/
func (a *Client) OperatorDeleteOperator(params *OperatorDeleteOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorDeleteOperatorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorDeleteOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_DeleteOperator",
		Method:             "DELETE",
		PathPattern:        "/Operator/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorDeleteOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorDeleteOperatorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_DeleteOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGetAllOperators gets a list of all operators
*/
func (a *Client) OperatorGetAllOperators(params *OperatorGetAllOperatorsParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetAllOperatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGetAllOperatorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_GetAllOperators",
		Method:             "GET",
		PathPattern:        "/Operator",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGetAllOperatorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGetAllOperatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_GetAllOperators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGetAuthorizationsForOperator gets all authorizations for the specified operator
*/
func (a *Client) OperatorGetAuthorizationsForOperator(params *OperatorGetAuthorizationsForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetAuthorizationsForOperatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGetAuthorizationsForOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_GetAuthorizationsForOperator",
		Method:             "GET",
		PathPattern:        "/Operator/{operatorGuid}/Authorization",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGetAuthorizationsForOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGetAuthorizationsForOperatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_GetAuthorizationsForOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGetDutyScheduleForOperator gets the duty schedules for an specified operator
*/
func (a *Client) OperatorGetDutyScheduleForOperator(params *OperatorGetDutyScheduleForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetDutyScheduleForOperatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGetDutyScheduleForOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_GetDutyScheduleForOperator",
		Method:             "GET",
		PathPattern:        "/Operator/{operatorGuid}/DutySchedule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGetDutyScheduleForOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGetDutyScheduleForOperatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_GetDutyScheduleForOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGetOperator gets the details of the operator with the provided operator Guid
*/
func (a *Client) OperatorGetOperator(params *OperatorGetOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetOperatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGetOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_GetOperator",
		Method:             "GET",
		PathPattern:        "/Operator/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGetOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGetOperatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_GetOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGetOperatorGroupsForOperator gets a list of all operator groups for the specified operator
*/
func (a *Client) OperatorGetOperatorGroupsForOperator(params *OperatorGetOperatorGroupsForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGetOperatorGroupsForOperatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGetOperatorGroupsForOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_GetOperatorGroupsForOperator",
		Method:             "GET",
		PathPattern:        "/Operator/{operatorGuid}/OperatorGroups",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGetOperatorGroupsForOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGetOperatorGroupsForOperatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_GetOperatorGroupsForOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorPostAuthorizationForOperator assigns the specified authorization to this operator
*/
func (a *Client) OperatorPostAuthorizationForOperator(params *OperatorPostAuthorizationForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorPostAuthorizationForOperatorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorPostAuthorizationForOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_PostAuthorizationForOperator",
		Method:             "POST",
		PathPattern:        "/Operator/{operatorGuid}/Authorization/{authorizationType}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorPostAuthorizationForOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorPostAuthorizationForOperatorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_PostAuthorizationForOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorUpdateDutyPeriodForOperator updates the specified duty schedule of the specified operator
*/
func (a *Client) OperatorUpdateDutyPeriodForOperator(params *OperatorUpdateDutyPeriodForOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorUpdateDutyPeriodForOperatorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorUpdateDutyPeriodForOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_UpdateDutyPeriodForOperator",
		Method:             "PUT",
		PathPattern:        "/Operator/{operatorGuid}/DutySchedule/{dutyScheduleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorUpdateDutyPeriodForOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorUpdateDutyPeriodForOperatorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_UpdateDutyPeriodForOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorUpdateOperator updates an existing operator
*/
func (a *Client) OperatorUpdateOperator(params *OperatorUpdateOperatorParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorUpdateOperatorNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorUpdateOperatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_UpdateOperator",
		Method:             "PUT",
		PathPattern:        "/Operator/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorUpdateOperatorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorUpdateOperatorNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_UpdateOperator: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorUpdateOperatorWithPatch updates an existing operator
*/
func (a *Client) OperatorUpdateOperatorWithPatch(params *OperatorUpdateOperatorWithPatchParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorUpdateOperatorWithPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorUpdateOperatorWithPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Operator_UpdateOperatorWithPatch",
		Method:             "PATCH",
		PathPattern:        "/Operator/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorUpdateOperatorWithPatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorUpdateOperatorWithPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Operator_UpdateOperatorWithPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
