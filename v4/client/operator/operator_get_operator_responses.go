// Code generated by go-swagger; DO NOT EDIT.

package operator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// OperatorGetOperatorReader is a Reader for the OperatorGetOperator structure.
type OperatorGetOperatorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OperatorGetOperatorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOperatorGetOperatorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOperatorGetOperatorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOperatorGetOperatorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOperatorGetOperatorOK creates a OperatorGetOperatorOK with default headers values
func NewOperatorGetOperatorOK() *OperatorGetOperatorOK {
	return &OperatorGetOperatorOK{}
}

/*OperatorGetOperatorOK handles this case with default header values.

The request completed successfully.
*/
type OperatorGetOperatorOK struct {
	Payload *models.Operator
}

func (o *OperatorGetOperatorOK) Error() string {
	return fmt.Sprintf("[GET /Operator/{operatorGuid}][%d] operatorGetOperatorOK  %+v", 200, o.Payload)
}

func (o *OperatorGetOperatorOK) GetPayload() *models.Operator {
	return o.Payload
}

func (o *OperatorGetOperatorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Operator)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOperatorGetOperatorBadRequest creates a OperatorGetOperatorBadRequest with default headers values
func NewOperatorGetOperatorBadRequest() *OperatorGetOperatorBadRequest {
	return &OperatorGetOperatorBadRequest{}
}

/*OperatorGetOperatorBadRequest handles this case with default header values.

The request failed.
*/
type OperatorGetOperatorBadRequest struct {
	Payload *models.MessageList
}

func (o *OperatorGetOperatorBadRequest) Error() string {
	return fmt.Sprintf("[GET /Operator/{operatorGuid}][%d] operatorGetOperatorBadRequest  %+v", 400, o.Payload)
}

func (o *OperatorGetOperatorBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *OperatorGetOperatorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOperatorGetOperatorNotFound creates a OperatorGetOperatorNotFound with default headers values
func NewOperatorGetOperatorNotFound() *OperatorGetOperatorNotFound {
	return &OperatorGetOperatorNotFound{}
}

/*OperatorGetOperatorNotFound handles this case with default header values.

The specified operator was not found.
*/
type OperatorGetOperatorNotFound struct {
	Payload *models.MessageList
}

func (o *OperatorGetOperatorNotFound) Error() string {
	return fmt.Sprintf("[GET /Operator/{operatorGuid}][%d] operatorGetOperatorNotFound  %+v", 404, o.Payload)
}

func (o *OperatorGetOperatorNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *OperatorGetOperatorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
