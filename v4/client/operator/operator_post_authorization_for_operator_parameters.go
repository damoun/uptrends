// Code generated by go-swagger; DO NOT EDIT.

package operator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewOperatorPostAuthorizationForOperatorParams creates a new OperatorPostAuthorizationForOperatorParams object
// with the default values initialized.
func NewOperatorPostAuthorizationForOperatorParams() *OperatorPostAuthorizationForOperatorParams {
	var ()
	return &OperatorPostAuthorizationForOperatorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOperatorPostAuthorizationForOperatorParamsWithTimeout creates a new OperatorPostAuthorizationForOperatorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOperatorPostAuthorizationForOperatorParamsWithTimeout(timeout time.Duration) *OperatorPostAuthorizationForOperatorParams {
	var ()
	return &OperatorPostAuthorizationForOperatorParams{

		timeout: timeout,
	}
}

// NewOperatorPostAuthorizationForOperatorParamsWithContext creates a new OperatorPostAuthorizationForOperatorParams object
// with the default values initialized, and the ability to set a context for a request
func NewOperatorPostAuthorizationForOperatorParamsWithContext(ctx context.Context) *OperatorPostAuthorizationForOperatorParams {
	var ()
	return &OperatorPostAuthorizationForOperatorParams{

		Context: ctx,
	}
}

// NewOperatorPostAuthorizationForOperatorParamsWithHTTPClient creates a new OperatorPostAuthorizationForOperatorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOperatorPostAuthorizationForOperatorParamsWithHTTPClient(client *http.Client) *OperatorPostAuthorizationForOperatorParams {
	var ()
	return &OperatorPostAuthorizationForOperatorParams{
		HTTPClient: client,
	}
}

/*OperatorPostAuthorizationForOperatorParams contains all the parameters to send to the API endpoint
for the operator post authorization for operator operation typically these are written to a http.Request
*/
type OperatorPostAuthorizationForOperatorParams struct {

	/*AuthorizationType
	  The type of authorization

	*/
	AuthorizationType string
	/*OperatorGUID
	  The Guid of the operator

	*/
	OperatorGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) WithTimeout(timeout time.Duration) *OperatorPostAuthorizationForOperatorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) WithContext(ctx context.Context) *OperatorPostAuthorizationForOperatorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) WithHTTPClient(client *http.Client) *OperatorPostAuthorizationForOperatorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorizationType adds the authorizationType to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) WithAuthorizationType(authorizationType string) *OperatorPostAuthorizationForOperatorParams {
	o.SetAuthorizationType(authorizationType)
	return o
}

// SetAuthorizationType adds the authorizationType to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) SetAuthorizationType(authorizationType string) {
	o.AuthorizationType = authorizationType
}

// WithOperatorGUID adds the operatorGUID to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) WithOperatorGUID(operatorGUID string) *OperatorPostAuthorizationForOperatorParams {
	o.SetOperatorGUID(operatorGUID)
	return o
}

// SetOperatorGUID adds the operatorGuid to the operator post authorization for operator params
func (o *OperatorPostAuthorizationForOperatorParams) SetOperatorGUID(operatorGUID string) {
	o.OperatorGUID = operatorGUID
}

// WriteToRequest writes these params to a swagger request
func (o *OperatorPostAuthorizationForOperatorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param authorizationType
	if err := r.SetPathParam("authorizationType", o.AuthorizationType); err != nil {
		return err
	}

	// path param operatorGuid
	if err := r.SetPathParam("operatorGuid", o.OperatorGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
