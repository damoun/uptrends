// Code generated by go-swagger; DO NOT EDIT.

package operator_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operator group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operator group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OperatorGroupAddDutyScheduleToAllMembers(params *OperatorGroupAddDutyScheduleToAllMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAddDutyScheduleToAllMembersNoContent, error)

	OperatorGroupAddOperatorToOperatorGroup(params *OperatorGroupAddOperatorToOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAddOperatorToOperatorGroupCreated, error)

	OperatorGroupAllOperatorsInGroupOffDuty(params *OperatorGroupAllOperatorsInGroupOffDutyParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAllOperatorsInGroupOffDutyNoContent, error)

	OperatorGroupAllOperatorsInGroupOnDuty(params *OperatorGroupAllOperatorsInGroupOnDutyParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAllOperatorsInGroupOnDutyNoContent, error)

	OperatorGroupCreateOperatorGroup(params *OperatorGroupCreateOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupCreateOperatorGroupCreated, error)

	OperatorGroupDeleteOperatorGroup(params *OperatorGroupDeleteOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupDeleteOperatorGroupNoContent, error)

	OperatorGroupGetAllOperatorGroups(params *OperatorGroupGetAllOperatorGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetAllOperatorGroupsOK, error)

	OperatorGroupGetOperatorGroup(params *OperatorGroupGetOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetOperatorGroupOK, error)

	OperatorGroupGetOperatorGroupMembers(params *OperatorGroupGetOperatorGroupMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetOperatorGroupMembersOK, error)

	OperatorGroupRemoveOperatorFromOperatorGroup(params *OperatorGroupRemoveOperatorFromOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupRemoveOperatorFromOperatorGroupNoContent, error)

	OperatorGroupUpdateOperatorGroup(params *OperatorGroupUpdateOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupUpdateOperatorGroupNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OperatorGroupAddDutyScheduleToAllMembers adds the provided duty schedule to all operators in the group specified
*/
func (a *Client) OperatorGroupAddDutyScheduleToAllMembers(params *OperatorGroupAddDutyScheduleToAllMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAddDutyScheduleToAllMembersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupAddDutyScheduleToAllMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_AddDutyScheduleToAllMembers",
		Method:             "POST",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/DutySchedule/AddDutyScheduleForAllMembers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupAddDutyScheduleToAllMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupAddDutyScheduleToAllMembersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_AddDutyScheduleToAllMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupAddOperatorToOperatorGroup adds the specified operator to the operator group
*/
func (a *Client) OperatorGroupAddOperatorToOperatorGroup(params *OperatorGroupAddOperatorToOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAddOperatorToOperatorGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupAddOperatorToOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_AddOperatorToOperatorGroup",
		Method:             "POST",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/Member/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupAddOperatorToOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupAddOperatorToOperatorGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_AddOperatorToOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupAllOperatorsInGroupOffDuty sets the on duty flag to off for all operators that are a member of the operator group specified by the operator group GUID
*/
func (a *Client) OperatorGroupAllOperatorsInGroupOffDuty(params *OperatorGroupAllOperatorsInGroupOffDutyParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAllOperatorsInGroupOffDutyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupAllOperatorsInGroupOffDutyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_AllOperatorsInGroupOffDuty",
		Method:             "POST",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/AllOperatorsOffDuty",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupAllOperatorsInGroupOffDutyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupAllOperatorsInGroupOffDutyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_AllOperatorsInGroupOffDuty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupAllOperatorsInGroupOnDuty sets the on duty flag to on for all operators that are a member of the operator group specified by the operator group GUID
*/
func (a *Client) OperatorGroupAllOperatorsInGroupOnDuty(params *OperatorGroupAllOperatorsInGroupOnDutyParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupAllOperatorsInGroupOnDutyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupAllOperatorsInGroupOnDutyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_AllOperatorsInGroupOnDuty",
		Method:             "POST",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/AllOperatorsOnDuty",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupAllOperatorsInGroupOnDutyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupAllOperatorsInGroupOnDutyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_AllOperatorsInGroupOnDuty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupCreateOperatorGroup creates a new operator group
*/
func (a *Client) OperatorGroupCreateOperatorGroup(params *OperatorGroupCreateOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupCreateOperatorGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupCreateOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_CreateOperatorGroup",
		Method:             "POST",
		PathPattern:        "/OperatorGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupCreateOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupCreateOperatorGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_CreateOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupDeleteOperatorGroup deletes the specified operator group
*/
func (a *Client) OperatorGroupDeleteOperatorGroup(params *OperatorGroupDeleteOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupDeleteOperatorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupDeleteOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_DeleteOperatorGroup",
		Method:             "DELETE",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupDeleteOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupDeleteOperatorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_DeleteOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupGetAllOperatorGroups gets all operator groups
*/
func (a *Client) OperatorGroupGetAllOperatorGroups(params *OperatorGroupGetAllOperatorGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetAllOperatorGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupGetAllOperatorGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_GetAllOperatorGroups",
		Method:             "GET",
		PathPattern:        "/OperatorGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupGetAllOperatorGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupGetAllOperatorGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_GetAllOperatorGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupGetOperatorGroup gets the details of a operator group
*/
func (a *Client) OperatorGroupGetOperatorGroup(params *OperatorGroupGetOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetOperatorGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupGetOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_GetOperatorGroup",
		Method:             "GET",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupGetOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupGetOperatorGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_GetOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupGetOperatorGroupMembers gets a list of all members of an operator group
*/
func (a *Client) OperatorGroupGetOperatorGroupMembers(params *OperatorGroupGetOperatorGroupMembersParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupGetOperatorGroupMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupGetOperatorGroupMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_GetOperatorGroupMembers",
		Method:             "GET",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/Member",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupGetOperatorGroupMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupGetOperatorGroupMembersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_GetOperatorGroupMembers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupRemoveOperatorFromOperatorGroup removes the specified operator from the operator group
*/
func (a *Client) OperatorGroupRemoveOperatorFromOperatorGroup(params *OperatorGroupRemoveOperatorFromOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupRemoveOperatorFromOperatorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupRemoveOperatorFromOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_RemoveOperatorFromOperatorGroup",
		Method:             "DELETE",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}/Member/{operatorGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupRemoveOperatorFromOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupRemoveOperatorFromOperatorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_RemoveOperatorFromOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperatorGroupUpdateOperatorGroup updates the operator group with the Guid specified
*/
func (a *Client) OperatorGroupUpdateOperatorGroup(params *OperatorGroupUpdateOperatorGroupParams, authInfo runtime.ClientAuthInfoWriter) (*OperatorGroupUpdateOperatorGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperatorGroupUpdateOperatorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "OperatorGroup_UpdateOperatorGroup",
		Method:             "PUT",
		PathPattern:        "/OperatorGroup/{operatorGroupGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OperatorGroupUpdateOperatorGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperatorGroupUpdateOperatorGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OperatorGroup_UpdateOperatorGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
