// Code generated by go-swagger; DO NOT EDIT.

package public_status_page

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new public status page API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for public status page API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	PublicStatusPageAddAuthorizationToPublicStatusPage(params *PublicStatusPageAddAuthorizationToPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageAddAuthorizationToPublicStatusPageOK, error)

	PublicStatusPageDeletePublicStatusPage(params *PublicStatusPageDeletePublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageDeletePublicStatusPageNoContent, error)

	PublicStatusPageGetAuthorizationsForPublicStatusPage(params *PublicStatusPageGetAuthorizationsForPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageGetAuthorizationsForPublicStatusPageOK, error)

	PublicStatusPageGetPublicStatusPage(params *PublicStatusPageGetPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageGetPublicStatusPageOK, error)

	PublicStatusPageGetPublicStatusPages(params *PublicStatusPageGetPublicStatusPagesParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageGetPublicStatusPagesOK, error)

	PublicStatusPagePatchPublicStatusPage(params *PublicStatusPagePatchPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPagePatchPublicStatusPageNoContent, error)

	PublicStatusPagePostPublicStatusPage(params *PublicStatusPagePostPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPagePostPublicStatusPageCreated, error)

	PublicStatusPagePutPublicStatusPage(params *PublicStatusPagePutPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPagePutPublicStatusPageNoContent, error)

	PublicStatusPageRemoveAuthorizationFromPublicStatusPage(params *PublicStatusPageRemoveAuthorizationFromPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageRemoveAuthorizationFromPublicStatusPageNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PublicStatusPageAddAuthorizationToPublicStatusPage creates a new authorization for the specified public status page

  The AuthorizationId attribute should be omitted in the request body. The newly created authorization will be returned in the response. An authorization should be granted to either an individual operator, or an operator group. Therefore, either specify the OperatorGuid attribute or the OperatorGroupGuid attribute.
*/
func (a *Client) PublicStatusPageAddAuthorizationToPublicStatusPage(params *PublicStatusPageAddAuthorizationToPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageAddAuthorizationToPublicStatusPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPageAddAuthorizationToPublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_AddAuthorizationToPublicStatusPage",
		Method:             "POST",
		PathPattern:        "/PublicStatusPage/{publicStatusPageGuid}/Authorization",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPageAddAuthorizationToPublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPageAddAuthorizationToPublicStatusPageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_AddAuthorizationToPublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPageDeletePublicStatusPage deletes the definition of the specified public status page
*/
func (a *Client) PublicStatusPageDeletePublicStatusPage(params *PublicStatusPageDeletePublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageDeletePublicStatusPageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPageDeletePublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_DeletePublicStatusPage",
		Method:             "DELETE",
		PathPattern:        "/PublicStatusPage/{publicStatusPageGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPageDeletePublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPageDeletePublicStatusPageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_DeletePublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPageGetAuthorizationsForPublicStatusPage returns all authorizations for the specified public status page
*/
func (a *Client) PublicStatusPageGetAuthorizationsForPublicStatusPage(params *PublicStatusPageGetAuthorizationsForPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageGetAuthorizationsForPublicStatusPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPageGetAuthorizationsForPublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_GetAuthorizationsForPublicStatusPage",
		Method:             "GET",
		PathPattern:        "/PublicStatusPage/{publicStatusPageGuid}/Authorization",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPageGetAuthorizationsForPublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPageGetAuthorizationsForPublicStatusPageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_GetAuthorizationsForPublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPageGetPublicStatusPage returns the definition of the specified public status page
*/
func (a *Client) PublicStatusPageGetPublicStatusPage(params *PublicStatusPageGetPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageGetPublicStatusPageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPageGetPublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_GetPublicStatusPage",
		Method:             "GET",
		PathPattern:        "/PublicStatusPage/{publicStatusPageGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPageGetPublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPageGetPublicStatusPageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_GetPublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPageGetPublicStatusPages returns the definition of all public status pages available in the account
*/
func (a *Client) PublicStatusPageGetPublicStatusPages(params *PublicStatusPageGetPublicStatusPagesParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageGetPublicStatusPagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPageGetPublicStatusPagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_GetPublicStatusPages",
		Method:             "GET",
		PathPattern:        "/PublicStatusPage",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPageGetPublicStatusPagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPageGetPublicStatusPagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_GetPublicStatusPages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPagePatchPublicStatusPage partiallies updates the definition of the specified public status page

  This methods accepts parts of a public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.
*/
func (a *Client) PublicStatusPagePatchPublicStatusPage(params *PublicStatusPagePatchPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPagePatchPublicStatusPageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPagePatchPublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_PatchPublicStatusPage",
		Method:             "PATCH",
		PathPattern:        "/PublicStatusPage/{publicStatusPageGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPagePatchPublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPagePatchPublicStatusPageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_PatchPublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPagePostPublicStatusPage creates a new public status page
*/
func (a *Client) PublicStatusPagePostPublicStatusPage(params *PublicStatusPagePostPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPagePostPublicStatusPageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPagePostPublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_PostPublicStatusPage",
		Method:             "POST",
		PathPattern:        "/PublicStatusPage",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPagePostPublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPagePostPublicStatusPageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_PostPublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPagePutPublicStatusPage updates the definition of the specified public status page

  This methods only accepts a complete public status page definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.
*/
func (a *Client) PublicStatusPagePutPublicStatusPage(params *PublicStatusPagePutPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPagePutPublicStatusPageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPagePutPublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_PutPublicStatusPage",
		Method:             "PUT",
		PathPattern:        "/PublicStatusPage/{publicStatusPageGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPagePutPublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPagePutPublicStatusPageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_PutPublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PublicStatusPageRemoveAuthorizationFromPublicStatusPage removes an authorization from a public status page
*/
func (a *Client) PublicStatusPageRemoveAuthorizationFromPublicStatusPage(params *PublicStatusPageRemoveAuthorizationFromPublicStatusPageParams, authInfo runtime.ClientAuthInfoWriter) (*PublicStatusPageRemoveAuthorizationFromPublicStatusPageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicStatusPageRemoveAuthorizationFromPublicStatusPageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicStatusPage_RemoveAuthorizationFromPublicStatusPage",
		Method:             "DELETE",
		PathPattern:        "/PublicStatusPage/{publicStatusPageGuid}/Authorization/{authorizationGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PublicStatusPageRemoveAuthorizationFromPublicStatusPageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PublicStatusPageRemoveAuthorizationFromPublicStatusPageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PublicStatusPage_RemoveAuthorizationFromPublicStatusPage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
