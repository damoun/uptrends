// Code generated by go-swagger; DO NOT EDIT.

package scheduled_report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scheduled report API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scheduled report API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ScheduledReportCreateScheduledReport(params *ScheduledReportCreateScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportCreateScheduledReportCreated, error)

	ScheduledReportDeleteSpecifiedScheduledReport(params *ScheduledReportDeleteSpecifiedScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportDeleteSpecifiedScheduledReportNoContent, error)

	ScheduledReportGetAllScheduledReports(params *ScheduledReportGetAllScheduledReportsParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportGetAllScheduledReportsOK, error)

	ScheduledReportGetSpecifiedScheduledReport(params *ScheduledReportGetSpecifiedScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportGetSpecifiedScheduledReportOK, error)

	ScheduledReportPartiallyUpdateScheduledReport(params *ScheduledReportPartiallyUpdateScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportPartiallyUpdateScheduledReportNoContent, error)

	ScheduledReportUpdateScheduledReport(params *ScheduledReportUpdateScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportUpdateScheduledReportNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ScheduledReportCreateScheduledReport creates a new scheduled report
*/
func (a *Client) ScheduledReportCreateScheduledReport(params *ScheduledReportCreateScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportCreateScheduledReportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledReportCreateScheduledReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScheduledReport_CreateScheduledReport",
		Method:             "POST",
		PathPattern:        "/ScheduledReport",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledReportCreateScheduledReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduledReportCreateScheduledReportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduledReport_CreateScheduledReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduledReportDeleteSpecifiedScheduledReport deletes the specified scheduled report
*/
func (a *Client) ScheduledReportDeleteSpecifiedScheduledReport(params *ScheduledReportDeleteSpecifiedScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportDeleteSpecifiedScheduledReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledReportDeleteSpecifiedScheduledReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScheduledReport_DeleteSpecifiedScheduledReport",
		Method:             "DELETE",
		PathPattern:        "/ScheduledReport/{scheduledReportGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledReportDeleteSpecifiedScheduledReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduledReportDeleteSpecifiedScheduledReportNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduledReport_DeleteSpecifiedScheduledReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduledReportGetAllScheduledReports returns data for all scheduled reports
*/
func (a *Client) ScheduledReportGetAllScheduledReports(params *ScheduledReportGetAllScheduledReportsParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportGetAllScheduledReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledReportGetAllScheduledReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScheduledReport_GetAllScheduledReports",
		Method:             "GET",
		PathPattern:        "/ScheduledReport",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledReportGetAllScheduledReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduledReportGetAllScheduledReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduledReport_GetAllScheduledReports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduledReportGetSpecifiedScheduledReport returns data for the specified scheduled report
*/
func (a *Client) ScheduledReportGetSpecifiedScheduledReport(params *ScheduledReportGetSpecifiedScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportGetSpecifiedScheduledReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledReportGetSpecifiedScheduledReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScheduledReport_GetSpecifiedScheduledReport",
		Method:             "GET",
		PathPattern:        "/ScheduledReport/{scheduledReportGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledReportGetSpecifiedScheduledReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduledReportGetSpecifiedScheduledReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduledReport_GetSpecifiedScheduledReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduledReportPartiallyUpdateScheduledReport partiallies update the specified scheduled report
*/
func (a *Client) ScheduledReportPartiallyUpdateScheduledReport(params *ScheduledReportPartiallyUpdateScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportPartiallyUpdateScheduledReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledReportPartiallyUpdateScheduledReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScheduledReport_PartiallyUpdateScheduledReport",
		Method:             "PATCH",
		PathPattern:        "/ScheduledReport/{scheduledReportGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledReportPartiallyUpdateScheduledReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduledReportPartiallyUpdateScheduledReportNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduledReport_PartiallyUpdateScheduledReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ScheduledReportUpdateScheduledReport updates the specified scheduled report
*/
func (a *Client) ScheduledReportUpdateScheduledReport(params *ScheduledReportUpdateScheduledReportParams, authInfo runtime.ClientAuthInfoWriter) (*ScheduledReportUpdateScheduledReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduledReportUpdateScheduledReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ScheduledReport_UpdateScheduledReport",
		Method:             "PUT",
		PathPattern:        "/ScheduledReport/{scheduledReportGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduledReportUpdateScheduledReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduledReportUpdateScheduledReportNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScheduledReport_UpdateScheduledReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
