// Code generated by go-swagger; DO NOT EDIT.

package scheduled_report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// NewScheduledReportCreateScheduledReportParams creates a new ScheduledReportCreateScheduledReportParams object
// with the default values initialized.
func NewScheduledReportCreateScheduledReportParams() *ScheduledReportCreateScheduledReportParams {
	var ()
	return &ScheduledReportCreateScheduledReportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewScheduledReportCreateScheduledReportParamsWithTimeout creates a new ScheduledReportCreateScheduledReportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewScheduledReportCreateScheduledReportParamsWithTimeout(timeout time.Duration) *ScheduledReportCreateScheduledReportParams {
	var ()
	return &ScheduledReportCreateScheduledReportParams{

		timeout: timeout,
	}
}

// NewScheduledReportCreateScheduledReportParamsWithContext creates a new ScheduledReportCreateScheduledReportParams object
// with the default values initialized, and the ability to set a context for a request
func NewScheduledReportCreateScheduledReportParamsWithContext(ctx context.Context) *ScheduledReportCreateScheduledReportParams {
	var ()
	return &ScheduledReportCreateScheduledReportParams{

		Context: ctx,
	}
}

// NewScheduledReportCreateScheduledReportParamsWithHTTPClient creates a new ScheduledReportCreateScheduledReportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewScheduledReportCreateScheduledReportParamsWithHTTPClient(client *http.Client) *ScheduledReportCreateScheduledReportParams {
	var ()
	return &ScheduledReportCreateScheduledReportParams{
		HTTPClient: client,
	}
}

/*ScheduledReportCreateScheduledReportParams contains all the parameters to send to the API endpoint
for the scheduled report create scheduled report operation typically these are written to a http.Request
*/
type ScheduledReportCreateScheduledReportParams struct {

	/*ScheduledReport
	  The details for the scheduled report.

	*/
	ScheduledReport *models.ScheduledReport

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) WithTimeout(timeout time.Duration) *ScheduledReportCreateScheduledReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) WithContext(ctx context.Context) *ScheduledReportCreateScheduledReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) WithHTTPClient(client *http.Client) *ScheduledReportCreateScheduledReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithScheduledReport adds the scheduledReport to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) WithScheduledReport(scheduledReport *models.ScheduledReport) *ScheduledReportCreateScheduledReportParams {
	o.SetScheduledReport(scheduledReport)
	return o
}

// SetScheduledReport adds the scheduledReport to the scheduled report create scheduled report params
func (o *ScheduledReportCreateScheduledReportParams) SetScheduledReport(scheduledReport *models.ScheduledReport) {
	o.ScheduledReport = scheduledReport
}

// WriteToRequest writes these params to a swagger request
func (o *ScheduledReportCreateScheduledReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ScheduledReport != nil {
		if err := r.SetBodyParam(o.ScheduledReport); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
