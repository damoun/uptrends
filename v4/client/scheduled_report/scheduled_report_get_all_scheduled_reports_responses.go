// Code generated by go-swagger; DO NOT EDIT.

package scheduled_report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// ScheduledReportGetAllScheduledReportsReader is a Reader for the ScheduledReportGetAllScheduledReports structure.
type ScheduledReportGetAllScheduledReportsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ScheduledReportGetAllScheduledReportsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewScheduledReportGetAllScheduledReportsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewScheduledReportGetAllScheduledReportsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewScheduledReportGetAllScheduledReportsOK creates a ScheduledReportGetAllScheduledReportsOK with default headers values
func NewScheduledReportGetAllScheduledReportsOK() *ScheduledReportGetAllScheduledReportsOK {
	return &ScheduledReportGetAllScheduledReportsOK{}
}

/*ScheduledReportGetAllScheduledReportsOK handles this case with default header values.

The request completed successfully.
*/
type ScheduledReportGetAllScheduledReportsOK struct {
	Payload []*models.ScheduledReport
}

func (o *ScheduledReportGetAllScheduledReportsOK) Error() string {
	return fmt.Sprintf("[GET /ScheduledReport][%d] scheduledReportGetAllScheduledReportsOK  %+v", 200, o.Payload)
}

func (o *ScheduledReportGetAllScheduledReportsOK) GetPayload() []*models.ScheduledReport {
	return o.Payload
}

func (o *ScheduledReportGetAllScheduledReportsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewScheduledReportGetAllScheduledReportsBadRequest creates a ScheduledReportGetAllScheduledReportsBadRequest with default headers values
func NewScheduledReportGetAllScheduledReportsBadRequest() *ScheduledReportGetAllScheduledReportsBadRequest {
	return &ScheduledReportGetAllScheduledReportsBadRequest{}
}

/*ScheduledReportGetAllScheduledReportsBadRequest handles this case with default header values.

The request failed.
*/
type ScheduledReportGetAllScheduledReportsBadRequest struct {
	Payload *models.MessageList
}

func (o *ScheduledReportGetAllScheduledReportsBadRequest) Error() string {
	return fmt.Sprintf("[GET /ScheduledReport][%d] scheduledReportGetAllScheduledReportsBadRequest  %+v", 400, o.Payload)
}

func (o *ScheduledReportGetAllScheduledReportsBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *ScheduledReportGetAllScheduledReportsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
