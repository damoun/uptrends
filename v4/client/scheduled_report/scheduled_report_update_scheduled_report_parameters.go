// Code generated by go-swagger; DO NOT EDIT.

package scheduled_report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// NewScheduledReportUpdateScheduledReportParams creates a new ScheduledReportUpdateScheduledReportParams object
// with the default values initialized.
func NewScheduledReportUpdateScheduledReportParams() *ScheduledReportUpdateScheduledReportParams {
	var ()
	return &ScheduledReportUpdateScheduledReportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewScheduledReportUpdateScheduledReportParamsWithTimeout creates a new ScheduledReportUpdateScheduledReportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewScheduledReportUpdateScheduledReportParamsWithTimeout(timeout time.Duration) *ScheduledReportUpdateScheduledReportParams {
	var ()
	return &ScheduledReportUpdateScheduledReportParams{

		timeout: timeout,
	}
}

// NewScheduledReportUpdateScheduledReportParamsWithContext creates a new ScheduledReportUpdateScheduledReportParams object
// with the default values initialized, and the ability to set a context for a request
func NewScheduledReportUpdateScheduledReportParamsWithContext(ctx context.Context) *ScheduledReportUpdateScheduledReportParams {
	var ()
	return &ScheduledReportUpdateScheduledReportParams{

		Context: ctx,
	}
}

// NewScheduledReportUpdateScheduledReportParamsWithHTTPClient creates a new ScheduledReportUpdateScheduledReportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewScheduledReportUpdateScheduledReportParamsWithHTTPClient(client *http.Client) *ScheduledReportUpdateScheduledReportParams {
	var ()
	return &ScheduledReportUpdateScheduledReportParams{
		HTTPClient: client,
	}
}

/*ScheduledReportUpdateScheduledReportParams contains all the parameters to send to the API endpoint
for the scheduled report update scheduled report operation typically these are written to a http.Request
*/
type ScheduledReportUpdateScheduledReportParams struct {

	/*ScheduledReport
	  The details for the scheduled report.

	*/
	ScheduledReport *models.ScheduledReport
	/*ScheduledReportGUID
	  The guid of the specified scheduled report.

	*/
	ScheduledReportGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) WithTimeout(timeout time.Duration) *ScheduledReportUpdateScheduledReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) WithContext(ctx context.Context) *ScheduledReportUpdateScheduledReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) WithHTTPClient(client *http.Client) *ScheduledReportUpdateScheduledReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithScheduledReport adds the scheduledReport to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) WithScheduledReport(scheduledReport *models.ScheduledReport) *ScheduledReportUpdateScheduledReportParams {
	o.SetScheduledReport(scheduledReport)
	return o
}

// SetScheduledReport adds the scheduledReport to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) SetScheduledReport(scheduledReport *models.ScheduledReport) {
	o.ScheduledReport = scheduledReport
}

// WithScheduledReportGUID adds the scheduledReportGUID to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) WithScheduledReportGUID(scheduledReportGUID string) *ScheduledReportUpdateScheduledReportParams {
	o.SetScheduledReportGUID(scheduledReportGUID)
	return o
}

// SetScheduledReportGUID adds the scheduledReportGuid to the scheduled report update scheduled report params
func (o *ScheduledReportUpdateScheduledReportParams) SetScheduledReportGUID(scheduledReportGUID string) {
	o.ScheduledReportGUID = scheduledReportGUID
}

// WriteToRequest writes these params to a swagger request
func (o *ScheduledReportUpdateScheduledReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ScheduledReport != nil {
		if err := r.SetBodyParam(o.ScheduledReport); err != nil {
			return err
		}
	}

	// path param scheduledReportGuid
	if err := r.SetPathParam("scheduledReportGuid", o.ScheduledReportGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
