// Code generated by go-swagger; DO NOT EDIT.

package sla

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sla API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sla API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SLACreateSLA(params *SLACreateSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLACreateSLACreated, error)

	SLADeleteExclusionPeriod(params *SLADeleteExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLADeleteExclusionPeriodNoContent, error)

	SLADeleteSLA(params *SLADeleteSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLADeleteSLANoContent, error)

	SLAGetExclusionPeriod(params *SLAGetExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetExclusionPeriodOK, error)

	SLAGetExclusionPeriods(params *SLAGetExclusionPeriodsParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetExclusionPeriodsOK, error)

	SLAGetSLA(params *SLAGetSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetSLAOK, error)

	SLAGetSlas(params *SLAGetSlasParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetSlasOK, error)

	SLAPatchExclusionPeriod(params *SLAPatchExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPatchExclusionPeriodNoContent, error)

	SLAPatchSLA(params *SLAPatchSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPatchSLANoContent, error)

	SLAPostExclusionPeriod(params *SLAPostExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPostExclusionPeriodCreated, error)

	SLAPutExclusionPeriod(params *SLAPutExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPutExclusionPeriodNoContent, error)

	SLAPutSLA(params *SLAPutSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPutSLANoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SLACreateSLA creates a new SLA
*/
func (a *Client) SLACreateSLA(params *SLACreateSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLACreateSLACreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLACreateSLAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_CreateSla",
		Method:             "POST",
		PathPattern:        "/Sla",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLACreateSLAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLACreateSLACreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_CreateSla: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLADeleteExclusionPeriod deletes the specified exclusion period for the specified SLA
*/
func (a *Client) SLADeleteExclusionPeriod(params *SLADeleteExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLADeleteExclusionPeriodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLADeleteExclusionPeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_DeleteExclusionPeriod",
		Method:             "DELETE",
		PathPattern:        "/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLADeleteExclusionPeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLADeleteExclusionPeriodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_DeleteExclusionPeriod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLADeleteSLA deletes the specified SLA
*/
func (a *Client) SLADeleteSLA(params *SLADeleteSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLADeleteSLANoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLADeleteSLAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_DeleteSla",
		Method:             "DELETE",
		PathPattern:        "/Sla/{slaGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLADeleteSLAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLADeleteSLANoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_DeleteSla: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAGetExclusionPeriod gets the specified exclusion period for the specified SLA
*/
func (a *Client) SLAGetExclusionPeriod(params *SLAGetExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetExclusionPeriodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAGetExclusionPeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_GetExclusionPeriod",
		Method:             "GET",
		PathPattern:        "/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAGetExclusionPeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAGetExclusionPeriodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_GetExclusionPeriod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAGetExclusionPeriods gets a list of all exclusion periods for the specified SLA
*/
func (a *Client) SLAGetExclusionPeriods(params *SLAGetExclusionPeriodsParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetExclusionPeriodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAGetExclusionPeriodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_GetExclusionPeriods",
		Method:             "GET",
		PathPattern:        "/Sla/{slaGuid}/ExclusionPeriod",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAGetExclusionPeriodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAGetExclusionPeriodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_GetExclusionPeriods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAGetSLA gets the specified SLA definition
*/
func (a *Client) SLAGetSLA(params *SLAGetSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetSLAOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAGetSLAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_GetSla",
		Method:             "GET",
		PathPattern:        "/Sla/{slaGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAGetSLAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAGetSLAOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_GetSla: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAGetSlas gets a list of all SLA definitions
*/
func (a *Client) SLAGetSlas(params *SLAGetSlasParams, authInfo runtime.ClientAuthInfoWriter) (*SLAGetSlasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAGetSlasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_GetSlas",
		Method:             "GET",
		PathPattern:        "/Sla",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAGetSlasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAGetSlasOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_GetSlas: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAPatchExclusionPeriod partiallies updates the specified exclusion period for the specified SLA
*/
func (a *Client) SLAPatchExclusionPeriod(params *SLAPatchExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPatchExclusionPeriodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAPatchExclusionPeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_PatchExclusionPeriod",
		Method:             "PATCH",
		PathPattern:        "/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAPatchExclusionPeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAPatchExclusionPeriodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_PatchExclusionPeriod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAPatchSLA partiallies updates the definition of the specified SLA

  This methods accepts parts of a SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back these changes only using this PATCH method.
*/
func (a *Client) SLAPatchSLA(params *SLAPatchSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPatchSLANoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAPatchSLAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_PatchSla",
		Method:             "PATCH",
		PathPattern:        "/Sla/{slaGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAPatchSLAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAPatchSLANoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_PatchSla: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAPostExclusionPeriod creates a new exclusion period for the specified SLA
*/
func (a *Client) SLAPostExclusionPeriod(params *SLAPostExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPostExclusionPeriodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAPostExclusionPeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_PostExclusionPeriod",
		Method:             "POST",
		PathPattern:        "/Sla/{slaGuid}/ExclusionPeriod",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAPostExclusionPeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAPostExclusionPeriodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_PostExclusionPeriod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAPutExclusionPeriod updates the specified exclusion period for the specified SLA
*/
func (a *Client) SLAPutExclusionPeriod(params *SLAPutExclusionPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPutExclusionPeriodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAPutExclusionPeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_PutExclusionPeriod",
		Method:             "PUT",
		PathPattern:        "/Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAPutExclusionPeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAPutExclusionPeriodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_PutExclusionPeriod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SLAPutSLA updates the definition of the specified SLA

  This methods only accepts a complete SLA definition. We recommend retrieving the existing definition first (using the GET method). You can then process the changes you want to make and send back the updated definition using this PUT method.
*/
func (a *Client) SLAPutSLA(params *SLAPutSLAParams, authInfo runtime.ClientAuthInfoWriter) (*SLAPutSLANoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSLAPutSLAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Sla_PutSla",
		Method:             "PUT",
		PathPattern:        "/Sla/{slaGuid}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SLAPutSLAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SLAPutSLANoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Sla_PutSla: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
