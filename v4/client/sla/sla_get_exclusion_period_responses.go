// Code generated by go-swagger; DO NOT EDIT.

package sla

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// SLAGetExclusionPeriodReader is a Reader for the SLAGetExclusionPeriod structure.
type SLAGetExclusionPeriodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SLAGetExclusionPeriodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSLAGetExclusionPeriodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSLAGetExclusionPeriodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSLAGetExclusionPeriodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSLAGetExclusionPeriodOK creates a SLAGetExclusionPeriodOK with default headers values
func NewSLAGetExclusionPeriodOK() *SLAGetExclusionPeriodOK {
	return &SLAGetExclusionPeriodOK{}
}

/*SLAGetExclusionPeriodOK handles this case with default header values.

The request completed successfully.
*/
type SLAGetExclusionPeriodOK struct {
	Payload *models.ExclusionPeriod
}

func (o *SLAGetExclusionPeriodOK) Error() string {
	return fmt.Sprintf("[GET /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaGetExclusionPeriodOK  %+v", 200, o.Payload)
}

func (o *SLAGetExclusionPeriodOK) GetPayload() *models.ExclusionPeriod {
	return o.Payload
}

func (o *SLAGetExclusionPeriodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExclusionPeriod)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSLAGetExclusionPeriodBadRequest creates a SLAGetExclusionPeriodBadRequest with default headers values
func NewSLAGetExclusionPeriodBadRequest() *SLAGetExclusionPeriodBadRequest {
	return &SLAGetExclusionPeriodBadRequest{}
}

/*SLAGetExclusionPeriodBadRequest handles this case with default header values.

The request failed.
*/
type SLAGetExclusionPeriodBadRequest struct {
	Payload *models.MessageList
}

func (o *SLAGetExclusionPeriodBadRequest) Error() string {
	return fmt.Sprintf("[GET /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaGetExclusionPeriodBadRequest  %+v", 400, o.Payload)
}

func (o *SLAGetExclusionPeriodBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *SLAGetExclusionPeriodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSLAGetExclusionPeriodNotFound creates a SLAGetExclusionPeriodNotFound with default headers values
func NewSLAGetExclusionPeriodNotFound() *SLAGetExclusionPeriodNotFound {
	return &SLAGetExclusionPeriodNotFound{}
}

/*SLAGetExclusionPeriodNotFound handles this case with default header values.

The specified SLA does not exist.
or
The specified exclusion period does not exist.
*/
type SLAGetExclusionPeriodNotFound struct {
	Payload *models.MessageList
}

func (o *SLAGetExclusionPeriodNotFound) Error() string {
	return fmt.Sprintf("[GET /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaGetExclusionPeriodNotFound  %+v", 404, o.Payload)
}

func (o *SLAGetExclusionPeriodNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *SLAGetExclusionPeriodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
