// Code generated by go-swagger; DO NOT EDIT.

package sla

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// SLAPatchExclusionPeriodReader is a Reader for the SLAPatchExclusionPeriod structure.
type SLAPatchExclusionPeriodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SLAPatchExclusionPeriodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSLAPatchExclusionPeriodNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSLAPatchExclusionPeriodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSLAPatchExclusionPeriodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSLAPatchExclusionPeriodNoContent creates a SLAPatchExclusionPeriodNoContent with default headers values
func NewSLAPatchExclusionPeriodNoContent() *SLAPatchExclusionPeriodNoContent {
	return &SLAPatchExclusionPeriodNoContent{}
}

/*SLAPatchExclusionPeriodNoContent handles this case with default header values.

The request completed successfully.
*/
type SLAPatchExclusionPeriodNoContent struct {
}

func (o *SLAPatchExclusionPeriodNoContent) Error() string {
	return fmt.Sprintf("[PATCH /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaPatchExclusionPeriodNoContent ", 204)
}

func (o *SLAPatchExclusionPeriodNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSLAPatchExclusionPeriodBadRequest creates a SLAPatchExclusionPeriodBadRequest with default headers values
func NewSLAPatchExclusionPeriodBadRequest() *SLAPatchExclusionPeriodBadRequest {
	return &SLAPatchExclusionPeriodBadRequest{}
}

/*SLAPatchExclusionPeriodBadRequest handles this case with default header values.

The request failed.
*/
type SLAPatchExclusionPeriodBadRequest struct {
	Payload *models.MessageList
}

func (o *SLAPatchExclusionPeriodBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaPatchExclusionPeriodBadRequest  %+v", 400, o.Payload)
}

func (o *SLAPatchExclusionPeriodBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *SLAPatchExclusionPeriodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSLAPatchExclusionPeriodNotFound creates a SLAPatchExclusionPeriodNotFound with default headers values
func NewSLAPatchExclusionPeriodNotFound() *SLAPatchExclusionPeriodNotFound {
	return &SLAPatchExclusionPeriodNotFound{}
}

/*SLAPatchExclusionPeriodNotFound handles this case with default header values.

The specified SLA does not exist.
or
The specified exclusion period does not exist.
*/
type SLAPatchExclusionPeriodNotFound struct {
	Payload *models.MessageList
}

func (o *SLAPatchExclusionPeriodNotFound) Error() string {
	return fmt.Sprintf("[PATCH /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaPatchExclusionPeriodNotFound  %+v", 404, o.Payload)
}

func (o *SLAPatchExclusionPeriodNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *SLAPatchExclusionPeriodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
