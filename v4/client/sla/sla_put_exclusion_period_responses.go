// Code generated by go-swagger; DO NOT EDIT.

package sla

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// SLAPutExclusionPeriodReader is a Reader for the SLAPutExclusionPeriod structure.
type SLAPutExclusionPeriodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SLAPutExclusionPeriodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSLAPutExclusionPeriodNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSLAPutExclusionPeriodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSLAPutExclusionPeriodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSLAPutExclusionPeriodNoContent creates a SLAPutExclusionPeriodNoContent with default headers values
func NewSLAPutExclusionPeriodNoContent() *SLAPutExclusionPeriodNoContent {
	return &SLAPutExclusionPeriodNoContent{}
}

/*SLAPutExclusionPeriodNoContent handles this case with default header values.

The request completed successfully.
*/
type SLAPutExclusionPeriodNoContent struct {
}

func (o *SLAPutExclusionPeriodNoContent) Error() string {
	return fmt.Sprintf("[PUT /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaPutExclusionPeriodNoContent ", 204)
}

func (o *SLAPutExclusionPeriodNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSLAPutExclusionPeriodBadRequest creates a SLAPutExclusionPeriodBadRequest with default headers values
func NewSLAPutExclusionPeriodBadRequest() *SLAPutExclusionPeriodBadRequest {
	return &SLAPutExclusionPeriodBadRequest{}
}

/*SLAPutExclusionPeriodBadRequest handles this case with default header values.

The request failed.
*/
type SLAPutExclusionPeriodBadRequest struct {
	Payload *models.MessageList
}

func (o *SLAPutExclusionPeriodBadRequest) Error() string {
	return fmt.Sprintf("[PUT /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaPutExclusionPeriodBadRequest  %+v", 400, o.Payload)
}

func (o *SLAPutExclusionPeriodBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *SLAPutExclusionPeriodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSLAPutExclusionPeriodNotFound creates a SLAPutExclusionPeriodNotFound with default headers values
func NewSLAPutExclusionPeriodNotFound() *SLAPutExclusionPeriodNotFound {
	return &SLAPutExclusionPeriodNotFound{}
}

/*SLAPutExclusionPeriodNotFound handles this case with default header values.

The specified SLA does not exist.
or
The specified exclusion period does not exist.
*/
type SLAPutExclusionPeriodNotFound struct {
	Payload *models.MessageList
}

func (o *SLAPutExclusionPeriodNotFound) Error() string {
	return fmt.Sprintf("[PUT /Sla/{slaGuid}/ExclusionPeriod/{exclusionPeriodId}][%d] slaPutExclusionPeriodNotFound  %+v", 404, o.Payload)
}

func (o *SLAPutExclusionPeriodNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *SLAPutExclusionPeriodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
