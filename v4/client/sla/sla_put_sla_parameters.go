// Code generated by go-swagger; DO NOT EDIT.

package sla

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// NewSLAPutSLAParams creates a new SLAPutSLAParams object
// with the default values initialized.
func NewSLAPutSLAParams() *SLAPutSLAParams {
	var ()
	return &SLAPutSLAParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSLAPutSLAParamsWithTimeout creates a new SLAPutSLAParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSLAPutSLAParamsWithTimeout(timeout time.Duration) *SLAPutSLAParams {
	var ()
	return &SLAPutSLAParams{

		timeout: timeout,
	}
}

// NewSLAPutSLAParamsWithContext creates a new SLAPutSLAParams object
// with the default values initialized, and the ability to set a context for a request
func NewSLAPutSLAParamsWithContext(ctx context.Context) *SLAPutSLAParams {
	var ()
	return &SLAPutSLAParams{

		Context: ctx,
	}
}

// NewSLAPutSLAParamsWithHTTPClient creates a new SLAPutSLAParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSLAPutSLAParamsWithHTTPClient(client *http.Client) *SLAPutSLAParams {
	var ()
	return &SLAPutSLAParams{
		HTTPClient: client,
	}
}

/*SLAPutSLAParams contains all the parameters to send to the API endpoint
for the Sla put Sla operation typically these are written to a http.Request
*/
type SLAPutSLAParams struct {

	/*SLA
	  The complete definition for the SLA that should be updated.

	*/
	SLA *models.SLA
	/*SLAGUID
	  The Guid of the SLA that should be updated.

	*/
	SLAGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the Sla put Sla params
func (o *SLAPutSLAParams) WithTimeout(timeout time.Duration) *SLAPutSLAParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the Sla put Sla params
func (o *SLAPutSLAParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the Sla put Sla params
func (o *SLAPutSLAParams) WithContext(ctx context.Context) *SLAPutSLAParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the Sla put Sla params
func (o *SLAPutSLAParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the Sla put Sla params
func (o *SLAPutSLAParams) WithHTTPClient(client *http.Client) *SLAPutSLAParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the Sla put Sla params
func (o *SLAPutSLAParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSLA adds the sla to the Sla put Sla params
func (o *SLAPutSLAParams) WithSLA(sla *models.SLA) *SLAPutSLAParams {
	o.SetSLA(sla)
	return o
}

// SetSLA adds the sla to the Sla put Sla params
func (o *SLAPutSLAParams) SetSLA(sla *models.SLA) {
	o.SLA = sla
}

// WithSLAGUID adds the sLAGUID to the Sla put Sla params
func (o *SLAPutSLAParams) WithSLAGUID(sLAGUID string) *SLAPutSLAParams {
	o.SetSLAGUID(sLAGUID)
	return o
}

// SetSLAGUID adds the slaGuid to the Sla put Sla params
func (o *SLAPutSLAParams) SetSLAGUID(sLAGUID string) {
	o.SLAGUID = sLAGUID
}

// WriteToRequest writes these params to a swagger request
func (o *SLAPutSLAParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SLA != nil {
		if err := r.SetBodyParam(o.SLA); err != nil {
			return err
		}
	}

	// path param slaGuid
	if err := r.SetPathParam("slaGuid", o.SLAGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
