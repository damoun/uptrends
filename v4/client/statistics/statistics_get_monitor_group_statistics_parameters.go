// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStatisticsGetMonitorGroupStatisticsParams creates a new StatisticsGetMonitorGroupStatisticsParams object
// with the default values initialized.
func NewStatisticsGetMonitorGroupStatisticsParams() *StatisticsGetMonitorGroupStatisticsParams {
	var (
		presetPeriodDefault = string("Last24Hours")
	)
	return &StatisticsGetMonitorGroupStatisticsParams{
		PresetPeriod: &presetPeriodDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewStatisticsGetMonitorGroupStatisticsParamsWithTimeout creates a new StatisticsGetMonitorGroupStatisticsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStatisticsGetMonitorGroupStatisticsParamsWithTimeout(timeout time.Duration) *StatisticsGetMonitorGroupStatisticsParams {
	var (
		presetPeriodDefault = string("Last24Hours")
	)
	return &StatisticsGetMonitorGroupStatisticsParams{
		PresetPeriod: &presetPeriodDefault,

		timeout: timeout,
	}
}

// NewStatisticsGetMonitorGroupStatisticsParamsWithContext creates a new StatisticsGetMonitorGroupStatisticsParams object
// with the default values initialized, and the ability to set a context for a request
func NewStatisticsGetMonitorGroupStatisticsParamsWithContext(ctx context.Context) *StatisticsGetMonitorGroupStatisticsParams {
	var (
		presetPeriodDefault = string("Last24Hours")
	)
	return &StatisticsGetMonitorGroupStatisticsParams{
		PresetPeriod: &presetPeriodDefault,

		Context: ctx,
	}
}

// NewStatisticsGetMonitorGroupStatisticsParamsWithHTTPClient creates a new StatisticsGetMonitorGroupStatisticsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStatisticsGetMonitorGroupStatisticsParamsWithHTTPClient(client *http.Client) *StatisticsGetMonitorGroupStatisticsParams {
	var (
		presetPeriodDefault = string("Last24Hours")
	)
	return &StatisticsGetMonitorGroupStatisticsParams{
		PresetPeriod: &presetPeriodDefault,
		HTTPClient:   client,
	}
}

/*StatisticsGetMonitorGroupStatisticsParams contains all the parameters to send to the API endpoint
for the statistics get monitor group statistics operation typically these are written to a http.Request
*/
type StatisticsGetMonitorGroupStatisticsParams struct {

	/*End
	  The end of a custom period

	*/
	End *strfmt.DateTime
	/*Filter
	  The filter for the requested response fields. E.g. "Alerts,SlaTarget".

	*/
	Filter *string
	/*PresetPeriod
	  The requested time period.

	*/
	PresetPeriod *string
	/*Start
	  The start of a custom period (can't be used together with the PresetPeriod parameter)

	*/
	Start *strfmt.DateTime
	/*MonitorGroupGUID
	  The Guid of the monitor group.

	*/
	MonitorGroupGUID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithTimeout(timeout time.Duration) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithContext(ctx context.Context) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithHTTPClient(client *http.Client) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnd adds the end to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithEnd(end *strfmt.DateTime) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithFilter adds the filter to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithFilter(filter *string) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPresetPeriod adds the presetPeriod to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithPresetPeriod(presetPeriod *string) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetPresetPeriod(presetPeriod)
	return o
}

// SetPresetPeriod adds the presetPeriod to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetPresetPeriod(presetPeriod *string) {
	o.PresetPeriod = presetPeriod
}

// WithStart adds the start to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithStart(start *strfmt.DateTime) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetStart(start *strfmt.DateTime) {
	o.Start = start
}

// WithMonitorGroupGUID adds the monitorGroupGUID to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) WithMonitorGroupGUID(monitorGroupGUID string) *StatisticsGetMonitorGroupStatisticsParams {
	o.SetMonitorGroupGUID(monitorGroupGUID)
	return o
}

// SetMonitorGroupGUID adds the monitorGroupGuid to the statistics get monitor group statistics params
func (o *StatisticsGetMonitorGroupStatisticsParams) SetMonitorGroupGUID(monitorGroupGUID string) {
	o.MonitorGroupGUID = monitorGroupGUID
}

// WriteToRequest writes these params to a swagger request
func (o *StatisticsGetMonitorGroupStatisticsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.End != nil {

		// query param End
		var qrEnd strfmt.DateTime
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {
			if err := r.SetQueryParam("End", qEnd); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param Filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("Filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.PresetPeriod != nil {

		// query param PresetPeriod
		var qrPresetPeriod string
		if o.PresetPeriod != nil {
			qrPresetPeriod = *o.PresetPeriod
		}
		qPresetPeriod := qrPresetPeriod
		if qPresetPeriod != "" {
			if err := r.SetQueryParam("PresetPeriod", qPresetPeriod); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param Start
		var qrStart strfmt.DateTime
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart.String()
		if qStart != "" {
			if err := r.SetQueryParam("Start", qStart); err != nil {
				return err
			}
		}

	}

	// path param monitorGroupGuid
	if err := r.SetPathParam("monitorGroupGuid", o.MonitorGroupGUID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
