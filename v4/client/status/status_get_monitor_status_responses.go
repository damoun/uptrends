// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// StatusGetMonitorStatusReader is a Reader for the StatusGetMonitorStatus structure.
type StatusGetMonitorStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StatusGetMonitorStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStatusGetMonitorStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStatusGetMonitorStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStatusGetMonitorStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStatusGetMonitorStatusOK creates a StatusGetMonitorStatusOK with default headers values
func NewStatusGetMonitorStatusOK() *StatusGetMonitorStatusOK {
	return &StatusGetMonitorStatusOK{}
}

/*StatusGetMonitorStatusOK handles this case with default header values.

The request completed successfully.
*/
type StatusGetMonitorStatusOK struct {
	Payload *models.MonitorStatusResponse
}

func (o *StatusGetMonitorStatusOK) Error() string {
	return fmt.Sprintf("[GET /Status/Monitor/{monitorGuid}][%d] statusGetMonitorStatusOK  %+v", 200, o.Payload)
}

func (o *StatusGetMonitorStatusOK) GetPayload() *models.MonitorStatusResponse {
	return o.Payload
}

func (o *StatusGetMonitorStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MonitorStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatusGetMonitorStatusBadRequest creates a StatusGetMonitorStatusBadRequest with default headers values
func NewStatusGetMonitorStatusBadRequest() *StatusGetMonitorStatusBadRequest {
	return &StatusGetMonitorStatusBadRequest{}
}

/*StatusGetMonitorStatusBadRequest handles this case with default header values.

The request failed.
*/
type StatusGetMonitorStatusBadRequest struct {
	Payload *models.MessageList
}

func (o *StatusGetMonitorStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /Status/Monitor/{monitorGuid}][%d] statusGetMonitorStatusBadRequest  %+v", 400, o.Payload)
}

func (o *StatusGetMonitorStatusBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *StatusGetMonitorStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatusGetMonitorStatusNotFound creates a StatusGetMonitorStatusNotFound with default headers values
func NewStatusGetMonitorStatusNotFound() *StatusGetMonitorStatusNotFound {
	return &StatusGetMonitorStatusNotFound{}
}

/*StatusGetMonitorStatusNotFound handles this case with default header values.

The monitor could not be found.
*/
type StatusGetMonitorStatusNotFound struct {
	Payload *models.MessageList
}

func (o *StatusGetMonitorStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /Status/Monitor/{monitorGuid}][%d] statusGetMonitorStatusNotFound  %+v", 404, o.Payload)
}

func (o *StatusGetMonitorStatusNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *StatusGetMonitorStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
