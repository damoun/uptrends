// Code generated by go-swagger; DO NOT EDIT.

package vault

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/damoun/uptrends/v4/models"
)

// VaultDeleteVaultItemReader is a Reader for the VaultDeleteVaultItem structure.
type VaultDeleteVaultItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VaultDeleteVaultItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewVaultDeleteVaultItemNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVaultDeleteVaultItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVaultDeleteVaultItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVaultDeleteVaultItemNoContent creates a VaultDeleteVaultItemNoContent with default headers values
func NewVaultDeleteVaultItemNoContent() *VaultDeleteVaultItemNoContent {
	return &VaultDeleteVaultItemNoContent{}
}

/*VaultDeleteVaultItemNoContent handles this case with default header values.

Request completed successfully.
*/
type VaultDeleteVaultItemNoContent struct {
	Payload *models.VaultItem
}

func (o *VaultDeleteVaultItemNoContent) Error() string {
	return fmt.Sprintf("[DELETE /VaultItem/{vaultItemGuid}][%d] vaultDeleteVaultItemNoContent  %+v", 204, o.Payload)
}

func (o *VaultDeleteVaultItemNoContent) GetPayload() *models.VaultItem {
	return o.Payload
}

func (o *VaultDeleteVaultItemNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VaultItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVaultDeleteVaultItemBadRequest creates a VaultDeleteVaultItemBadRequest with default headers values
func NewVaultDeleteVaultItemBadRequest() *VaultDeleteVaultItemBadRequest {
	return &VaultDeleteVaultItemBadRequest{}
}

/*VaultDeleteVaultItemBadRequest handles this case with default header values.

The request failed.
*/
type VaultDeleteVaultItemBadRequest struct {
	Payload *models.APIMessageInfo
}

func (o *VaultDeleteVaultItemBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /VaultItem/{vaultItemGuid}][%d] vaultDeleteVaultItemBadRequest  %+v", 400, o.Payload)
}

func (o *VaultDeleteVaultItemBadRequest) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *VaultDeleteVaultItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVaultDeleteVaultItemNotFound creates a VaultDeleteVaultItemNotFound with default headers values
func NewVaultDeleteVaultItemNotFound() *VaultDeleteVaultItemNotFound {
	return &VaultDeleteVaultItemNotFound{}
}

/*VaultDeleteVaultItemNotFound handles this case with default header values.

The requested vault item does not exist.
*/
type VaultDeleteVaultItemNotFound struct {
	Payload *models.APIMessageInfo
}

func (o *VaultDeleteVaultItemNotFound) Error() string {
	return fmt.Sprintf("[DELETE /VaultItem/{vaultItemGuid}][%d] vaultDeleteVaultItemNotFound  %+v", 404, o.Payload)
}

func (o *VaultDeleteVaultItemNotFound) GetPayload() *models.APIMessageInfo {
	return o.Payload
}

func (o *VaultDeleteVaultItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIMessageInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
