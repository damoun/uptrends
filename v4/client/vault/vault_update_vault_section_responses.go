// Code generated by go-swagger; DO NOT EDIT.

package vault

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/damoun/uptrends/v4/models"
)

// VaultUpdateVaultSectionReader is a Reader for the VaultUpdateVaultSection structure.
type VaultUpdateVaultSectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VaultUpdateVaultSectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewVaultUpdateVaultSectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVaultUpdateVaultSectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVaultUpdateVaultSectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVaultUpdateVaultSectionNoContent creates a VaultUpdateVaultSectionNoContent with default headers values
func NewVaultUpdateVaultSectionNoContent() *VaultUpdateVaultSectionNoContent {
	return &VaultUpdateVaultSectionNoContent{}
}

/*VaultUpdateVaultSectionNoContent handles this case with default header values.

The request completed successfully. No content is returned
*/
type VaultUpdateVaultSectionNoContent struct {
}

func (o *VaultUpdateVaultSectionNoContent) Error() string {
	return fmt.Sprintf("[PUT /VaultSection/{vaultSectionGuid}][%d] vaultUpdateVaultSectionNoContent ", 204)
}

func (o *VaultUpdateVaultSectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVaultUpdateVaultSectionBadRequest creates a VaultUpdateVaultSectionBadRequest with default headers values
func NewVaultUpdateVaultSectionBadRequest() *VaultUpdateVaultSectionBadRequest {
	return &VaultUpdateVaultSectionBadRequest{}
}

/*VaultUpdateVaultSectionBadRequest handles this case with default header values.

The request failed.
*/
type VaultUpdateVaultSectionBadRequest struct {
	Payload *models.MessageList
}

func (o *VaultUpdateVaultSectionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /VaultSection/{vaultSectionGuid}][%d] vaultUpdateVaultSectionBadRequest  %+v", 400, o.Payload)
}

func (o *VaultUpdateVaultSectionBadRequest) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *VaultUpdateVaultSectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVaultUpdateVaultSectionNotFound creates a VaultUpdateVaultSectionNotFound with default headers values
func NewVaultUpdateVaultSectionNotFound() *VaultUpdateVaultSectionNotFound {
	return &VaultUpdateVaultSectionNotFound{}
}

/*VaultUpdateVaultSectionNotFound handles this case with default header values.

The requested vault section does not exist.
*/
type VaultUpdateVaultSectionNotFound struct {
	Payload *models.MessageList
}

func (o *VaultUpdateVaultSectionNotFound) Error() string {
	return fmt.Sprintf("[PUT /VaultSection/{vaultSectionGuid}][%d] vaultUpdateVaultSectionNotFound  %+v", 404, o.Payload)
}

func (o *VaultUpdateVaultSectionNotFound) GetPayload() *models.MessageList {
	return o.Payload
}

func (o *VaultUpdateVaultSectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
