// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertAttributes Alert attributes
//
// swagger:model AlertAttributes
type AlertAttributes struct {

	// Alert type indicating if this was an Error or Ok alert.
	// Required: true
	AlertType struct {
		AlertType
	} `json:"AlertType"`

	// A text value that describes the error that was found, or OK if no error was found.
	ErrorDescription string `json:"ErrorDescription,omitempty"`

	// Any additional error information, if available.
	ErrorMessage string `json:"ErrorMessage,omitempty"`

	// Date/time stamp of the first monitor check.
	// Required: true
	// Format: date-time
	FirstError *strfmt.DateTime `json:"FirstError"`

	// The Id of the first monitor check error that led to this alert.
	// Required: true
	FirstErrorMonitorCheckID *int64 `json:"FirstErrorMonitorCheckId"`

	// The incident key of this alert.
	IncidentKey string `json:"IncidentKey,omitempty"`

	// The Id of the monitor check that triggered this alert.
	// Required: true
	MonitorCheckID *int64 `json:"MonitorCheckId"`

	// The monitor identifier.
	// Required: true
	MonitorGUID *string `json:"MonitorGuid"`

	// Date/time stamp of the alert.
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"Timestamp"`
}

// Validate validates this alert attributes
func (m *AlertAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstErrorMonitorCheckID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorCheckID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertAttributes) validateAlertType(formats strfmt.Registry) error {

	return nil
}

func (m *AlertAttributes) validateFirstError(formats strfmt.Registry) error {

	if err := validate.Required("FirstError", "body", m.FirstError); err != nil {
		return err
	}

	if err := validate.FormatOf("FirstError", "body", "date-time", m.FirstError.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AlertAttributes) validateFirstErrorMonitorCheckID(formats strfmt.Registry) error {

	if err := validate.Required("FirstErrorMonitorCheckId", "body", m.FirstErrorMonitorCheckID); err != nil {
		return err
	}

	return nil
}

func (m *AlertAttributes) validateMonitorCheckID(formats strfmt.Registry) error {

	if err := validate.Required("MonitorCheckId", "body", m.MonitorCheckID); err != nil {
		return err
	}

	return nil
}

func (m *AlertAttributes) validateMonitorGUID(formats strfmt.Registry) error {

	if err := validate.Required("MonitorGuid", "body", m.MonitorGUID); err != nil {
		return err
	}

	return nil
}

func (m *AlertAttributes) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("Timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertAttributes) UnmarshalBinary(b []byte) error {
	var res AlertAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
