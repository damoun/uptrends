// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssertionInfo Information about a single assertion
// swagger:model AssertionInfo
type AssertionInfo struct {

	// Was the assertion completed?
	// Required: true
	Completed *bool `json:"Completed"`

	// Description
	Description string `json:"Description,omitempty"`

	// Discription of the exception trown if applicable
	ExceptionDescription string `json:"ExceptionDescription,omitempty"`

	// Did the assertion pass?
	// Required: true
	Passed *bool `json:"Passed"`
}

// Validate validates this assertion info
func (m *AssertionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssertionInfo) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("Completed", "body", m.Completed); err != nil {
		return err
	}

	return nil
}

func (m *AssertionInfo) validatePassed(formats strfmt.Registry) error {

	if err := validate.Required("Passed", "body", m.Passed); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssertionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssertionInfo) UnmarshalBinary(b []byte) error {
	var res AssertionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
