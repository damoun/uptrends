// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AuthorizationTypeEnum authorization type enum
// swagger:model AuthorizationTypeEnum
type AuthorizationTypeEnum string

const (

	// AuthorizationTypeEnumViewDashboard captures enum value "ViewDashboard"
	AuthorizationTypeEnumViewDashboard AuthorizationTypeEnum = "ViewDashboard"

	// AuthorizationTypeEnumChangeDashboard captures enum value "ChangeDashboard"
	AuthorizationTypeEnumChangeDashboard AuthorizationTypeEnum = "ChangeDashboard"

	// AuthorizationTypeEnumShareDashboards captures enum value "ShareDashboards"
	AuthorizationTypeEnumShareDashboards AuthorizationTypeEnum = "ShareDashboards"

	// AuthorizationTypeEnumViewPublicDashboard captures enum value "ViewPublicDashboard"
	AuthorizationTypeEnumViewPublicDashboard AuthorizationTypeEnum = "ViewPublicDashboard"

	// AuthorizationTypeEnumViewVaultSection captures enum value "ViewVaultSection"
	AuthorizationTypeEnumViewVaultSection AuthorizationTypeEnum = "ViewVaultSection"

	// AuthorizationTypeEnumChangeVaultSection captures enum value "ChangeVaultSection"
	AuthorizationTypeEnumChangeVaultSection AuthorizationTypeEnum = "ChangeVaultSection"
)

// for schema
var authorizationTypeEnumEnum []interface{}

func init() {
	var res []AuthorizationTypeEnum
	if err := json.Unmarshal([]byte(`["ViewDashboard","ChangeDashboard","ShareDashboards","ViewPublicDashboard","ViewVaultSection","ChangeVaultSection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authorizationTypeEnumEnum = append(authorizationTypeEnumEnum, v)
	}
}

func (m AuthorizationTypeEnum) validateAuthorizationTypeEnumEnum(path, location string, value AuthorizationTypeEnum) error {
	if err := validate.Enum(path, location, value, authorizationTypeEnumEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this authorization type enum
func (m AuthorizationTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthorizationTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
