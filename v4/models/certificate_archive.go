// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateArchive certificate archive
// swagger:model CertificateArchive
type CertificateArchive struct {

	// archive data
	ArchiveData string `json:"ArchiveData,omitempty"`

	// issuer
	Issuer string `json:"Issuer,omitempty"`

	// not after
	// Required: true
	// Format: date-time
	NotAfter *strfmt.DateTime `json:"NotAfter"`

	// not before
	// Required: true
	// Format: date-time
	NotBefore *strfmt.DateTime `json:"NotBefore"`

	// password
	Password string `json:"Password,omitempty"`
}

// Validate validates this certificate archive
func (m *CertificateArchive) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateArchive) validateNotAfter(formats strfmt.Registry) error {

	if err := validate.Required("NotAfter", "body", m.NotAfter); err != nil {
		return err
	}

	if err := validate.FormatOf("NotAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateArchive) validateNotBefore(formats strfmt.Registry) error {

	if err := validate.Required("NotBefore", "body", m.NotBefore); err != nil {
		return err
	}

	if err := validate.FormatOf("NotBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateArchive) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateArchive) UnmarshalBinary(b []byte) error {
	var res CertificateArchive
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
