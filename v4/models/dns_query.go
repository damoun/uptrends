// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DNSQuery Dns query
//
// swagger:model DnsQuery
type DNSQuery string

const (

	// DNSQueryARecord captures enum value "ARecord"
	DNSQueryARecord DNSQuery = "ARecord"

	// DNSQueryCnameRecord captures enum value "CnameRecord"
	DNSQueryCnameRecord DNSQuery = "CnameRecord"

	// DNSQueryMxRecord captures enum value "MxRecord"
	DNSQueryMxRecord DNSQuery = "MxRecord"

	// DNSQueryNsRecord captures enum value "NsRecord"
	DNSQueryNsRecord DNSQuery = "NsRecord"

	// DNSQueryTxtRecord captures enum value "TxtRecord"
	DNSQueryTxtRecord DNSQuery = "TxtRecord"

	// DNSQuerySoaRecord captures enum value "SoaRecord"
	DNSQuerySoaRecord DNSQuery = "SoaRecord"

	// DNSQueryRootServer captures enum value "RootServer"
	DNSQueryRootServer DNSQuery = "RootServer"

	// DNSQueryAaaaRecord captures enum value "AaaaRecord"
	DNSQueryAaaaRecord DNSQuery = "AaaaRecord"

	// DNSQuerySrvRecord captures enum value "SrvRecord"
	DNSQuerySrvRecord DNSQuery = "SrvRecord"
)

// for schema
var dnsQueryEnum []interface{}

func init() {
	var res []DNSQuery
	if err := json.Unmarshal([]byte(`["ARecord","CnameRecord","MxRecord","NsRecord","TxtRecord","SoaRecord","RootServer","AaaaRecord","SrvRecord"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dnsQueryEnum = append(dnsQueryEnum, v)
	}
}

func (m DNSQuery) validateDNSQueryEnum(path, location string, value DNSQuery) error {
	if err := validate.EnumCase(path, location, value, dnsQueryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Dns query
func (m DNSQuery) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDNSQueryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
