// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ErrorLevelFilter error level filter
//
// swagger:model ErrorLevelFilter
type ErrorLevelFilter string

const (

	// ErrorLevelFilterNoError captures enum value "NoError"
	ErrorLevelFilterNoError ErrorLevelFilter = "NoError"

	// ErrorLevelFilterUnconfirmed captures enum value "Unconfirmed"
	ErrorLevelFilterUnconfirmed ErrorLevelFilter = "Unconfirmed"

	// ErrorLevelFilterConfirmed captures enum value "Confirmed"
	ErrorLevelFilterConfirmed ErrorLevelFilter = "Confirmed"
)

// for schema
var errorLevelFilterEnum []interface{}

func init() {
	var res []ErrorLevelFilter
	if err := json.Unmarshal([]byte(`["NoError","Unconfirmed","Confirmed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorLevelFilterEnum = append(errorLevelFilterEnum, v)
	}
}

func (m ErrorLevelFilter) validateErrorLevelFilterEnum(path, location string, value ErrorLevelFilter) error {
	if err := validate.EnumCase(path, location, value, errorLevelFilterEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this error level filter
func (m ErrorLevelFilter) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateErrorLevelFilterEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
