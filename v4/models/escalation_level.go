// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EscalationLevel escalation level
//
// swagger:model EscalationLevel
type EscalationLevel struct {

	// escalation mode
	EscalationMode EscalationMode `json:"EscalationMode,omitempty"`

	// Hash corresponding with this escalation level.
	Hash string `json:"Hash,omitempty"`

	// Id
	ID int64 `json:"Id,omitempty"`

	// include trace route
	IncludeTraceRoute bool `json:"IncludeTraceRoute,omitempty"`

	// is active
	IsActive bool `json:"IsActive,omitempty"`

	// message
	Message string `json:"Message,omitempty"`

	// number of reminders
	NumberOfReminders int32 `json:"NumberOfReminders,omitempty"`

	// reminder delay
	ReminderDelay int32 `json:"ReminderDelay,omitempty"`

	// threshold error count
	ThresholdErrorCount int32 `json:"ThresholdErrorCount,omitempty"`

	// threshold minutes
	ThresholdMinutes int32 `json:"ThresholdMinutes,omitempty"`
}

// Validate validates this escalation level
func (m *EscalationLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEscalationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EscalationLevel) validateEscalationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.EscalationMode) { // not required
		return nil
	}

	if err := m.EscalationMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("EscalationMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EscalationLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EscalationLevel) UnmarshalBinary(b []byte) error {
	var res EscalationLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
