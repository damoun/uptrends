// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPEngineStep HttpEngineStep descriobes the results of a step in a Multi-step Api monitor
//
// swagger:model HttpEngineStep
type HTTPEngineStep struct {

	// Results of the assertions in this step
	AssertionResultsInfo struct {
		AssertionResultsInfo
	} `json:"AssertionResultsInfo,omitempty"`

	// Http method used in this step
	HTTPMethod string `json:"HttpMethod,omitempty"`

	// The HTTP status code returned
	HTTPStatusCode string `json:"HttpStatusCode,omitempty"`

	// Step description
	HTTPStatusDescription string `json:"HttpStatusDescription,omitempty"`

	// Request body send
	RequestBody string `json:"RequestBody,omitempty"`

	// Request headers send
	RequestHeaders string `json:"RequestHeaders,omitempty"`

	// Response body
	ResponseBody string `json:"ResponseBody,omitempty"`

	// Did the response complete?
	// Required: true
	ResponseCompleted *bool `json:"ResponseCompleted"`

	// Response headers
	ResponseHeaders string `json:"ResponseHeaders,omitempty"`

	// Was this step executed?
	// Required: true
	StepExecuted *bool `json:"StepExecuted"`

	// The name of the step
	StepName string `json:"StepName,omitempty"`

	// Number of milliseconds it took for this step to succeed
	// Required: true
	TotalTime *int64 `json:"TotalTime"`

	// Url the step was executed on
	URL string `json:"Url,omitempty"`
}

// Validate validates this Http engine step
func (m *HTTPEngineStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssertionResultsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepExecuted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPEngineStep) validateAssertionResultsInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.AssertionResultsInfo) { // not required
		return nil
	}

	return nil
}

func (m *HTTPEngineStep) validateResponseCompleted(formats strfmt.Registry) error {

	if err := validate.Required("ResponseCompleted", "body", m.ResponseCompleted); err != nil {
		return err
	}

	return nil
}

func (m *HTTPEngineStep) validateStepExecuted(formats strfmt.Registry) error {

	if err := validate.Required("StepExecuted", "body", m.StepExecuted); err != nil {
		return err
	}

	return nil
}

func (m *HTTPEngineStep) validateTotalTime(formats strfmt.Registry) error {

	if err := validate.Required("TotalTime", "body", m.TotalTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPEngineStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPEngineStep) UnmarshalBinary(b []byte) error {
	var res HTTPEngineStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
