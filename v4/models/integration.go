// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Integration integration
//
// swagger:model Integration
type Integration struct {

	// Extra emailadresses for this integration (if type == email)
	ExtraEmailAddresses string `json:"ExtraEmailAddresses,omitempty"`

	// hash
	Hash string `json:"Hash,omitempty"`

	// Guid of Integration in Alert Definition Escalation Level
	// Required: true
	IntegrationGUID *string `json:"IntegrationGuid"`

	// All integrations services.
	IntegrationServices []string `json:"IntegrationServices"`

	// Name of Integration in Alert Definition Escalation Level
	Name string `json:"Name,omitempty"`

	// All statushubs for this integration (if type == statushub)
	StatusHubServiceList []*IntegrationServiceMap `json:"StatusHubServiceList"`

	// Type of Integration in Alert Definition Escalation Level
	// Required: true
	Type struct {
		IntegrationTypeEnum
	} `json:"Type"`
}

// Validate validates this integration
func (m *Integration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntegrationGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusHubServiceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Integration) validateIntegrationGUID(formats strfmt.Registry) error {

	if err := validate.Required("IntegrationGuid", "body", m.IntegrationGUID); err != nil {
		return err
	}

	return nil
}

func (m *Integration) validateStatusHubServiceList(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusHubServiceList) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusHubServiceList); i++ {
		if swag.IsZero(m.StatusHubServiceList[i]) { // not required
			continue
		}

		if m.StatusHubServiceList[i] != nil {
			if err := m.StatusHubServiceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StatusHubServiceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Integration) validateType(formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *Integration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Integration) UnmarshalBinary(b []byte) error {
	var res Integration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
