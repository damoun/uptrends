// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Monitor monitor
//
// swagger:model Monitor
type Monitor struct {

	// alert on load time limit1
	AlertOnLoadTimeLimit1 bool `json:"AlertOnLoadTimeLimit1,omitempty"`

	// alert on load time limit2
	AlertOnLoadTimeLimit2 bool `json:"AlertOnLoadTimeLimit2,omitempty"`

	// alert on maximum bytes
	AlertOnMaximumBytes bool `json:"AlertOnMaximumBytes,omitempty"`

	// alert on maximum size
	AlertOnMaximumSize bool `json:"AlertOnMaximumSize,omitempty"`

	// alert on minimum bytes
	AlertOnMinimumBytes bool `json:"AlertOnMinimumBytes,omitempty"`

	// alert on percentage fail
	AlertOnPercentageFail bool `json:"AlertOnPercentageFail,omitempty"`

	// authentication type
	AuthenticationType APIHTTPAuthenticationType `json:"AuthenticationType,omitempty"`

	// block google analytics
	BlockGoogleAnalytics bool `json:"BlockGoogleAnalytics,omitempty"`

	// block uptrends rum
	BlockUptrendsRum bool `json:"BlockUptrendsRum,omitempty"`

	// block urls
	BlockUrls []string `json:"BlockUrls"`

	// browser type
	BrowserType BrowserType `json:"BrowserType,omitempty"`

	// browser window dimensions
	BrowserWindowDimensions *BrowserWindowDimensions `json:"BrowserWindowDimensions,omitempty"`

	// certificate expiration warning days
	CertificateExpirationWarningDays int32 `json:"CertificateExpirationWarningDays,omitempty"`

	// certificate fingerprint
	CertificateFingerprint string `json:"CertificateFingerprint,omitempty"`

	// certificate issuer company name
	CertificateIssuerCompanyName string `json:"CertificateIssuerCompanyName,omitempty"`

	// certificate issuer name
	CertificateIssuerName string `json:"CertificateIssuerName,omitempty"`

	// certificate issuer organizational unit
	CertificateIssuerOrganizationalUnit string `json:"CertificateIssuerOrganizationalUnit,omitempty"`

	// certificate name
	CertificateName string `json:"CertificateName,omitempty"`

	// certificate organization
	CertificateOrganization string `json:"CertificateOrganization,omitempty"`

	// certificate organizational unit
	CertificateOrganizationalUnit string `json:"CertificateOrganizationalUnit,omitempty"`

	// certificate serial number
	CertificateSerialNumber string `json:"CertificateSerialNumber,omitempty"`

	// check certificate errors
	CheckCertificateErrors bool `json:"CheckCertificateErrors,omitempty"`

	// Indicates the interval in seconds
	CheckInterval int64 `json:"CheckInterval,omitempty"`

	// concurrent confirmed error threshold
	ConcurrentConfirmedErrorThreshold int32 `json:"ConcurrentConfirmedErrorThreshold,omitempty"`

	// concurrent unconfirmed error threshold
	ConcurrentUnconfirmedErrorThreshold int32 `json:"ConcurrentUnconfirmedErrorThreshold,omitempty"`

	// credits
	Credits int32 `json:"Credits,omitempty"`

	// custom fields
	CustomFields []*CustomField `json:"CustomFields"`

	// custom metrics
	CustomMetrics []*CustomMetric `json:"CustomMetrics"`

	// database name
	DatabaseName string `json:"DatabaseName,omitempty"`

	// Dns expected result
	DNSExpectedResult string `json:"DnsExpectedResult,omitempty"`

	// Dns query
	DNSQuery DNSQuery `json:"DnsQuery,omitempty"`

	// Dns server
	DNSServer string `json:"DnsServer,omitempty"`

	// Dns test value
	DNSTestValue string `json:"DnsTestValue,omitempty"`

	// domain group Guid
	DomainGroupGUID string `json:"DomainGroupGuid,omitempty"`

	// domain group Guid specified
	DomainGroupGUIDSpecified bool `json:"DomainGroupGuidSpecified,omitempty"`

	// element maximum size
	ElementMaximumSize int32 `json:"ElementMaximumSize,omitempty"`

	// expected Http status code
	ExpectedHTTPStatusCode int32 `json:"ExpectedHttpStatusCode,omitempty"`

	// expected Http status code specified
	ExpectedHTTPStatusCodeSpecified bool `json:"ExpectedHttpStatusCodeSpecified,omitempty"`

	// failed object percentage
	FailedObjectPercentage int32 `json:"FailedObjectPercentage,omitempty"`

	// Indicates whether this monitor should generate alerts.
	GenerateAlert *bool `json:"GenerateAlert,omitempty"`

	// Hash corresponding with this monitor.
	Hash string `json:"Hash,omitempty"`

	// Http method
	HTTPMethod HTTPMethod `json:"HttpMethod,omitempty"`

	// ignore external elements
	IgnoreExternalElements bool `json:"IgnoreExternalElements,omitempty"`

	// imap secure connection
	ImapSecureConnection bool `json:"ImapSecureConnection,omitempty"`

	// Ip version
	IPVersion IPVersion `json:"IpVersion,omitempty"`

	// Indicates whether this monitor is actively running according to the monitoring interval.
	IsActive *bool `json:"IsActive,omitempty"`

	// Indicates whether this monitor is locked.
	IsLocked bool `json:"IsLocked,omitempty"`

	// load time limit1
	LoadTimeLimit1 int32 `json:"LoadTimeLimit1,omitempty"`

	// load time limit2
	LoadTimeLimit2 int32 `json:"LoadTimeLimit2,omitempty"`

	// match patterns
	MatchPatterns []*PatternMatch `json:"MatchPatterns"`

	// maximum bytes
	MaximumBytes int32 `json:"MaximumBytes,omitempty"`

	// minimum bytes
	MinimumBytes int32 `json:"MinimumBytes,omitempty"`

	// The unique key of this monitor.
	MonitorGUID string `json:"MonitorGuid,omitempty"`

	// monitor mode
	MonitorMode struct {
		MonitorMode
	} `json:"MonitorMode,omitempty"`

	// monitor type
	MonitorType MonitorType `json:"MonitorType,omitempty"`

	// msa steps
	MsaSteps []*MsaStep `json:"MsaSteps"`

	// The name of this monitor.
	Name string `json:"Name,omitempty"`

	// native IPv6 only
	NativeIPV6Only bool `json:"NativeIPv6Only,omitempty"`

	// network address
	NetworkAddress string `json:"NetworkAddress,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// password
	Password string `json:"Password,omitempty"`

	// port
	Port int32 `json:"Port,omitempty"`

	// predefined variables
	PredefinedVariables []*PredefinedVariable `json:"PredefinedVariables"`

	// request body
	RequestBody string `json:"RequestBody,omitempty"`

	// request headers
	RequestHeaders []*RequestHeader `json:"RequestHeaders"`

	// selected checkpoints
	SelectedCheckpoints *SelectedCheckpoints `json:"SelectedCheckpoints,omitempty"`

	// self service transaction script
	SelfServiceTransactionScript string `json:"SelfServiceTransactionScript,omitempty"`

	// sftp action
	SftpAction SftpAction `json:"SftpAction,omitempty"`

	// sftp action path
	SftpActionPath string `json:"SftpActionPath,omitempty"`

	// throttling options
	ThrottlingOptions *ThrottlingOptions `json:"ThrottlingOptions,omitempty"`

	// Tls version
	TLSVersion TLSVersion `json:"TlsVersion,omitempty"`

	// Only valid for Transaction monitors: the data structure that specifies the transaction steps (and sub steps) to execute.
	TransactionStepDefinition struct {
		TransactionStepDefinition
	} `json:"TransactionStepDefinition,omitempty"`

	// Url
	URL string `json:"Url,omitempty"`

	// use concurrent monitoring
	UseConcurrentMonitoring bool `json:"UseConcurrentMonitoring,omitempty"`

	// use primary checkpoints only
	UsePrimaryCheckpointsOnly bool `json:"UsePrimaryCheckpointsOnly,omitempty"`

	// user agent
	UserAgent string `json:"UserAgent,omitempty"`

	// user defined functions
	UserDefinedFunctions []*UserDefinedFunction `json:"UserDefinedFunctions"`

	// username
	Username string `json:"Username,omitempty"`
}

// Validate validates this monitor
func (m *Monitor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrowserType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrowserWindowDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchPatterns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsaSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredefinedVariables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedCheckpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSftpAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStepDefinition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDefinedFunctions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Monitor) validateAuthenticationType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthenticationType) { // not required
		return nil
	}

	if err := m.AuthenticationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AuthenticationType")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateBrowserType(formats strfmt.Registry) error {

	if swag.IsZero(m.BrowserType) { // not required
		return nil
	}

	if err := m.BrowserType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BrowserType")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateBrowserWindowDimensions(formats strfmt.Registry) error {

	if swag.IsZero(m.BrowserWindowDimensions) { // not required
		return nil
	}

	if m.BrowserWindowDimensions != nil {
		if err := m.BrowserWindowDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BrowserWindowDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Monitor) validateCustomFields(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomFields) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFields); i++ {
		if swag.IsZero(m.CustomFields[i]) { // not required
			continue
		}

		if m.CustomFields[i] != nil {
			if err := m.CustomFields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomFields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Monitor) validateCustomMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomMetrics) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomMetrics); i++ {
		if swag.IsZero(m.CustomMetrics[i]) { // not required
			continue
		}

		if m.CustomMetrics[i] != nil {
			if err := m.CustomMetrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CustomMetrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Monitor) validateDNSQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSQuery) { // not required
		return nil
	}

	if err := m.DNSQuery.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DnsQuery")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateHTTPMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPMethod) { // not required
		return nil
	}

	if err := m.HTTPMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("HttpMethod")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateIPVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.IPVersion) { // not required
		return nil
	}

	if err := m.IPVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IpVersion")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateMatchPatterns(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchPatterns) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchPatterns); i++ {
		if swag.IsZero(m.MatchPatterns[i]) { // not required
			continue
		}

		if m.MatchPatterns[i] != nil {
			if err := m.MatchPatterns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MatchPatterns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Monitor) validateMonitorMode(formats strfmt.Registry) error {

	if swag.IsZero(m.MonitorMode) { // not required
		return nil
	}

	return nil
}

func (m *Monitor) validateMonitorType(formats strfmt.Registry) error {

	if swag.IsZero(m.MonitorType) { // not required
		return nil
	}

	if err := m.MonitorType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MonitorType")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateMsaSteps(formats strfmt.Registry) error {

	if swag.IsZero(m.MsaSteps) { // not required
		return nil
	}

	for i := 0; i < len(m.MsaSteps); i++ {
		if swag.IsZero(m.MsaSteps[i]) { // not required
			continue
		}

		if m.MsaSteps[i] != nil {
			if err := m.MsaSteps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MsaSteps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Monitor) validatePredefinedVariables(formats strfmt.Registry) error {

	if swag.IsZero(m.PredefinedVariables) { // not required
		return nil
	}

	for i := 0; i < len(m.PredefinedVariables); i++ {
		if swag.IsZero(m.PredefinedVariables[i]) { // not required
			continue
		}

		if m.PredefinedVariables[i] != nil {
			if err := m.PredefinedVariables[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PredefinedVariables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Monitor) validateRequestHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestHeaders) { // not required
		return nil
	}

	for i := 0; i < len(m.RequestHeaders); i++ {
		if swag.IsZero(m.RequestHeaders[i]) { // not required
			continue
		}

		if m.RequestHeaders[i] != nil {
			if err := m.RequestHeaders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RequestHeaders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Monitor) validateSelectedCheckpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectedCheckpoints) { // not required
		return nil
	}

	if m.SelectedCheckpoints != nil {
		if err := m.SelectedCheckpoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SelectedCheckpoints")
			}
			return err
		}
	}

	return nil
}

func (m *Monitor) validateSftpAction(formats strfmt.Registry) error {

	if swag.IsZero(m.SftpAction) { // not required
		return nil
	}

	if err := m.SftpAction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SftpAction")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateThrottlingOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ThrottlingOptions) { // not required
		return nil
	}

	if m.ThrottlingOptions != nil {
		if err := m.ThrottlingOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ThrottlingOptions")
			}
			return err
		}
	}

	return nil
}

func (m *Monitor) validateTLSVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.TLSVersion) { // not required
		return nil
	}

	if err := m.TLSVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TlsVersion")
		}
		return err
	}

	return nil
}

func (m *Monitor) validateTransactionStepDefinition(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionStepDefinition) { // not required
		return nil
	}

	return nil
}

func (m *Monitor) validateUserDefinedFunctions(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDefinedFunctions) { // not required
		return nil
	}

	for i := 0; i < len(m.UserDefinedFunctions); i++ {
		if swag.IsZero(m.UserDefinedFunctions[i]) { // not required
			continue
		}

		if m.UserDefinedFunctions[i] != nil {
			if err := m.UserDefinedFunctions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserDefinedFunctions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Monitor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Monitor) UnmarshalBinary(b []byte) error {
	var res Monitor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
