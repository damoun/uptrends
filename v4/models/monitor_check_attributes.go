// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitorCheckAttributes Monitor check attributes
//
// swagger:model MonitorCheckAttributes
type MonitorCheckAttributes struct {

	// The number of milliseconds needed to establish a connection.
	// Required: true
	ConnectionTime *float64 `json:"ConnectionTime"`

	// The number of milliseconds needed to download the response data.
	// Required: true
	DownloadTime *float64 `json:"DownloadTime"`

	// The numeric Uptrends error code in case of an error result, or 0 in case of an OK result.
	// Required: true
	ErrorCode *int32 `json:"ErrorCode"`

	// A text value that describes the error that was found, or OK if no error was found.
	ErrorDescription string `json:"ErrorDescription,omitempty"`

	// A value that represents the OK/Error state for this check: NoError if the result was OK, Unconfirmed if an error was found, Confirmed if an error was found as a double check, right after an Unconfirmed error.
	// Required: true
	ErrorLevel struct {
		ErrorLevel
	} `json:"ErrorLevel"`

	// Any additional error information, if available.
	ErrorMessage string `json:"ErrorMessage,omitempty"`

	// The HTTP status code returned (if applicable)
	HTTPStatusCode int32 `json:"HttpStatusCode,omitempty"`

	// Is this a master concurrent check record
	IsConcurrentCheck bool `json:"IsConcurrentCheck,omitempty"`

	// This is a partial concurrent measurement, part of a concurrent check
	// Required: true
	IsPartialCheck *bool `json:"IsPartialCheck"`

	// Monitor identifier
	// Required: true
	MonitorGUID *string `json:"MonitorGuid"`

	// The number of milliseconds needed to perform the DNS query for this check, when appropriate.
	// Required: true
	ResolveTime *float64 `json:"ResolveTime"`

	// The IP address that was found for the specified domain name as part of this monitor check.
	ResolvedIPAddress string `json:"ResolvedIpAddress,omitempty"`

	// The Id of the Uptrends checkpoint server that performed this check.
	ServerID int32 `json:"ServerId,omitempty"`

	// Did the check come from a staging monitor?
	// Required: true
	StagingMode *bool `json:"StagingMode"`

	// Date/time stamp of the check
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"Timestamp"`

	// The number of downloaded bytes for this check.
	TotalBytes int32 `json:"TotalBytes,omitempty"`

	// The number of milliseconds needed to complete the monitor check.
	// Required: true
	TotalTime *float64 `json:"TotalTime"`
}

// Validate validates this monitor check attributes
func (m *MonitorCheckAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPartialCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStagingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitorCheckAttributes) validateConnectionTime(formats strfmt.Registry) error {

	if err := validate.Required("ConnectionTime", "body", m.ConnectionTime); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateDownloadTime(formats strfmt.Registry) error {

	if err := validate.Required("DownloadTime", "body", m.DownloadTime); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.Required("ErrorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateErrorLevel(formats strfmt.Registry) error {

	return nil
}

func (m *MonitorCheckAttributes) validateIsPartialCheck(formats strfmt.Registry) error {

	if err := validate.Required("IsPartialCheck", "body", m.IsPartialCheck); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateMonitorGUID(formats strfmt.Registry) error {

	if err := validate.Required("MonitorGuid", "body", m.MonitorGUID); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateResolveTime(formats strfmt.Registry) error {

	if err := validate.Required("ResolveTime", "body", m.ResolveTime); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateStagingMode(formats strfmt.Registry) error {

	if err := validate.Required("StagingMode", "body", m.StagingMode); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("Timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MonitorCheckAttributes) validateTotalTime(formats strfmt.Registry) error {

	if err := validate.Required("TotalTime", "body", m.TotalTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitorCheckAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitorCheckAttributes) UnmarshalBinary(b []byte) error {
	var res MonitorCheckAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
