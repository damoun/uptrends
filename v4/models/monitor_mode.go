// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MonitorMode monitor mode
//
// swagger:model MonitorMode
type MonitorMode string

const (

	// MonitorModeDevelopment captures enum value "Development"
	MonitorModeDevelopment MonitorMode = "Development"

	// MonitorModeStaging captures enum value "Staging"
	MonitorModeStaging MonitorMode = "Staging"

	// MonitorModeProduction captures enum value "Production"
	MonitorModeProduction MonitorMode = "Production"
)

// for schema
var monitorModeEnum []interface{}

func init() {
	var res []MonitorMode
	if err := json.Unmarshal([]byte(`["Development","Staging","Production"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitorModeEnum = append(monitorModeEnum, v)
	}
}

func (m MonitorMode) validateMonitorModeEnum(path, location string, value MonitorMode) error {
	if err := validate.EnumCase(path, location, value, monitorModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this monitor mode
func (m MonitorMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMonitorModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
