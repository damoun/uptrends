// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MonitorType monitor type
//
// swagger:model MonitorType
type MonitorType string

const (

	// MonitorTypeHTTP captures enum value "Http"
	MonitorTypeHTTP MonitorType = "Http"

	// MonitorTypeHTTPS captures enum value "Https"
	MonitorTypeHTTPS MonitorType = "Https"

	// MonitorTypeConnect captures enum value "Connect"
	MonitorTypeConnect MonitorType = "Connect"

	// MonitorTypePing captures enum value "Ping"
	MonitorTypePing MonitorType = "Ping"

	// MonitorTypePOP3 captures enum value "POP3"
	MonitorTypePOP3 MonitorType = "POP3"

	// MonitorTypeSMTP captures enum value "SMTP"
	MonitorTypeSMTP MonitorType = "SMTP"

	// MonitorTypeFTP captures enum value "FTP"
	MonitorTypeFTP MonitorType = "FTP"

	// MonitorTypeMySQL captures enum value "MySQL"
	MonitorTypeMySQL MonitorType = "MySQL"

	// MonitorTypeMSSQL captures enum value "MSSQL"
	MonitorTypeMSSQL MonitorType = "MSSQL"

	// MonitorTypeWebserviceHTTP captures enum value "WebserviceHttp"
	MonitorTypeWebserviceHTTP MonitorType = "WebserviceHttp"

	// MonitorTypeWebserviceHTTPS captures enum value "WebserviceHttps"
	MonitorTypeWebserviceHTTPS MonitorType = "WebserviceHttps"

	// MonitorTypeTransaction captures enum value "Transaction"
	MonitorTypeTransaction MonitorType = "Transaction"

	// MonitorTypeDNS captures enum value "DNS"
	MonitorTypeDNS MonitorType = "DNS"

	// MonitorTypeFullPageCheck captures enum value "FullPageCheck"
	MonitorTypeFullPageCheck MonitorType = "FullPageCheck"

	// MonitorTypeRealBrowserCheck captures enum value "RealBrowserCheck"
	MonitorTypeRealBrowserCheck MonitorType = "RealBrowserCheck"

	// MonitorTypeCertificate captures enum value "Certificate"
	MonitorTypeCertificate MonitorType = "Certificate"

	// MonitorTypeSFTP captures enum value "SFTP"
	MonitorTypeSFTP MonitorType = "SFTP"

	// MonitorTypeMultiStepAPI captures enum value "MultiStepApi"
	MonitorTypeMultiStepAPI MonitorType = "MultiStepApi"

	// MonitorTypeIMAP captures enum value "IMAP"
	MonitorTypeIMAP MonitorType = "IMAP"
)

// for schema
var monitorTypeEnum []interface{}

func init() {
	var res []MonitorType
	if err := json.Unmarshal([]byte(`["Http","Https","Connect","Ping","POP3","SMTP","FTP","MySQL","MSSQL","WebserviceHttp","WebserviceHttps","Transaction","DNS","FullPageCheck","RealBrowserCheck","Certificate","SFTP","MultiStepApi","IMAP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitorTypeEnum = append(monitorTypeEnum, v)
	}
}

func (m MonitorType) validateMonitorTypeEnum(path, location string, value MonitorType) error {
	if err := validate.EnumCase(path, location, value, monitorTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this monitor type
func (m MonitorType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMonitorTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
