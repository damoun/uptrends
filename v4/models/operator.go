// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Operator Operator
//
// swagger:model Operator
type Operator struct {

	// This can only be set to false if the account has SSO enabled. Ommitting or providing null will use the account default
	AllowNativeLogin bool `json:"AllowNativeLogin,omitempty"`

	// allow native login specified
	AllowNativeLoginSpecified bool `json:"AllowNativeLoginSpecified,omitempty"`

	// This can only be set to true if the account has SSO enabled. Ommitting or providing null will use the account default
	AllowSingleSignon bool `json:"AllowSingleSignon,omitempty"`

	// allow single signon specified
	AllowSingleSignonSpecified bool `json:"AllowSingleSignonSpecified,omitempty"`

	// The backup email address of this operator
	BackupEmail string `json:"BackupEmail,omitempty"`

	// If ommitted the operator will use the account culture. If set it will override the account default
	CultureName string `json:"CultureName,omitempty"`

	// culture name specified
	CultureNameSpecified bool `json:"CultureNameSpecified,omitempty"`

	// The email address of this operator. This also serves as the username
	Email string `json:"Email,omitempty"`

	// The full name of this operator
	FullName string `json:"FullName,omitempty"`

	// The hash of this operator.
	Hash string `json:"Hash,omitempty"`

	// This indicates if the operator is the account administrator.
	IsAccountAdministrator bool `json:"IsAccountAdministrator,omitempty"`

	// Indicates whether the operator is currently active
	IsOnDuty bool `json:"IsOnDuty,omitempty"`

	// The phone number of this operator to which SMS and phone alerts can be sent. Start with a plus (+) sign and your country code
	MobilePhone string `json:"MobilePhone,omitempty"`

	// The unique identifier of this operator
	OperatorGUID string `json:"OperatorGuid,omitempty"`

	// The id of the phone number that will be used to send phone alerts (See /OutgoingPhoneNumber API under Miscellaneous for available ids)
	OutgoingPhoneNumberID int32 `json:"OutgoingPhoneNumberId,omitempty"`

	// outgoing phone number Id specified
	OutgoingPhoneNumberIDSpecified bool `json:"OutgoingPhoneNumberIdSpecified,omitempty"`

	// The password is a required field if AllowNativeLogin is set to True
	Password string `json:"Password,omitempty"`

	// The SMS provider used to send out SMS alerts
	SmsProvider struct {
		SmsProvider
	} `json:"SmsProvider,omitempty"`

	// The id of the timezone of this operator (See /Timezone API under Miscellaneous for available timezones)
	TimeZoneID int64 `json:"TimeZoneId,omitempty"`

	// time zone Id specified
	TimeZoneIDSpecified bool `json:"TimeZoneIdSpecified,omitempty"`

	// Set to True to override the default behavior of sending SMS alerts with textual sender ID
	UseNumericSender bool `json:"UseNumericSender,omitempty"`

	// use numeric sender specified
	UseNumericSenderSpecified bool `json:"UseNumericSenderSpecified,omitempty"`
}

// Validate validates this operator
func (m *Operator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSmsProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Operator) validateSmsProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.SmsProvider) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Operator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Operator) UnmarshalBinary(b []byte) error {
	var res Operator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
