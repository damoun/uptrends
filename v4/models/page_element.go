// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageElement Page element describes a page load/request (in a waterfall)
//
// swagger:model PageElement
type PageElement struct {

	// Number of milliseconds needed to establish a connection.
	// Required: true
	ConnectTime *int32 `json:"ConnectTime"`

	// Requested resource element type, can be HTML, scripts, CSS, images, frames, objects, data and other
	ElementType string `json:"ElementType,omitempty"`

	// group ids
	GroupIds []int32 `json:"GroupIds"`

	// The Http status code
	// Required: true
	HTTPStatusCode *int32 `json:"HttpStatusCode"`

	// Number of milliseconds needed for the HTTPS handshake
	// Required: true
	HTTPSHandshakeTime *int32 `json:"HttpsHandshakeTime"`

	// Index of the element in the waterfall context
	// Required: true
	Index *int32 `json:"Index"`

	// Number of milliseconds it took to retrieve the data
	// Required: true
	ReceiveTime *int32 `json:"ReceiveTime"`

	// The HTTP request headers used
	RequestHeaders string `json:"RequestHeaders,omitempty"`

	// Number of milliseconds needed to perform the DNS query for this element, when appropriate.
	// Required: true
	ResolveTime *int32 `json:"ResolveTime"`

	// The IP address that was found for the specified domain name as part of this monitor check.
	ResolvedIPAddress interface{} `json:"ResolvedIpAddress,omitempty"`

	// The HTTP response headers retrieved
	ResponseHeaders string `json:"ResponseHeaders,omitempty"`

	// Number of milliseconds it took to send data
	// Required: true
	SendTime *int32 `json:"SendTime"`

	// Number of milliseconds the connection was stale
	// Required: true
	StaleTime *int32 `json:"StaleTime"`

	// Starting time in milliseconds
	// Required: true
	StartTime *int32 `json:"StartTime"`

	// Number of milliseconds the connection was timed-out
	// Required: true
	TimeoutTime *int32 `json:"TimeoutTime"`

	// Total number of downloaded bytes
	// Required: true
	TotalBytes *int32 `json:"TotalBytes"`

	// Total number of milliseconds it took for the connection to complete
	// Required: true
	TotalTime *int32 `json:"TotalTime"`

	// The requested resource url
	URL string `json:"Url,omitempty"`

	// Was the Url excluded from waterfall (timing) data by the user?
	// Required: true
	URLIsBlocked *bool `json:"UrlIsBlocked"`

	// Number of milliseconds the connection was in waiting state
	// Required: true
	WaitTime *int32 `json:"WaitTime"`
}

// Validate validates this page element
func (m *PageElement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPSHandshakeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaleTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeoutTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLIsBlocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaitTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageElement) validateConnectTime(formats strfmt.Registry) error {

	if err := validate.Required("ConnectTime", "body", m.ConnectTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateHTTPStatusCode(formats strfmt.Registry) error {

	if err := validate.Required("HttpStatusCode", "body", m.HTTPStatusCode); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateHTTPSHandshakeTime(formats strfmt.Registry) error {

	if err := validate.Required("HttpsHandshakeTime", "body", m.HTTPSHandshakeTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("Index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateReceiveTime(formats strfmt.Registry) error {

	if err := validate.Required("ReceiveTime", "body", m.ReceiveTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateResolveTime(formats strfmt.Registry) error {

	if err := validate.Required("ResolveTime", "body", m.ResolveTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateSendTime(formats strfmt.Registry) error {

	if err := validate.Required("SendTime", "body", m.SendTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateStaleTime(formats strfmt.Registry) error {

	if err := validate.Required("StaleTime", "body", m.StaleTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("StartTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateTimeoutTime(formats strfmt.Registry) error {

	if err := validate.Required("TimeoutTime", "body", m.TimeoutTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateTotalBytes(formats strfmt.Registry) error {

	if err := validate.Required("TotalBytes", "body", m.TotalBytes); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateTotalTime(formats strfmt.Registry) error {

	if err := validate.Required("TotalTime", "body", m.TotalTime); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateURLIsBlocked(formats strfmt.Registry) error {

	if err := validate.Required("UrlIsBlocked", "body", m.URLIsBlocked); err != nil {
		return err
	}

	return nil
}

func (m *PageElement) validateWaitTime(formats strfmt.Registry) error {

	if err := validate.Required("WaitTime", "body", m.WaitTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PageElement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageElement) UnmarshalBinary(b []byte) error {
	var res PageElement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
