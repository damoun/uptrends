// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatternMatch pattern match
//
// swagger:model PatternMatch
type PatternMatch struct {

	// date time
	DateTime *DateTimePatternMatch `json:"DateTime,omitempty"`

	// is positive
	// Required: true
	IsPositive *bool `json:"IsPositive"`

	// pattern
	Pattern string `json:"Pattern,omitempty"`
}

// Validate validates this pattern match
func (m *PatternMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPositive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatternMatch) validateDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.DateTime) { // not required
		return nil
	}

	if m.DateTime != nil {
		if err := m.DateTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DateTime")
			}
			return err
		}
	}

	return nil
}

func (m *PatternMatch) validateIsPositive(formats strfmt.Registry) error {

	if err := validate.Required("IsPositive", "body", m.IsPositive); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatternMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatternMatch) UnmarshalBinary(b []byte) error {
	var res PatternMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
