// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ScheduledReport scheduled report
//
// swagger:model ScheduledReport
type ScheduledReport struct {

	// dashboard Guid
	DashboardGUID string `json:"DashboardGuid,omitempty"`

	// dashboard Guid specified
	DashboardGUIDSpecified bool `json:"DashboardGuidSpecified,omitempty"`

	// file type
	FileType ScheduledReportFileType `json:"FileType,omitempty"`

	// hash
	Hash string `json:"Hash,omitempty"`

	// internal notes
	InternalNotes string `json:"InternalNotes,omitempty"`

	// is active
	IsActive bool `json:"IsActive,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// recipients
	Recipients *Recipients `json:"Recipients,omitempty"`

	// schedule
	Schedule *Schedule `json:"Schedule,omitempty"`

	// scheduled report Guid
	ScheduledReportGUID string `json:"ScheduledReportGuid,omitempty"`

	// selected period
	SelectedPeriod PresetPeriodTypeWithExclusive `json:"SelectedPeriod,omitempty"`
}

// Validate validates this scheduled report
func (m *ScheduledReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledReport) validateFileType(formats strfmt.Registry) error {

	if swag.IsZero(m.FileType) { // not required
		return nil
	}

	if err := m.FileType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FileType")
		}
		return err
	}

	return nil
}

func (m *ScheduledReport) validateRecipients(formats strfmt.Registry) error {

	if swag.IsZero(m.Recipients) { // not required
		return nil
	}

	if m.Recipients != nil {
		if err := m.Recipients.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Recipients")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduledReport) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Schedule")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduledReport) validateSelectedPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectedPeriod) { // not required
		return nil
	}

	if err := m.SelectedPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SelectedPeriod")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledReport) UnmarshalBinary(b []byte) error {
	var res ScheduledReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
