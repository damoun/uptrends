// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubStepType sub step type
//
// swagger:model SubStepType
type SubStepType string

const (

	// SubStepTypeNavigate captures enum value "Navigate"
	SubStepTypeNavigate SubStepType = "Navigate"

	// SubStepTypeClick captures enum value "Click"
	SubStepTypeClick SubStepType = "Click"

	// SubStepTypeSet captures enum value "Set"
	SubStepTypeSet SubStepType = "Set"

	// SubStepTypeTest captures enum value "Test"
	SubStepTypeTest SubStepType = "Test"

	// SubStepTypeScript captures enum value "Script"
	SubStepTypeScript SubStepType = "Script"

	// SubStepTypeHover captures enum value "Hover"
	SubStepTypeHover SubStepType = "Hover"

	// SubStepTypeScreenshot captures enum value "Screenshot"
	SubStepTypeScreenshot SubStepType = "Screenshot"

	// SubStepTypeScrollTo captures enum value "ScrollTo"
	SubStepTypeScrollTo SubStepType = "ScrollTo"

	// SubStepTypeWaitForElement captures enum value "WaitForElement"
	SubStepTypeWaitForElement SubStepType = "WaitForElement"

	// SubStepTypeSwitchToFrame captures enum value "SwitchToFrame"
	SubStepTypeSwitchToFrame SubStepType = "SwitchToFrame"

	// SubStepTypeSwitchToTab captures enum value "SwitchToTab"
	SubStepTypeSwitchToTab SubStepType = "SwitchToTab"
)

// for schema
var subStepTypeEnum []interface{}

func init() {
	var res []SubStepType
	if err := json.Unmarshal([]byte(`["Navigate","Click","Set","Test","Script","Hover","Screenshot","ScrollTo","WaitForElement","SwitchToFrame","SwitchToTab"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subStepTypeEnum = append(subStepTypeEnum, v)
	}
}

func (m SubStepType) validateSubStepTypeEnum(path, location string, value SubStepType) error {
	if err := validate.EnumCase(path, location, value, subStepTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sub step type
func (m SubStepType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubStepTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
