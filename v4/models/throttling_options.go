// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ThrottlingOptions throttling options
//
// swagger:model ThrottlingOptions
type ThrottlingOptions struct {

	// throttling latency
	ThrottlingLatency int32 `json:"ThrottlingLatency,omitempty"`

	// throttling speed down
	ThrottlingSpeedDown int32 `json:"ThrottlingSpeedDown,omitempty"`

	// throttling speed up
	ThrottlingSpeedUp int32 `json:"ThrottlingSpeedUp,omitempty"`

	// throttling type
	ThrottlingType ThrottlingType `json:"ThrottlingType,omitempty"`

	// throttling value
	ThrottlingValue ThrottlingValue `json:"ThrottlingValue,omitempty"`
}

// Validate validates this throttling options
func (m *ThrottlingOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateThrottlingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThrottlingOptions) validateThrottlingType(formats strfmt.Registry) error {

	if swag.IsZero(m.ThrottlingType) { // not required
		return nil
	}

	if err := m.ThrottlingType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ThrottlingType")
		}
		return err
	}

	return nil
}

func (m *ThrottlingOptions) validateThrottlingValue(formats strfmt.Registry) error {

	if swag.IsZero(m.ThrottlingValue) { // not required
		return nil
	}

	if err := m.ThrottlingValue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ThrottlingValue")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThrottlingOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThrottlingOptions) UnmarshalBinary(b []byte) error {
	var res ThrottlingOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
