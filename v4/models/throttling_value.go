// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ThrottlingValue throttling value
//
// swagger:model ThrottlingValue
type ThrottlingValue string

const (

	// ThrottlingValueAdsl captures enum value "Adsl"
	ThrottlingValueAdsl ThrottlingValue = "Adsl"

	// ThrottlingValueFiber captures enum value "Fiber"
	ThrottlingValueFiber ThrottlingValue = "Fiber"

	// ThrottlingValueCable captures enum value "Cable"
	ThrottlingValueCable ThrottlingValue = "Cable"

	// ThrottlingValueNr2G captures enum value "2G"
	ThrottlingValueNr2G ThrottlingValue = "2G"

	// ThrottlingValueNr3G captures enum value "3G"
	ThrottlingValueNr3G ThrottlingValue = "3G"

	// ThrottlingValueNr4G captures enum value "4G"
	ThrottlingValueNr4G ThrottlingValue = "4G"
)

// for schema
var throttlingValueEnum []interface{}

func init() {
	var res []ThrottlingValue
	if err := json.Unmarshal([]byte(`["Adsl","Fiber","Cable","2G","3G","4G"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		throttlingValueEnum = append(throttlingValueEnum, v)
	}
}

func (m ThrottlingValue) validateThrottlingValueEnum(path, location string, value ThrottlingValue) error {
	if err := validate.EnumCase(path, location, value, throttlingValueEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this throttling value
func (m ThrottlingValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateThrottlingValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
