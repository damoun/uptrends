// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserDefinedFunction user defined function
//
// swagger:model UserDefinedFunction
type UserDefinedFunction struct {

	// This property is not supported yet
	JwtAlgorithm struct {
		JwtAlgorithm
	} `json:"JwtAlgorithm,omitempty"`

	// This property is not supported yet
	JwtSigningKey string `json:"JwtSigningKey,omitempty"`

	// mappings
	Mappings []*UserDefinedFunctionMapping `json:"Mappings"`

	// name
	Name string `json:"Name,omitempty"`

	// regex
	Regex string `json:"Regex,omitempty"`

	// type
	// Required: true
	Type UserDefinedFunctionType `json:"Type"`
}

// Validate validates this user defined function
func (m *UserDefinedFunction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJwtAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDefinedFunction) validateJwtAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.JwtAlgorithm) { // not required
		return nil
	}

	return nil
}

func (m *UserDefinedFunction) validateMappings(formats strfmt.Registry) error {

	if swag.IsZero(m.Mappings) { // not required
		return nil
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserDefinedFunction) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDefinedFunction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDefinedFunction) UnmarshalBinary(b []byte) error {
	var res UserDefinedFunction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
