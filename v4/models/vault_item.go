// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VaultItem vault item
//
// swagger:model VaultItem
type VaultItem struct {

	// The certificate archive that is stored in this vault item, if applicable
	CertificateArchive struct {
		CertificateArchive
	} `json:"CertificateArchive,omitempty"`

	// The file info that is stored in this vault item, if applicable
	FileInfo struct {
		FileInfo
	} `json:"FileInfo,omitempty"`

	// The hash of this vault item
	Hash string `json:"Hash,omitempty"`

	// Whether or not the vault item is considered sensitive.
	IsSensitive bool `json:"IsSensitive,omitempty"`

	// The name of this vault item
	Name string `json:"Name,omitempty"`

	// Notes about this vault item
	Notes string `json:"Notes,omitempty"`

	// The password associated with a credentialset
	Password string `json:"Password,omitempty"`

	// The UserName of a credentialset
	UserName string `json:"UserName,omitempty"`

	// The value that is stored in this vault item. Not used for Certificate Archives
	Value string `json:"Value,omitempty"`

	// The unique key of this vault item
	VaultItemGUID string `json:"VaultItemGuid,omitempty"`

	// The vault item type
	// Required: true
	VaultItemType struct {
		VaultItemTypes
	} `json:"VaultItemType"`

	// The unique identifier of the vault section that this vault item belongs to
	// Required: true
	VaultSectionGUID *string `json:"VaultSectionGuid"`
}

// Validate validates this vault item
func (m *VaultItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateArchive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultItemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultSectionGUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VaultItem) validateCertificateArchive(formats strfmt.Registry) error {

	if swag.IsZero(m.CertificateArchive) { // not required
		return nil
	}

	return nil
}

func (m *VaultItem) validateFileInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.FileInfo) { // not required
		return nil
	}

	return nil
}

func (m *VaultItem) validateVaultItemType(formats strfmt.Registry) error {

	return nil
}

func (m *VaultItem) validateVaultSectionGUID(formats strfmt.Registry) error {

	if err := validate.Required("VaultSectionGuid", "body", m.VaultSectionGUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VaultItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VaultItem) UnmarshalBinary(b []byte) error {
	var res VaultItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
